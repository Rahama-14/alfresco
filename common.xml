<project name="common">

   <!-- ****************************************** -->
   <!-- ** Initialisation/Configuration targets ** -->
   <!-- ****************************************** -->

   <property name="common.dir" value="${basedir}" />
   <import file="${common.dir}/common-init.xml" />

   <target name="setup" depends="common-init" description="Creates the initial directory structure for a project">
      <mkdir dir="${src.java.dir}" />
      <mkdir dir="${src.webinf.dir}" />
      <mkdir dir="${local.lib.dir}" />
      <mkdir dir="${classes.dir}" />
   </target>

   <target name="init" depends="common-init">
      <path id="java.classpath">
         <fileset dir="${common.lib.dir}">
            <include name="**/*.jar" />
         </fileset>
         <fileset dir="${common.dir}/projects">
            <include name="**/build/dist/*.jar" />
         </fileset>
      </path>

      <mkdir dir="${classes.dir}" />
      <mkdir dir="${dist.dir}" />

      <!-- load the JIBX target -->
      <taskdef name="bind" classname="org.jibx.binding.ant.CompileTask"
               classpath="${common.lib.dir}/jibx/jibx-bind.jar;${common.lib.dir}/bcel.jar;${common.lib.dir}/xpp3.jar"/>
   </target>

   <target name="dump-properties" depends="common-init">
      <echo>ant.project.name = ${ant.project.name}</echo>
      <echo>basedir = ${basedir}</echo>
      <echo>common.dir = ${common.dir}</echo>
      <echo>common.lib.dir = ${common.lib.dir}</echo>
      <echo>version.number = ${version.number}</echo>
      <echo>jboss.home = ${jboss.home}</echo>
      <echo>tomcat.home = ${tomcat.home}</echo>
      <echo>deploy.dir = ${deploy.dir}</echo>
   </target>

   <target name="dump-all-properties" depends="common-init">
      <echoproperties/>
   </target>

   <!-- *********************** -->
   <!-- ** Composite targets ** -->
   <!-- *********************** -->

   <target name="build" depends="clean, package"
           description="Builds the project after cleaning" />

   <target name="incremental" depends="package"
           description="Incrementally builds the project" />

   <!-- ************************* -->
   <!-- ** Compilation targets ** -->
   <!-- ************************* -->

   <target name="compile-java" depends="init" description="Compiles the Java source code">
      <mkdir dir="${classes.dir}"/>
      <javac destdir="${classes.dir}" fork="true" deprecation="on" debug="on" target="1.5" source="1.5">
         <src path="${src.java.dir}"/>
         <classpath refid="java.classpath"/>
      </javac>

      <copy todir="${classes.dir}">
         <fileset dir="${src.java.dir}">
            <patternset>
                <exclude name="**/*.java"/>
            </patternset>
         </fileset>
      </copy>
   </target>
   
   <target name="compile-javadocs" depends="init"
           description="Creates the JavaDocs for the project">
      <mkdir dir="${javadoc.dir}" />
      <javadoc sourcepath="${src.java.dir}" destdir="${javadoc.dir}" 
               packagenames="${javadoc.packages}" author="true" version="true" 
               windowtitle="${javadoc.title}" />
   </target>

   <target name="compile-taglibdocs" depends="init" 
           description="Creates the tag library docs for the project">
      <mkdir dir="${taglibdoc.dir}" />
      <java fork="true" jar="${common.lib.dir}/tlddoc.jar" failonerror="true">
        <arg line="-d ${taglibdoc.dir}"/>
        <arg value="${src.webinf.dir}/*.tld"/>
      </java>
   </target>
   
   <target name="run-tests" depends="package-jar"
           description="Runs the projects unit tests">
      <mkdir dir="${test.results.dir}" />
      <junit printsummary="yes" fork="yes" haltonfailure="yes" dir="${basedir}">
         <!-- TODO: Try and include the previous classpath rather than re-specify -->
<!--         <classpath refid="java.classpath"/> -->
         <classpath>
            <fileset dir="${common.lib.dir}">
               <include name="**/*.jar" />
            </fileset>
            <fileset dir="${common.dir}/projects">
               <include name="**/build/dist/*.jar" />
            </fileset>
            <dirset dir="${common.dir}/projects">
               <include name="**/source/test-resources" />
            </dirset>
         </classpath>
         <formatter type="plain"/>
         <batchtest fork="yes" todir="${test.results.dir}">
            <fileset dir="${src.java.dir}">
               <include name="**/*Test.java" />
               <exclude name="**/Base*Test.java" />
               <exclude name="**/Abstract*Test.java" />
            </fileset>
        </batchtest>
      </junit>
   </target>

   <!-- *********************** -->
   <!-- ** Packaging targets ** -->
   <!-- *********************** -->

   <!-- we provide the package target so projects can override to build what they need -->
   <target name="package" depends="package-jar" description="Packages the archive files" />
      
   <target name="package-jar" depends="compile-java" description="Packages the JAR file">
      <mkdir dir="${dist.dir}"/>
      <jar jarfile="${dist.dir}\${jar.name}" basedir="${classes.dir}"/>
   </target>

   <target name="package-war" depends="package-jar" description="Packages the WAR file">
      <mkdir dir="${dist.dir}" />
      <!-- manifest="${src.metainf.dir}\manifest.mf" -->
      <war warfile="${dist.dir}\${war.name}" webxml="${src.web.dir}\WEB-INF\web.xml">
         <fileset dir="${src.web.dir}" excludes="WEB-INF\web.xml" />
         <zipfileset dir="${common.lib.dir}" includes="${webinf.lib.includes}" excludes="${webinf.lib.excludes}" 
                     prefix="WEB-INF/lib" />
         <zipfileset dir="${dist.dir}" includes="${jar.name}" prefix="WEB-INF/lib" />
      </war>
   </target>

   <target name="assemble-ear" depends="package-war">
      <copy todir="${assemble.dir}">
         <fileset dir="${dist.dir}" includes="*.war" />
      </copy>
   </target>
   
   <target name="package-ear" depends="assemble-ear" description="Packages the EAR file">
      <mkdir dir="${assemble.dir}"/>
      <ear earfile="${dist.dir}\${ear.name}" appxml="${src.metainf.dir}\application.xml">
         <fileset dir="${assemble.dir}"/>
      </ear>
   </target>

   <!-- ********************** -->
   <!-- ** Cleaning targets ** -->
   <!-- ********************** -->

   <target name="clean" depends="init" description="Cleans the project">
      <delete includeEmptyDirs="true" quiet="yes" dir="${classes.dir}"/>
      <delete includeEmptyDirs="true" quiet="yes" dir="${dist.dir}"/>
      <delete includeEmptyDirs="true" quiet="yes" dir="${assemble.dir}"/>
      <delete includeEmptyDirs="true" quiet="yes" dir="${test.results.dir}"/>
      <delete includeEmptyDirs="true" quiet="yes" dir="${docs.dir}"/>
   </target>

</project>

