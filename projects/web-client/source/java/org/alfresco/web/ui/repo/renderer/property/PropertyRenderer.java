package org.alfresco.web.ui.repo.renderer.property;

import java.io.IOException;
import java.util.List;

import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.context.ResponseWriter;

import org.alfresco.web.ui.common.renderer.BaseRenderer;
import org.alfresco.web.ui.repo.component.property.UIProperty;

/**
 * Renderer for the UIProperty component
 * 
 * @author gavinc
 */
public class PropertyRenderer extends BaseRenderer
{
   /**
    * @see javax.faces.render.Renderer#encodeBegin(javax.faces.context.FacesContext, javax.faces.component.UIComponent)
    */
   public void encodeBegin(FacesContext context, UIComponent component) throws IOException
   {
      if (component.isRendered() == false)
      {
         return;
      }

      // NOTE: we close off the first <td> generated by the property sheet's grid renderer
      context.getResponseWriter().write("</td>");
   }

   /**
    * @see javax.faces.render.Renderer#encodeChildren(javax.faces.context.FacesContext, javax.faces.component.UIComponent)
    */
   public void encodeChildren(FacesContext context, UIComponent component) throws IOException
   {
      if (component.isRendered() == false)
      {
         return;
      }
      
      UIProperty property = (UIProperty)component;
      ResponseWriter out = context.getResponseWriter();
      
      // make sure there are exactly 2 child components
      int count = property.getChildCount();
      if (count != 2)
      {
         throw new IllegalStateException("There should be 2 child components for a property");
      }
      
      // get the label and the control
      List<UIComponent> kids = property.getChildren();
      UIComponent label = kids.get(0);
      UIComponent control = kids.get(1);
      
      // place a width on the label column if necessary
      Integer labelWidth = (Integer)property.getParent().getAttributes().get("labelWidth");
      out.write("</td><td");
      if (labelWidth != null)
      {
         outputAttribute(out, labelWidth, "width");
      }
      
      out.write(">");
      // render the label
      label.encodeBegin(context);
      label.encodeChildren(context);
      label.encodeEnd(context);
      
      // render the control
      context.getResponseWriter().write("</td><td>");
      control.encodeBegin(context);
      control.encodeChildren(context);
      control.encodeEnd(context);
      
      // NOTE: we'll allow the property sheet's grid renderer close off the last <td>
   }

   /**
    * @see javax.faces.render.Renderer#encodeEnd(javax.faces.context.FacesContext, javax.faces.component.UIComponent)
    */
   public void encodeEnd(FacesContext context, UIComponent component) throws IOException
   {
      // we don't need to do anything in here
   }

   /**
    * @see javax.faces.render.Renderer#getRendersChildren()
    */
   public boolean getRendersChildren()
   {
      return true;
   }

}
