/*
 * Copyright (C) 2005 Alfresco, Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * As a special exception to the terms and conditions of version 2.0 of
 * the GPL, you may redistribute this Program in connection with Free/Libre
 * and Open Source Software ("FLOSS") applications as described in Alfresco's
 * FLOSS exception.  You should have recieved a copy of the text describing
 * the FLOSS exception, and it is also available here:
 * http://www.alfresco.com/legal/licensing" */
package org.alfresco.web.forms;

import org.alfresco.model.WCMAppModel;
import org.alfresco.repo.domain.PropertyValue;
import org.alfresco.repo.remote.AVMRemoteInputStream;
import org.alfresco.service.cmr.avm.AVMNodeDescriptor;
import org.alfresco.service.cmr.avm.AVMNotFoundException;
import org.alfresco.service.cmr.remote.AVMRemote;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.w3c.dom.*;
import org.xml.sax.SAXException;
import javax.xml.parsers.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;

/**
 * Common implementation of functions called in the context of FormDataRenderers.
 * This uses AVMRemote rather than AVMService so that in can be used in the context
 * of both the alfresco webapp and the virtualization server.
 *
 * @author Ariel Backenroth
 */
public class FormDataFunctions
{
   private static final Log LOGGER = LogFactory.getLog(FormDataFunctions.class);

   private static DocumentBuilder documentBuilder;

   private final AVMRemote avmRemote;

   public FormDataFunctions(final AVMRemote avmRemote)
   {
      this.avmRemote = avmRemote;
   }

   /**
    * Loads and parses an xml document at the specified path using avm remote.
    *
    * @param avmPath a path within the avm repository.
    * @return the parsed document.
    */
   public Document parseXMLDocument(final String avmPath)
      throws IOException,
      SAXException
   {
      final InputStream istream = this.avmRemote.getFileInputStream(-1, avmPath); 
      try 
      {
         return XMLUtil.parse(istream);
      }
      finally
      {
         istream.close();
      }
   }

   /**
    * Loads and parses all xml documents at the specified path generated by the
    * specified form using avm remote.
    *
    * @param formName a form name
    * @param avmPath a path within the avm repository.
    * @return the parsed document.
    */
   public Map<String, Document> parseXMLDocuments(final String formName, final String avmPath)
      throws IOException,
      SAXException
   {
      final Map<String, AVMNodeDescriptor> entries = 
         this.avmRemote.getDirectoryListing(-1, avmPath);
      final Map<String, Document> result = new HashMap<String, Document>();
      for (Map.Entry<String, AVMNodeDescriptor> entry : entries.entrySet())
      {
         final String entryName = entry.getKey();
         AVMNodeDescriptor entryNode = entry.getValue();
         if (entryNode.isFile())
         {
            PropertyValue pv = 
               this.avmRemote.getNodeProperty(-1, 
                                              avmPath + '/' + entryName,
                                              WCMAppModel.PROP_PARENT_FORM_NAME);
            if (pv == null || 
                pv.getStringValue() == null || 
                !((String)pv.getStringValue()).equals(formName))
            {
               // it's not generated by the same template type
               continue;
            }

            pv = this.avmRemote.getNodeProperty(-1, 
                                                avmPath + '/' + entryName,
                                                WCMAppModel.PROP_PARENT_RENDERING_ENGINE_TEMPLATE);
            
            if (pv != null)
            {
               // it's generated by a rendering engine (it's not the xml file)
               continue;
            }
            final InputStream istream = this.avmRemote.getFileInputStream(-1, avmPath + '/' + entryName);
            try
            {
               result.put(entryName, XMLUtil.parse(istream));
            }
            finally
            {
               istream.close();
            }
         }
      }
      return result;
   }
}