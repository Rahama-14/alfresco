<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE beans PUBLIC '-//SPRING//DTD BEAN//EN' 'http://www.springframework.org/dtd/spring-beans.dtd'>

<beans>

	<!-- Provides the ability to synchronize a single user -->	
    <bean id="ldapSinglePersonExportSource" class="org.alfresco.module.alfnetwork.LDAPSinglePersonExportSource">

        <!-- 
        The query to select objects that represent the users to import.
        
        For Open LDAP, using a basic schema, the following is probably what you want:
        (objectclass=inetOrgPerson)
        
        For Active Directory:
        (objectclass=user)
        -->
        <property name="personQuery">
            <value>${ldap.synchronisation.personQuery}</value>
        </property>
        
        <!--
        The seach base restricts the LDAP query to a sub section of tree on the LDAP server.
        -->
        <property name="searchBase">
            <value>${ldap.synchronisation.personSearchBase}</value>
        </property>
        
        <!--
        The unique identifier for the user.
        
        THIS MUST MATCH WHAT THE USER TYPES IN AT THE LOGIN PROMPT    
        
        For simple LDAP authentication this is likely to be "cn" or, less friendly, "distinguishedName"
        
        In OpenLDAP, using other authentication mechanisms "uid", but this depends on how you map
        from the id in the LDAP authentication request to search for the inetOrgPerson against which
        to authenticate.
        
        In Active Directory this is most likely to be "sAMAccountName" 
        
        This property is mandatory and must appear on all users found by the query defined above.
        
        -->
        <property name="userIdAttributeName">
            <value>${ldap.synchronisation.userIdAttributeName}</value>
        </property>
        
        <!-- Services -->
        <property name="LDAPInitialDirContextFactory">
            <ref bean="ldapSyncInitialDirContextFactory"/>
        </property>
        <property name="personService">
            <ref bean="personService"></ref>
        </property>
        <property name="namespaceService">
            <ref bean="namespaceService"/>
        </property>
        
        <!--
        This property defines a mapping between attributes held on LDAP user objects and
        the properties of user objects held in the repository. The key is the QName of an attribute in
        the repository, the value is the attribute name from the user/inetOrgPerson/.. object in the
        LDAP repository.     
        -->
        <property name="attributeMapping">
            <map>
                <entry key="cm:userName">
                    <!-- Must match the same attribute as userIdAttributeName -->
                    <value>${ldap.synchronisation.userIdAttributeName}</value>
                </entry>
                <entry key="cm:firstName">
                    <!-- OpenLDAP: "givenName" -->
                    <!-- Active Directory: "givenName" -->
                    <value>${ldap.synchronisation.userFirstNameAttributeName}</value>
                </entry>
                <entry key="cm:lastName">
                    <!-- OpenLDAP: "sn" -->
                    <!-- Active Directory: "sn" -->
                    <value>${ldap.synchronisation.userLastNameAttributeName}</value>
                </entry>
                <entry key="cm:email">
                    <!-- OpenLDAP: "mail" -->
                    <!-- Active Directory: "???" -->
                    <value>${ldap.synchronisation.userEmailAttributeName}</value>
                </entry>
                <entry key="cm:organizationId">
                    <!-- OpenLDAP: "o" -->
                    <!-- Active Directory: "???" -->
                    <value>${ldap.synchronisation.userOrganizationalIdAttributeName}</value>
                </entry>
                <!-- Always use the default -->
                <entry key="cm:homeFolderProvider">
                    <null/>
                </entry>
            </map>
        </property>
        <!-- Set a default home folder provider -->
        <!-- Defaults only apply for values above -->
        <property name="attributeDefaults">
            <map>
                <entry key="cm:homeFolderProvider">
                    <value>${ldap.synchronisation.defaultHomeFolderProvider}</value>
                </entry>
            </map>
        </property>
    </bean>
    
    <bean id="ldapSinglePersonImport" class="org.alfresco.repo.importer.ExportSourceImporter">
        <property name="importerService">
            <ref bean="importerComponentWithBehaviour"/>
        </property>
        <property name="transactionService">
            <ref bean="transactionComponent"/>
        </property>
        <property name="authenticationComponent">
            <ref bean="authenticationComponent"/>
        </property>
        <property name="exportSource">
            <ref bean="ldapSinglePersonExportSource"/>
        </property>

        <!-- The store that contains people - this should not be changed -->
        <property name="storeRef">
            <value>${spaces.store}</value>
        </property>
        
        <!-- The location of people nodes within the store defined above - this should not be changed -->
        <property name="path">
            <value>/${system.system_container.childname}/${system.people_container.childname}</value>
        </property>
        
        <!-- If true, clear all existing people before import, if false update/add people from the xml -->
        <property name="clearAllChildren">
            <value>false</value>
        </property>
        <property name="nodeService">
            <ref bean="nodeService"/>
        </property>
        <property name="searchService">
            <ref bean="searchService"/>
        </property>
        <property name="namespacePrefixResolver">
            <ref bean="namespaceService"/>
        </property>
        
        <property name="caches">
            <set>
                <ref bean="permissionsAccessCache"/>
            </set>
        </property>
    </bean>

</beans>