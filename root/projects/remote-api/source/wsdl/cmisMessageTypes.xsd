<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.cmis.org/2008/05" xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:cmis="http://www.cmis.org/2008/05"
	elementFormDefault="qualified">
	<xs:include schemaLocation="CMIS.xsd" />


	 <!--Exceptions-->
	<xs:complexType name="cmisFaultType">
		<xs:sequence>
			<xs:element name="errorCode" type="xs:integer" />
			<xs:element name="errorMessage" type="xs:string" />
		</xs:sequence>
	</xs:complexType>

	<!--  specific exceptions -->
	<xs:complexType name="constraintViolationExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="constraintViolationException" type="cmis:constraintViolationExceptionType" />
	<xs:complexType name="contentAlreadyExistsExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="contentAlreadyExistsException" type="cmis:contentAlreadyExistsExceptionType" />
	<xs:complexType name="filterNotValidExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="filterNotValidException" type="cmis:filterNotValidExceptionType" />
	<xs:complexType name="folderNotValidExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="folderNotValidException" type="cmis:folderNotValidExceptionType" />
	<xs:complexType name="invalidArgumentExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="invalidArgumentException" type="cmis:invalidArgumentExceptionType" />
	<xs:complexType name="notInFolderExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="notInFolderException" type="cmis:notInFolderExceptionType" />
	<xs:complexType name="objectNotFoundExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="objectNotFoundException" type="cmis:objectNotFoundExceptionType" />
	<xs:complexType name="offsetExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="offsetException" type="cmis:offsetExceptionType" />
	<xs:complexType name="operationNotSupportedExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="operationNotSupportedException" type="cmis:operationNotSupportedExceptionType" />
	<xs:complexType name="permissionDeniedExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="permissionDeniedException" type="cmis:permissionDeniedExceptionType" />
	<xs:complexType name="runtimeExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="runtimeException" type="cmis:runtimeExceptionType" />
	<xs:complexType name="storageExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="storageException" type="cmis:storageExceptionType" />
	<xs:complexType name="streamNotSupportedExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="streamNotSupportedException" type="cmis:streamNotSupportedExceptionType" />
	<xs:complexType name="typeNotFoundExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="typeNotFoundException" type="cmis:typeNotFoundExceptionType" />
	<xs:complexType name="updateConflictExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="updateConflictException" type="cmis:updateConflictExceptionType" />
	<xs:complexType name="versioningExceptionType">
		<xs:complexContent>
			<xs:extension base="cmis:cmisFaultType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="versioningException" type="cmis:versioningExceptionType" />
	
	

	
	  <!--[Repository Services]-->
	<xs:element name="getRepositories">
		<xs:complexType>
			<xs:sequence />
		</xs:complexType>
	</xs:element>
	<xs:element name="getRepositoriesResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repository" type="cmis:cmisRepositoryEntryType"
					minOccurs="0" maxOccurs="unbounded" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
  
  
  <!-- getRepositoryInfo Operation -->
	<xs:element name="getRepositoryInfo">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getRepositoryInfoResponse" type="cmis:cmisRepositoryInfoType" />
  
  <!-- getTypes Operation -->
	<xs:element name="getTypes">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="typeId" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="returnPropertyDefinitions" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="maxItems" type="xs:integer" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="skipCount" type="xs:integer" minOccurs="0"
					maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getTypesResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:type" minOccurs="0" maxOccurs="unbounded" />
				<xs:element name="hasMoreItems" type="xs:boolean"
					minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
  
  <!-- getTypeDefinition Operation -->
	<xs:element name="getTypeDefinition">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="typeId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getTypeDefinitionResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:type" minOccurs="0" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!--[Navigation Services]-->
  <!-- getDescendants Operation -->
	<xs:element name="getDescendants">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="folderId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="type" type="cmis:enumTypesOfFileableObjects"
					minOccurs="0" maxOccurs="1" />
				<xs:element name="depth" type="xs:integer" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="filter" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="includeAllowableActions" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="includeRelationships" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getDescendantsResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:object" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!-- getChildren Operation -->
	<xs:element name="getChildren">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="folderId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="type" type="cmis:enumTypesOfFileableObjects"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="filter" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="includeAllowableActions" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="includeRelationships" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="maxItems" type="xs:integer" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="skipCount" type="xs:integer" minOccurs="0"
					maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getChildrenResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:object" minOccurs="0" maxOccurs="unbounded" />
				<xs:element name="hasMoreItems" type="xs:boolean"
					minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!-- getFolderParent Operation -->
	<xs:element name="getFolderParent">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="folderId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="filter" type="xs:string" minOccurs="0"
					maxOccurs="1" />
				<xs:element name="includeAllowableActions" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="includeRelationships" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="returnToRoot" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getFolderParentResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:object" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!-- getObjectParents Operation-->
	<xs:element name="getObjectParents">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="filter" type="xs:string" minOccurs="0"
					maxOccurs="1" />
				<xs:element name="includeAllowableActions" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="includeRelationships" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getObjectParentsResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:object" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!-- getCheckedoutDocs Operation -->
	<xs:element name="getCheckedoutDocs">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="folderID" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="filter" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="includeAllowableActions" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="includeRelationships" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="maxItems" type="xs:integer" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="skipCount" type="xs:integer" minOccurs="0"
					maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getCheckedoutDocsResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:object" minOccurs="0" maxOccurs="unbounded" />
				<xs:element name="hasMoreItems" type="xs:boolean"
					minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!--[Object Services]-->

  <!-- createDocument Operation -->
	<xs:element name="createDocument">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="typeId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="properties" type="cmis:cmisPropertiesType"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="folderId" type="xs:string" minOccurs="0"
					maxOccurs="1" />
				<xs:element name="contentStream" type="cmis:cmisContentStreamType"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="versioningState" type="cmis:enumVersioningState"
					minOccurs="0" maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="createDocumentResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!-- createFolder Operation -->
	<xs:element name="createFolder">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="typeId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="properties" type="cmis:cmisPropertiesType"
					minOccurs="1" maxOccurs="1" />
        <!-- must match the type attribute value of the properties object -->
				<xs:element name="folderId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="createFolderResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!-- createRelationship Operation -->
	<xs:element name="createRelationship">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="typeId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="properties" type="cmis:cmisPropertiesType"
					minOccurs="1" maxOccurs="1" />
        <!-- must match the type attribute value of the properties object -->
				<xs:element name="sourceObjectId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<!--
					if sourceObjectId exist in the properties passed in then their
					values MUST match
				-->
				<xs:element name="targetObjectId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<!--
					if targetObjectId exist in the properties passed in then their
					values MUST match
				-->
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="createRelationshipResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

  <!--createPolicy Operation-->
	<xs:element name="createPolicy">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="typeId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="properties" type="cmis:cmisPropertiesType"
					minOccurs="1" maxOccurs="1" />
				<!--
					note that the object type may also be an element in the object and
					if present the values must match
				-->
				<xs:element name="folderId" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="createPolicyResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- getAllowableActions Operation -->
	<xs:element name="getAllowableActions">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getAllowableActionsResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="allowableActions" type="cmis:cmisAllowableActionsType"
					minOccurs="1" maxOccurs="1" />
				<!--
					returning no action elements indicates that no actions are allowed
				-->
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- getProperties Operation -->
	<xs:element name="getProperties">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="returnVersion" type="cmis:enumReturnVersion"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="filter" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="includeAllowableActions" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="includeRelationships" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getPropertiesResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:object" minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- getContentStream Operation -->
	<xs:element name="getContentStream">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="documentId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getContentStreamResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="contentStream" type="cmis:cmisContentStreamType"
					minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- updateProperties Operation -->
	<xs:element name="updateProperties">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<!--
					if objectId is present in the properties the value must match this
					objectId
				-->
				<xs:element name="changeToken" type="xs:string"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="properties" type="cmis:cmisPropertiesType"
					minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="updatePropertiesResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- moveObject Operation -->
	<xs:element name="moveObject">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="targetFolderId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="sourceFolderId" type="xs:string"
					minOccurs="0" maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="moveObjectResponse">
		<xs:complexType>
			<xs:sequence />
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- deleteObject Operation -->
	<xs:element name="deleteObject">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="deleteObjectResponse">
		<xs:complexType>
			<xs:sequence />
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- deleteTree Operation -->
	<xs:element name="deleteTree">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="folderId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="unfileNonfolderObjects" type="cmis:enumUnfileNonfolderObjects"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="continueOnFailure" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="deleteTreeResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="failedToDelete">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="objectId" type="xs:string"
								minOccurs="0" maxOccurs="unbounded" />
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- setContentStream Operation -->
	<xs:element name="setContentStream">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="documentId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="overwriteFlag" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="contentStream" type="cmis:cmisContentStreamType"
					minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="setContentStreamResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="documentId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- deleteContentStream Operation -->
	<xs:element name="deleteContentStream">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="documentId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="deleteContentStreamResponse">
		<xs:complexType>
			<xs:sequence />
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!--[Multi-filing Services]-->
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- addObjectToFolder Operation-->
	<xs:element name="addObjectToFolder">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="folderId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="addObjectToFolderResponse">
		<xs:complexType>
			<xs:sequence />
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- removeObjectFromFolder Operation-->
	<xs:element name="removeObjectFromFolder">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="folderId" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="removeObjectFromFolderResponse">
		<xs:complexType>
			<xs:sequence />
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!--[Discovery Services]-->
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- query Operation -->
	<!--
		This already provided in cmis.xsd <xs:element name="query"
		type="cmis:cmisQueryType" />
	-->
	<xs:element name="queryResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:object" minOccurs="0" maxOccurs="unbounded" />
				<xs:element name="hasMoreItems" type="xs:boolean"
					minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!--[Versioning Services]-->
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- checkOut Operation -->
	<xs:element name="checkOut">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="documentId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="checkOutResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="documentId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="contentCopied" type="xs:boolean"
					minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- cancelCheckOut Operation -->
	<xs:element name="cancelCheckOut">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="documentId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="cancelCheckOutResponse">
		<xs:complexType>
			<xs:sequence />
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- checkIn Operation -->
	<xs:element name="checkIn">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="documentId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="major" type="xs:boolean" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="properties" type="cmis:cmisPropertiesType"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="contentStream" type="cmis:cmisContentStreamType"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="checkinComment" type="xs:string"
					minOccurs="0" maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="checkInResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="documentId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!--getPropertiesOfLatestVersion-->
	<xs:element name="getPropertiesOfLatestVersion">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="versionSeriesId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="majorVersion" type="xs:boolean"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="filter" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getPropertiesOfLatestVersionResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:object" minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- getAllVersions Operation -->
	<xs:element name="getAllVersions">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="versionSeriesId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="filter" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="includeAllowableActions" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="includeRelationships" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getAllVersionsResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:object" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- deleteAllVersions Operation -->
	<xs:element name="deleteAllVersions">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="versionSeriesId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="deleteAllVersionsResponse">
		<xs:complexType>
			<xs:sequence />
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!--[Relationship Services]-->
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!-- getRelationships Operation -->
	<xs:element name="getRelationships">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="direction" type="cmis:enumRelationshipDirection"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="typeId" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="includeSubRelationshipTypes" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="filter" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="includeAllowableActions" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="includeRelationships" type="xs:boolean"
					minOccurs="0" maxOccurs="1" nillable="true" />
				<xs:element name="maxItems" type="xs:integer" minOccurs="0"
					maxOccurs="1" nillable="true" />
				<xs:element name="skipCount" type="xs:integer" minOccurs="0"
					maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getRelationshipsResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:object" minOccurs="0" maxOccurs="unbounded" />
				<xs:element name="hasMoreItems" type="xs:boolean"
					minOccurs="1" maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!--[Policy Services]-->
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!--applyPolicy Operation-->
	<xs:element name="applyPolicy">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="policyId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="applyPolicyResponse">
		<xs:complexType>
			<xs:sequence />
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!--removePolicy Operation-->
	<xs:element name="removePolicy">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="policyId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="removePolicyResponse">
		<xs:complexType>
			<xs:sequence />
		</xs:complexType>
	</xs:element>
	<!--
		- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		- - - - - - - - - - - - - - - - -
	-->
  <!--getAppliedPolicies Operation-->
	<xs:element name="getAppliedPolicies">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repositoryId" type="xs:string"
					minOccurs="1" maxOccurs="1" />
				<xs:element name="objectId" type="xs:string" minOccurs="1"
					maxOccurs="1" />
				<xs:element name="filter" type="xs:string" minOccurs="0"
					maxOccurs="1" nillable="true" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="getAppliedPoliciesResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="cmis:object" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>