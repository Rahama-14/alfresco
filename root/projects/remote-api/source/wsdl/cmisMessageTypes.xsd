<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.cmis.org/ns/1.0" targetNamespace="http://www.cmis.org/ns/1.0" elementFormDefault="qualified">
  <xs:include schemaLocation="cmisObjectTypes.xsd" />
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- Common Elements -->
  <xs:element name="maxItems" type="xs:integer" />
  <xs:element name="skipCount" type="xs:integer" />
  <xs:element name="filter" type="xs:string" />
  <xs:element name="hasMoreItems" type="xs:boolean" />
  <xs:element name="contentStream" type="contentStreamType" />
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--Exceptions-->
  <xs:complexType name="basicFault">
    <xs:sequence>
      <xs:element name="errorCode" type="xs:integer" />
      <xs:element name="errorMessage" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="constraintViolationException" type="basicFault" />
  <xs:element name="contentAlreadyExistsException" type="basicFault" />
  <xs:element name="filterNotValidException" type="basicFault" />
  <xs:element name="folderNotValidException" type="basicFault" />
  <xs:element name="invalidArgumentException" type="basicFault" />
  <xs:element name="notInFolderException" type="basicFault" />
  <xs:element name="objectNotFoundException" type="basicFault" />
  <xs:element name="offsetException" type="basicFault" />
  <xs:element name="operationNotSupportedException" type="basicFault" />
  <xs:element name="permissionDeniedException" type="basicFault" />
  <xs:element name="runtimeException" type="basicFault" />
  <xs:element name="storageException" type="basicFault" />
  <xs:element name="streamNotSupportedException" type="basicFault" />
  <xs:element name="typeNotFoundException" type="basicFault" />
  <xs:element name="updateConflictException" type="basicFault" />
  <xs:element name="versioningException" type="basicFault" />
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--[Repository Services]-->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--getRepositories Operation-->
  <xs:complexType name="repositoryType">
    <xs:sequence>
      <xs:element name="repositoryID" type="ID" />
      <xs:element name="repositoryName" type="xs:string" />
      <xs:element name="repositoryURI" type="xs:anyURI" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="getRepositories">
    <xs:complexType>
      <xs:sequence />
    </xs:complexType>
  </xs:element>
  <xs:element name="getRepositoriesResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repository" type="repositoryType" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getRepositoryInfo Operation -->
  <xs:simpleType name="joinEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="noJoin" />
      <xs:enumeration value="innerOnly" />
      <xs:enumeration value="innerAndOuter" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="fulltextEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="noFulltext" />
      <xs:enumeration value="fulltextOnly" />
      <xs:enumeration value="fulltextAndStructured" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="capabilitiesType">
    <xs:sequence>
      <xs:element name="capabilityMultifiling" type="xs:boolean" />
      <xs:element name="capabilityUnfiling" type="xs:boolean" />
      <xs:element name="capabilityVersionSpecificFiling" type="xs:boolean" />
      <xs:element name="capabilityPWCUpdatable" type="xs:boolean" />
      <xs:element name="capabilityAllVersionsSearchable" type="xs:boolean" />
      <xs:element name="capabilityJoin" type="joinEnum" />
      <xs:element name="capabilityFulltext" type="fulltextEnum" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="relatedRepositoriesType">
    <xs:sequence>
      <xs:element name="repositoryID" type="ID" />
      <xs:element name="repositoryName" type="xs:string" />
      <xs:element name="repositoryURI" type="xs:anyURI" />
      <xs:element name="repositoryRelationshipName" type="xs:string" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="repositoryInfoType">
    <xs:sequence>
      <xs:element name="repositoryId" type="ID" />
      <xs:element name="repositoryName" type="xs:string" />
      <xs:element name="repositoryURI" type="xs:anyURI" />
      <xs:element name="repositoryDescription" type="xs:string" minOccurs="0" />
      <xs:element name="rootFolderId" type="ID" />
      <xs:element name="vendorName" type="xs:string" />
      <xs:element name="productName" type="xs:string" />
      <xs:element name="productVersion" type="xs:string" />
      <xs:element name="cmisVersionsSupported" type="xs:string" />
      <xs:element name="repositorySpecificInformation" type="XML" minOccurs="0" />
      <xs:element name="capabilities" type="capabilitiesType" />
      <xs:element name="relatedRepositories" type="relatedRepositoriesType" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  <xs:element name="getRepositoryInfo">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getRepositoryInfoResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryInfo" type="repositoryInfoType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getTypes Operation -->
  <xs:element name="getTypes">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="typeId" type="ID" minOccurs="0" />
        <xs:element name="returnPropertyDefinitions" type="xs:boolean" minOccurs="0" />
        <xs:element ref="maxItems" minOccurs="0" />
        <xs:element ref="skipCount" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getTypesResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="types">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="type" type="objectTypeDefinitionType" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element ref="hasMoreItems" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getTypeDefinition Operation -->
  <xs:element name="getTypeDefinition">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="typeId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getTypeDefinitionResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="type" type="objectTypeDefinitionType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--[Navigation Services]-->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getDescendants Operation -->
  <xs:simpleType name="typesOfFileableObjectsEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Documents" />
      <xs:enumeration value="Folders" />
      <xs:enumeration value="Policies" />
      <xs:enumeration value="Any" />
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="getDescendants">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="folderId" type="ID" />
        <xs:element name="type" type="typesOfFileableObjectsEnum" minOccurs="0" />
        <xs:element name="depth" type="xs:integer" minOccurs="0" />
        <xs:element ref="filter" minOccurs="0" />
        <xs:element name="includeAllowableActions" type="xs:boolean" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getDescendantsResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="descendants" type="childrenType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getChildren Operation -->
  <xs:element name="getChildren">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="folderId" type="ID" />
        <xs:element name="type" type="typesOfFileableObjectsEnum" minOccurs="0" />
        <xs:element ref="filter" minOccurs="0" />
        <xs:element name="includeAllowableActions" type="xs:boolean" minOccurs="0" />
        <xs:element ref="maxItems" minOccurs="0" />
        <xs:element ref="skipCount" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getChildrenResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="children" type="childrenType" />
        <xs:element ref="hasMoreItems" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getFolderParent Operation -->
  <xs:element name="getFolderParent">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="folderId" type="ID" />
        <xs:element ref="filter" minOccurs="0" />
        <xs:element name="includeAllowableActions" type="xs:boolean" minOccurs="0" />
        <xs:element name="returnToRoot" type="xs:boolean" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getFolderParentResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ancestors" type="objectCollectionType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getObjectParents Operation-->
  <xs:element name="getObjectParents">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="objectId" type="ID" />
        <xs:element ref="filter" minOccurs="0" />
        <xs:element name="includeAllowableActions" type="xs:boolean" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getObjectParentsResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="parents" type="objectCollectionType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getCheckedoutDocs Operation -->
  <xs:element name="getCheckedoutDocs">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="folderID" type="ID" minOccurs="0" />
        <xs:element ref="filter" minOccurs="0" />
        <xs:element name="includeAllowableActions" type="xs:boolean" minOccurs="0" />
        <xs:element ref="maxItems" minOccurs="0" />
        <xs:element ref="skipCount" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getCheckedoutDocsResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="documents" type="objectCollectionType" />
        <xs:element ref="hasMoreItems" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--[Object Services]-->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- createDocument Operation -->
  <xs:simpleType name="versioningStateEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="checkedOut" />
      <xs:enumeration value="checkedInMinor" />
      <xs:enumeration value="checkedInMajor" />
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="createDocument">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="typeId" type="ID" />
        <xs:element name="properties" type="propertiesType" />
        <!-- note that the object type may also be an element in the object and if present the values must match -->
        <xs:element name="folderId" type="ID" minOccurs="0" />
        <xs:element ref="contentStream" minOccurs="0" />
        <xs:element name="versioningState" type="versioningStateEnum" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createDocumentResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="objectId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- createFolder Operation -->
  <xs:element name="createFolder">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="typeId" type="ID" />
        <xs:element name="properties" type="propertiesType" />
        <!-- must match the type attribute value of the properties object -->
        <xs:element name="folderId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createFolderResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="objectId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- createRelationship Operation -->
  <xs:element name="createRelationship">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="typeId" type="ID" />
        <xs:element name="properties" type="propertiesType" />
        <!-- must match the type attribute value of the properties object -->
        <xs:element name="sourceObjectId" type="ID" />
        <!-- if sourceObjectId exist in the properties passed in then their values MUST match -->
        <xs:element name="targetObjectId" type="ID" />
        <!-- if targetObjectId exist in the properties passed in then their values MUST match -->
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createRelationshipResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="objectId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--createPolicy Operation-->
  <xs:element name="createPolicy">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="typeId" type="ID" />
        <xs:element name="properties" type="propertiesType" />
        <!-- note that the object type may also be an element in the object and if present the values must match -->
        <xs:element name="folderId" type="ID" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="createPolicyResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="objectId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getAllowableActions Operation -->
  <xs:element name="getAllowableActions">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="objectId" type="ID" />
        <xs:element name="asUser" type="xs:string" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getAllowableActionsResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="allowableActions" type="allowableActionsType" />
        <!-- returning no action elements indicates that no actions are allowed -->
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getProperties Operation -->
  <xs:simpleType name="versionEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="this" />
      <xs:enumeration value="latest" />
      <xs:enumeration value="latestMajor" />
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="getProperties">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="objectId" type="ID" />
        <xs:element name="returnVersion" type="versionEnum" minOccurs="0" />
        <xs:element ref="filter" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getPropertiesResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="object" type="objectType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getContentStream Operation -->
  <xs:element name="getContentStream">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="documentId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getContentStreamResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="contentStream" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- updateProperties Operation -->
  <xs:element name="updateProperties">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="objectId" type="ID" />
        <!-- if objectId is present in the properties the value must match this objectId -->
        <xs:element name="changeToken" type="xs:string" minOccurs="0" />
        <xs:element name="properties" type="propertiesType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="updatePropertiesResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="objectId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- moveObject Operation -->
  <xs:element name="moveObject">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="objectId" type="ID" />
        <xs:element name="targetFolderId" type="ID" />
        <xs:element name="sourceFolderId" type="ID" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="moveObjectResponse">
    <xs:complexType>
      <xs:sequence />
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- deleteObject Operation -->
  <xs:element name="deleteObject">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="objectId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteObjectResponse">
    <xs:complexType>
      <xs:sequence />
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- deleteTree Operation -->
  <xs:simpleType name="unfileNonfolderObjectsEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="unfile" />
      <xs:enumeration value="deleteSingleFiled" />
      <xs:enumeration value="delete" />
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="deleteTree">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="folderId" type="ID" />
        <xs:element name="unfileNonfolderObjects" type="unfileNonfolderObjectsEnum" />
        <xs:element name="continueOnFailure" type="xs:boolean" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteTreeResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="failedToDelete">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="objectId" type="ID" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- setContentStream Operation -->
  <xs:element name="setContentStream">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="documentId" type="ID" />
        <xs:element name="overwriteFlag" type="xs:boolean" minOccurs="0" />
        <xs:element ref="contentStream" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="setContentStreamResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="documentId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- deleteContentStream Operation -->
  <xs:element name="deleteContentStream">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="documentId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteContentStreamResponse">
    <xs:complexType>
      <xs:sequence />
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--[Multi-filing Services]-->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- addObjectToFolder Operation-->
  <xs:element name="addObjectToFolder">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="objectId" type="ID" />
        <xs:element name="folderId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="addObjectToFolderResponse">
    <xs:complexType>
      <xs:sequence />
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- removeObjectFromFolder Operation-->
  <xs:element name="removeObjectFromFolder">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="objectId" type="ID" />
        <xs:element name="folderId" type="ID" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="removeObjectFromFolderResponse">
    <xs:complexType>
      <xs:sequence />
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--[Discovery Services]-->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- query Operation -->
  <xs:element name="query">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="statement" type="xs:string" />
        <xs:element name="searchAllVersions" type="xs:boolean" minOccurs="0" />
        <xs:element name="includeAllowableActions" type="xs:boolean" minOccurs="0" />
        <xs:element ref="maxItems" minOccurs="0" />
        <xs:element ref="skipCount" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="queryResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="queryResults" type="objectCollectionType" />
        <xs:element ref="hasMoreItems" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--[Versioning Services]-->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- checkOut Operation -->
  <xs:element name="checkOut">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="documentId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="checkOutResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="documentId" type="ID" />
        <xs:element name="contentCopied" type="xs:boolean" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- cancelCheckOut Operation -->
  <xs:element name="cancelCheckOut">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="documentId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="cancelCheckOutResponse">
    <xs:complexType>
      <xs:sequence />
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- checkIn Operation -->
  <xs:element name="checkIn">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="documentId" type="ID" />
        <xs:element name="major" type="xs:boolean" minOccurs="0" />
        <xs:element name="properties" type="propertiesType" minOccurs="0" />
        <xs:element ref="contentStream" minOccurs="0" />
        <xs:element name="checkinComment" type="xs:string" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="checkInResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="documentId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--getPropertiesOfLatestVersion-->
  <xs:element name="getPropertiesOfLatestVersion">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="versionSeriesId" type="ID" />
        <xs:element name="majorVersion" type="xs:boolean" minOccurs="0" />
        <xs:element ref="filter" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getPropertiesOfLatestVersionResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="object" type="objectType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getAllVersions Operation -->
  <xs:element name="getAllVersions">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="versionSeriesId" type="ID" />
        <xs:element ref="filter" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getAllVersionsResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="versions" type="objectCollectionType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- deleteAllVersions Operation -->
  <xs:element name="deleteAllVersions">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="versionSeriesId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="deleteAllVersionsResponse">
    <xs:complexType>
      <xs:sequence />
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--[Relationship Services]-->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- getRelationships Operation -->
  <xs:simpleType name="relationshipDirectionEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="source" />
      <xs:enumeration value="target" />
      <xs:enumeration value="either" />
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="getRelationships">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="objectId" type="ID" />
        <xs:element name="direction" type="relationshipDirectionEnum" minOccurs="0" />
        <xs:element name="typeId" type="ID" minOccurs="0" />
        <xs:element name="includeSubRelationshipTypes" type="xs:boolean" minOccurs="0" />
        <xs:element ref="filter" minOccurs="0" />
        <xs:element name="includeAllowableActions" type="xs:boolean" minOccurs="0" />
        <xs:element ref="maxItems" minOccurs="0" />
        <xs:element ref="skipCount" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getRelationshipsResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="relationships" type="objectCollectionType" />
        <xs:element ref="hasMoreItems" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--[Policy Services]-->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--applyPolicy Operation-->
  <xs:element name="applyPolicy">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="policyId" type="ID" />
        <xs:element name="objectId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="applyPolicyResponse">
    <xs:complexType>
      <xs:sequence />
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--removePolicy Operation-->
  <xs:element name="removePolicy">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="policyId" type="ID" />
        <xs:element name="objectId" type="ID" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="removePolicyResponse">
    <xs:complexType>
      <xs:sequence />
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!--getAppliedPolicies Operation-->
  <xs:element name="getAppliedPolicies">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="repositoryId" type="ID" />
        <xs:element name="objectId" type="ID" />
        <xs:element ref="filter" minOccurs="0" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="getAppliedPoliciesResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="appliedPolicies" type="objectCollectionType" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
</xs:schema>