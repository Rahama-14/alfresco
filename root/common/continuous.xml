<project name="continuous" default="continuous" >

   <!-- ********************************** -->
   <!-- ** Initialisation/Configuration ** -->
   <!-- ********************************** -->

   <property name="dir.common" value="${basedir}" />
   <import file="${dir.common}/common-init.xml" />

   <target name="init" depends="common-init.init">
      <property name="file.name.start" value="alfresco-community"/>
      <property file="continuous.properties"/>
      <property name="file.name.build" value="build.xml"/>
   </target>

   <!-- *********************** -->
   <!-- ** Top level targets ** -->
   <!-- *********************** -->

   <target name="continuous" depends="init" description="Target called by the continuous build to create distribution bundles">
      <ant antfile="${file.name.build}" target="reset-database"/>
      <ant antfile="${file.name.build}" target="test"/>
      <antcall target="distribute"/>
   </target>

   <target name="nightly" depends="init" description="Target called by the continuous build to create the nightly distribution">
      <ant antfile="${file.name.build}" target="reset-database"/>
      <ant antfile="${file.name.build}" target="test"/>
      <antcall target="distribute-source"/>

      <!-- replace the version number in the file name with the date -->
      <move file="${dir.dist}/${file.name.dist.src}.zip" tofile="${dir.dist}/${file.name.dist.src.nightly}.zip"/>
      <move file="${dir.dist}/${file.name.dist.src}.tar.gz" tofile="${dir.dist}/${file.name.dist.src.nightly}.tar.gz"/>

      <ant antfile="${file.name.build}" target="compile-docs"/>
   </target>

   <!-- TODO: Do we still need to distribute php and web service client -->
   <target name="distribute"
           depends="init, distribute-jboss, distribute-tomcat, distribute-war, distribute-sdk, distribute-web-service-client, distribute-benchmark"
           description="Creates the distribution files for all platforms for all appservers"/>

   <target name="generate-checksums" depends="init"
           description="Generates checksum files for the distibution files">
      <delete>
         <fileset dir="${dir.dist}" includes="*.MD5"/>
      </delete>
      <checksum>
         <fileset dir="${dir.dist}"/>
      </checksum>
   </target>
   
   <!-- ******************* -->
   <!-- ** JBoss targets ** -->
   <!-- ******************* -->
   
   <target name="distribute-jboss" depends="init" description="Creates the distibution files for JBoss">
      <ant antfile="${file.name.build}" target="clean-war" />
      <ant antfile="${file.name.build}" target="incremental-jboss" />
      <antcall target="assemble-jboss-common" />
      <antcall target="distribute-jboss-windows" />
      <antcall target="distribute-jboss-linux" />
   </target>
   
   <target name="distribute-jboss-windows" depends="init">
      <zip destfile="${dir.dist}/${file.name.dist.jboss}.zip">
         <zipfileset dir="${dir.assemble.jboss}" />
         <zipfileset dir="${dir.project.installer}" includes="${files.installer.windows}" />
         <zipfileset dir="${dir.project.installer}" includes="jboss/alfresco.bat" fullpath="alfresco.bat" />
         <zipfileset dir="${dir.project.installer}" includes="jboss/README_win.txt" fullpath="README.txt" />
         <zipfileset dir="${dir.project.installer}/upgrade" includes="upgrade_win.txt" fullpath="upgrade/upgrade.txt" />
         <zipfileset dir="${dir.project.installer}/upgrade" prefix="upgrade" includes="db_upgrade_1.2.1_to_1.3.0.bat" />
         <zipfileset dir="${dir.project.installer}/upgrade/scripts" prefix="upgrade/scripts" />
         <zipfileset dir="${dir.distribution.jboss}" prefix="jboss" excludes="**/bin/*.sh" />
         <zipfileset dir="${dir.project.installer}/bin-win" prefix="bin"/>
         <zipfileset dir="${dir.project.netbios}/dll" prefix="bin"/>
      </zip>
   </target>

   <target name="distribute-jboss-linux" depends="init">
      <tar destfile="${dir.dist}/${file.name.dist.jboss}.tar" longfile="gnu">
         <tarfileset dir="${dir.assemble.jboss}" />
         <tarfileset dir="${dir.project.installer}" includes="${files.installer.linux}" />
         <tarfileset dir="${dir.project.installer}" includes="jboss/alfresco.sh" fullpath="alfresco.sh" mode="755" />
         <tarfileset dir="${dir.project.installer}" includes="jboss/README_linux.txt" fullpath="README.txt" />
         <tarfileset dir="${dir.project.installer}" includes="jboss/README_osx.txt" fullpath="README_osx.txt" />
         <tarfileset dir="${dir.project.installer}" includes="zstart_oo.sh" mode="755" />
         <tarfileset dir="${dir.project.installer}/upgrade" includes="upgrade_linux.txt" fullpath="upgrade/upgrade.txt" />
         <tarfileset dir="${dir.project.installer}/upgrade" prefix="upgrade" includes="db_upgrade_1.2.1_to_1.3.0.sh" />
         <tarfileset dir="${dir.project.installer}/upgrade/scripts" prefix="upgrade/scripts" />
         <tarfileset dir="${dir.distribution.jboss}" prefix="jboss" excludes="**/bin/*.bat" />
         <tarfileset dir="${dir.distribution.jboss}/bin" prefix="jboss/bin" includes="*.sh" mode="755" />
      </tar>
      <gzip zipfile="${dir.dist}/${file.name.dist.jboss}.tar.gz" src="${dir.dist}/${file.name.dist.jboss}.tar" />
      <delete file="${dir.dist}/${file.name.dist.jboss}.tar" />
   </target>
   
   <target name="assemble-jboss-common" depends="init">
      <mkdir dir="${dir.dist}" />
      <mkdir dir="${dir.assemble.jboss}" />
      
      <!-- make sure the MySQL connector is present and up to date -->
      <delete>
         <fileset dir="${dir.distribution.jboss}/server/default/lib" includes="mysql-connector*" excludes="${file.name.mysql.connector}"/>
      </delete>
      <copy todir="${dir.distribution.jboss}/server/default/lib" file="${dir.common.lib}/${file.name.mysql.connector}"/>
      
      <!-- copy project files common to both platforms -->
      <copy todir="${dir.assemble.jboss}/jboss/server/default/deploy">
         <fileset dir="${dir.deploy.jboss}" includes="${file.name.war.alfresco}" />
      </copy>
      <copy todir="${dir.assemble.jboss}/jboss/server/default/conf/alfresco/extension">
         <fileset dir="${dir.config.repository}/alfresco/extension" />
         <fileset dir="${dir.config.webclient}/alfresco/extension" />
      </copy>
      <copy tofile="${dir.assemble.jboss}/jboss/server/default/conf/alfresco/messages/${file.name.langpack.readme}" 
            file="${file.langpack.readme}" />
      
      <!-- copy the hotspot compiler file to the root of the bundle and the bin directory -->
      <copy file="${dir.project.installer}/.hotspot_compiler" todir="${dir.assemble.jboss}" />
      <copy file="${dir.project.installer}/.hotspot_compiler" todir="${dir.assemble.jboss}/jboss/bin" />
      
      <!-- rename model files ready for use -->
      <move file="${dir.assemble.jboss}/jboss/server/default/conf/alfresco/extension/customModel.xml.sample"
            tofile="${dir.assemble.jboss}/jboss/server/default/conf/alfresco/extension/customModel.xml" />
      <move file="${dir.assemble.jboss}/jboss/server/default/conf/alfresco/extension/exampleModel.xml.sample"
                  tofile="${dir.assemble.jboss}/jboss/server/default/conf/alfresco/extension/exampleModel.xml" />
   </target>

   <!-- ******************** -->
   <!-- ** Tomcat targets ** -->
   <!-- ******************** -->
   
   <target name="distribute-tomcat" depends="init" description="Creates the distibution files for Tomcat">
      <ant antfile="${file.name.build}" target="clean-war"/>
      <ant antfile="${file.name.build}" target="incremental-tomcat"/>
      <antcall target="assemble-tomcat-common" />
      <antcall target="distribute-tomcat-windows" />
      <antcall target="distribute-tomcat-linux" />
   </target>

   <target name="distribute-tomcat-windows" depends="init">
      <zip destfile="${dir.dist}/${file.name.dist.tomcat}.zip">
         <zipfileset dir="${dir.assemble.tomcat}" />
         <zipfileset dir="${dir.project.installer}" includes="${files.installer.windows}" />
         <zipfileset dir="${dir.project.installer}" includes="tomcat/alfresco.bat" fullpath="alfresco.bat" />
         <zipfileset dir="${dir.project.installer}" includes="tomcat/README_win.txt" fullpath="README.txt" />
         <zipfileset dir="${dir.project.installer}/upgrade" includes="upgrade_win.txt" fullpath="upgrade/upgrade.txt" />
         <zipfileset dir="${dir.project.installer}/upgrade" prefix="upgrade" includes="db_upgrade_1.2.1_to_1.3.0.bat" />
         <zipfileset dir="${dir.project.installer}/upgrade/scripts" prefix="upgrade/scripts" />
         <zipfileset dir="${dir.distribution.tomcat}" prefix="tomcat" excludes="**/bin/*.sh" />
         <zipfileset dir="${dir.project.installer}/bin-win" prefix="bin"/>
         <zipfileset dir="${dir.project.netbios}/dll" prefix="bin"/>
      </zip>
   </target>
   
   <target name="distribute-tomcat-linux" depends="init">
      <tar destfile="${dir.dist}/${file.name.dist.tomcat}.tar" longfile="gnu">
         <tarfileset dir="${dir.assemble.tomcat}" />
         <tarfileset dir="${dir.project.installer}" includes="${files.installer.linux}" />
         <tarfileset dir="${dir.project.installer}" includes="tomcat/alfresco.sh" fullpath="alfresco.sh" mode="755" />
         <tarfileset dir="${dir.project.installer}" includes="tomcat/README_linux.txt" fullpath="README.txt" />
         <tarfileset dir="${dir.project.installer}" includes="tomcat/README_osx.txt" fullpath="README_osx.txt" />
         <tarfileset dir="${dir.project.installer}" includes="zstart_oo.sh" mode="755" />
         <tarfileset dir="${dir.project.installer}/upgrade" includes="upgrade_linux.txt" fullpath="upgrade/upgrade.txt" />
         <tarfileset dir="${dir.project.installer}/upgrade" prefix="upgrade" includes="db_upgrade_1.2.1_to_1.3.0.sh" />
         <tarfileset dir="${dir.project.installer}/upgrade/scripts" prefix="upgrade/scripts" />
         <tarfileset dir="${dir.distribution.tomcat}" prefix="tomcat" excludes="**/bin/*.sh,**/bin/*.bat" />
         <tarfileset dir="${dir.distribution.tomcat}/bin" prefix="tomcat/bin" includes="*.sh" mode="755" />
      </tar>
      <gzip zipfile="${dir.dist}/${file.name.dist.tomcat}.tar.gz" src="${dir.dist}/${file.name.dist.tomcat}.tar" />
      <delete file="${dir.dist}/${file.name.dist.tomcat}.tar" />
   </target>
   
   <target name="assemble-tomcat-common" depends="init">
      <mkdir dir="${dir.dist}" />
      <mkdir dir="${dir.assemble.tomcat}" />
      
      <!-- make sure the MySQL connector is present and up to date -->
      <delete>
         <fileset dir="${dir.distribution.tomcat}/common/lib" includes="mysql-connector*" excludes="${file.name.mysql.connector}"/>
      </delete>
      <copy todir="${dir.distribution.tomcat}/common/lib" file="${dir.common.lib}/${file.name.mysql.connector}" />

      <!-- copy project files common to both platforms -->
      <copy todir="${dir.assemble.tomcat}/tomcat/webapps">
         <fileset dir="${dir.deploy.tomcat}" includes="${file.name.war.alfresco}" />
      </copy>
      <copy todir="${dir.assemble.tomcat}/tomcat/shared/classes/alfresco/extension">
         <fileset dir="${dir.config.repository}/alfresco/extension" />
         <fileset dir="${dir.config.webclient}/alfresco/extension" />
      </copy>
      <copy tofile="${dir.assemble.tomcat}/tomcat/shared/classes/alfresco/messages/${file.name.langpack.readme}"
                  file="${file.langpack.readme}" />

      <!-- copy the hotspot compiler file to the root of the bundle and the bin directory -->
      <copy file="${dir.project.installer}/.hotspot_compiler" todir="${dir.assemble.tomcat}" />
      <copy file="${dir.project.installer}/.hotspot_compiler" todir="${dir.assemble.tomcat}/tomcat/bin" />

      <!-- rename model files ready for use -->
      <move file="${dir.assemble.tomcat}/tomcat/shared/classes/alfresco/extension/customModel.xml.sample"
            tofile="${dir.assemble.tomcat}/tomcat/shared/classes/alfresco/extension/customModel.xml" />
      <move file="${dir.assemble.tomcat}/tomcat/shared/classes/alfresco/extension/exampleModel.xml.sample"
                  tofile="${dir.assemble.tomcat}/tomcat/shared/classes/alfresco/extension/exampleModel.xml" />
   </target>

   <!-- ***************** -->
   <!-- ** WAR targets ** -->
   <!-- ***************** -->

   <target name="distribute-war" depends="assemble-war-common"
           description="Creates the WAR file distribution for all platforms">
      <mkdir dir="${dir.dist}" />
      <zip destfile="${dir.dist}/${file.name.dist.war}.zip">
         <zipfileset dir="${dir.assemble.war}" />
         <zipfileset dir="${dir.project.installer}/bin-win" prefix="bin"/>
         <zipfileset dir="${dir.project.netbios}/dll" prefix="bin"/>
         <zipfileset dir="${dir.project.installer}/upgrade" includes="upgrade_win.txt" fullpath="upgrade/upgrade.txt" />
         <zipfileset dir="${dir.project.installer}/upgrade" prefix="upgrade" includes="db_upgrade_1.2.1_to_1.3.0.bat" />
         <zipfileset dir="${dir.project.installer}/upgrade/scripts" prefix="upgrade/scripts" />
      </zip>

      <tar destfile="${dir.dist}/${file.name.dist.war}.tar" longfile="gnu">
         <tarfileset dir="${dir.assemble.war}" />
         <tarfileset dir="${dir.project.installer}/upgrade" includes="upgrade_linux.txt" fullpath="upgrade/upgrade.txt" />
         <tarfileset dir="${dir.project.installer}/upgrade" prefix="upgrade" includes="db_upgrade_1.2.1_to_1.3.0.sh" />
         <tarfileset dir="${dir.project.installer}/upgrade/scripts" prefix="upgrade/scripts" />
      </tar>
      <gzip zipfile="${dir.dist}/${file.name.dist.war}.tar.gz" src="${dir.dist}/${file.name.dist.war}.tar" />
      <delete file="${dir.dist}/${file.name.dist.war}.tar" />
   </target>

   <target name="assemble-war-common" depends="init">
      <mkdir dir="${dir.assemble.war}"/>
      <copy todir="${dir.assemble.war}">
         <fileset dir="${dir.project.installer}" includes="*.sql,licenses/**,AlfrescoTest.pdf, README_war.txt" />
         <fileset dir="${dir.deploy.tomcat}" includes="${file.name.war.alfresco}"/>
      </copy>
   </target>
   
   <!-- ***************** -->
   <!-- ** Web Service Client targets ** -->
   <!-- ***************** -->
   
   <target name="distribute-web-service-client" depends="init"
           description="Creates the web service client distribution file for all platforms">
      <mkdir dir="${dir.dist}" />

      <zip destfile="${dir.dist}/${file.name.dist.webserviceclient}.zip">
         <zipfileset dir="${dir.project.webserviceclient}/build/dist" />
         <zipfileset dir="${dir.project.webserviceclient}/config/alfresco" prefix="alfresco"/>
      </zip>

      <tar destfile="${dir.dist}/${file.name.dist.webserviceclient}.tar" longfile="gnu">
         <tarfileset dir="${dir.project.webserviceclient}/build/dist" />
         <tarfileset dir="${dir.project.webserviceclient}/config/alfresco" prefix="alfresco"/>
      </tar>
      <gzip zipfile="${dir.dist}/${file.name.dist.webserviceclient}.tar.gz" src="${dir.dist}/${file.name.dist.webserviceclient}.tar" />
      <delete file="${dir.dist}/${file.name.dist.webserviceclient}.tar" />
   </target>
   
   <!-- ******************** -->
   <!-- ** Benchmark targets ** -->
   <!-- ******************** -->
   
   <target name="assemble-benchmark" depends="init">
      
      <!-- Create the required directory structure -->
      <mkdir dir="${dir.dist}" />
      <mkdir dir="${dir.assemble.benchmark}" />

      <!-- Get the jars -->
      <mkdir dir="${dir.assemble.benchmark}/lib" />
      <copy todir="${dir.assemble.benchmark}/lib">
         <fileset dir="${dir.project.benchmark-framework}/lib" includes="**/*.jar" />
         <fileset dir="${dir.project.benchmark-tests}/lib" includes="**/*.jar" />
         <fileset dir="${dir.project.benchmark-framework}/build/dist" includes="benchmark-framework.jar"/>
         <fileset dir="${dir.project.benchmark-tests}/build/dist" includes="alfresco-benchmark.jar"/>
      </copy>

      <!-- Get the configuration files -->
      <mkdir dir="${dir.assemble.benchmark}/config" />
      <copy todir="${dir.assemble.benchmark}/config">
         <fileset dir="${dir.project.benchmark-framework}/config" includes="repository-profile*.properties" />
         <fileset dir="${dir.project.benchmark-tests}/config" includes="**/*.xml" />
      </copy>
      <copy file="${dir.project.benchmark-tests}/config/classpath.config.dist" tofile="${dir.assemble.benchmark}/config/classpath.config" />
      <copy file="${dir.project.benchmark-framework}/config/benchmark-config.properties.dist" tofile="${dir.assemble.benchmark}/config/benchmark-config.properties" />

      <!-- Create the data folders -->
      <mkdir dir="${dir.assemble.benchmark}/data" />
      <mkdir dir="${dir.assemble.benchmark}/data/output" />
      <mkdir dir="${dir.assemble.benchmark}/data/content" />
      <copy file="${dir.project.benchmark-framework}/data/content/SmallTextDocument.java" todir="${dir.assemble.benchmark}/data/content" />

      <!-- Get the documentation -->
      <!-- TODO -->
      
      <!-- Get the ant file -->
      <copy file="${dir.project.benchmark-tests}/build.xml" todir="${dir.assemble.benchmark}" />
      <copy file="${dir.project.benchmark-tests}/build-common.xml.dist" tofile="${dir.assemble.benchmark}/build-common.xml" />
      <copy file="${dir.project.benchmark-tests}/build-classpath.xml.dist" tofile="${dir.assemble.benchmark}/build-classpath.xml" />

   </target>
   
   <target name="distribute-benchmark" depends="assemble-benchmark"
           description="Creates the Alfresco benchmark distribution file for all platforms">
      <mkdir dir="${dir.dist}" />

      <zip destfile="${dir.dist}/${file.name.dist.benchmark}.zip">
         <zipfileset dir="${dir.assemble.benchmark}" />
      </zip>

      <tar destfile="${dir.dist}/${file.name.dist.benchmark}.tar" longfile="gnu">
         <tarfileset dir="${dir.assemble.benchmark}" />
      </tar>
      <gzip zipfile="${dir.dist}/${file.name.dist.benchmark}.tar.gz" src="${dir.dist}/${file.name.dist.benchmark}.tar" />
      <delete file="${dir.dist}/${file.name.dist.benchmark}.tar" />
   </target>

   <!-- ******************** -->
   <!-- ** Source targets ** -->
   <!-- ******************** -->

   <target name="distribute-source" depends="init"
           description="Creates the source distribution file for all platforms">
      <mkdir dir="${dir.dist}" />

      <zip destfile="${dir.dist}/${file.name.dist.src}.zip">
         <zipfileset dir="${dir.product.root}" excludes="${excludes.dist.src}" />
      </zip>

      <tar destfile="${dir.dist}/${file.name.dist.src}.tar" longfile="gnu">
         <tarfileset dir="${dir.product.root}" excludes="${excludes.dist.src}" />
      </tar>
      <gzip zipfile="${dir.dist}/${file.name.dist.src}.tar.gz" src="${dir.dist}/${file.name.dist.src}.tar" />
      <delete file="${dir.dist}/${file.name.dist.src}.tar" />
   </target>

   <target name="assemble-sdk" depends="init">
      <mkdir dir="${dir.dist}" />
      <mkdir dir="${dir.assemble.sdk}" />

      <!-- -->
      <!-- Readme -->
      <!-- -->
      <copy file="${dir.project.sdk}/readme.txt" todir="${dir.assemble.sdk}" />

      <!-- -->
      <!-- Binaries -->
      <!-- -->
      <mkdir dir="${dir.assemble.sdk}/bin" />
      <copy todir="${dir.assemble.sdk}/bin">
         <fileset dir="${dir.project.netbios}/dll" includes="*.dll" />
         <fileset dir="${dir.project.installer}" includes=".hotspot_compiler,db_setup.sql" />
      </copy>

      <!-- -->
      <!-- Documentation -->
      <!-- -->
      <ant antfile="${file.name.build}" target="compile-docs"/>
      <mkdir dir="${dir.assemble.sdk}/doc" />

      <!-- Javadoc -->
      <mkdir dir="${dir.assemble.sdk}/doc/api" />
      <zip destfile="${dir.assemble.sdk}/doc/api/core-doc.zip">
         <zipfileset dir="${dir.project.core}/build/docs/java" />
      </zip>
      <zip destfile="${dir.assemble.sdk}/doc/api/repository-doc.zip">
         <zipfileset dir="${dir.project.repository}/build/docs/java" />
      </zip>
      <zip destfile="${dir.assemble.sdk}/doc/api/remote-api-doc.zip">
         <zipfileset dir="${dir.project.remoteapi}/build/docs/java" />
      </zip>
      <zip destfile="${dir.assemble.sdk}/doc/api/web-client-doc.zip">
         <zipfileset dir="${dir.project.webclient}/build/docs/java" />
      </zip>

      <!-- Taglib -->
      <mkdir dir="${dir.assemble.sdk}/doc/taglib" />
      <zip destfile="${dir.assemble.sdk}/doc/taglib/alfresco-taglib-doc.zip">
         <zipfileset dir="${dir.project.webclient}/build/docs/taglib" />
      </zip>

      <!-- -->
      <!-- Libraries -->
      <!-- -->
      <mkdir dir="${dir.assemble.sdk}/lib" />

      <!-- Remote API Libraries -->
      <mkdir dir="${dir.assemble.sdk}/lib/remote" />
      <copy file="${dir.project.webserviceclient}/build/dist/web-service-client.jar" todir="${dir.assemble.sdk}/lib/remote" />
      <mkdir dir="${dir.assemble.sdk}/lib/remote/wsdl" />
      <copy todir="${dir.assemble.sdk}/lib/remote/wsdl">
         <fileset dir="${dir.project.remoteapi}/source/wsdl" includes="*.wsdl,*.xsd" />
      </copy>

      <!-- Server Libraries -->
      <mkdir dir="${dir.assemble.sdk}/lib/server" />
      <copy file="${dir.project.core}/build/dist/core.jar" todir="${dir.assemble.sdk}/lib/server" />
      <copy file="${dir.project.repository}/build/dist/repository.jar" todir="${dir.assemble.sdk}/lib/server" />
      <copy file="${dir.project.remoteapi}/build/dist/remote-api.jar" todir="${dir.assemble.sdk}/lib/server" />
      <copy file="${dir.project.webclient}/build/dist/web-client.jar" todir="${dir.assemble.sdk}/lib/server" />

      <!-- Package configuration as a .jar -->
      <!-- TODO: configuration should ideally live in each of the above .jars -->
      <mkdir dir="${dir.assemble.sdk}/config" />
      <copy todir="${dir.assemble.sdk}/config" includeEmptyDirs="false">
         <fileset dir="${dir.config.repository}" excludes="**/extension/*" />
         <fileset dir="${dir.config.webclient}" excludes="**/extension/*" />
      </copy>
      <delete>
         <fileset dir="${dir.assemble.sdk}/config/alfresco/messages">
            <include name="*_en_US.properties" />
         </fileset>
      </delete>
      <copy todir="${dir.assemble.sdk}/config/alfresco/messages">
         <fileset dir="${dir.assemble.sdk}/config/alfresco/messages"/>
         <mapper type="glob" from="*.properties" to="*_en_US.properties"/>
      </copy>
      <zip destfile="${dir.assemble.sdk}/lib/server/config.jar">
         <zipfileset dir="${dir.assemble.sdk}/config" />
      </zip>
      <delete dir="${dir.assemble.sdk}/config" />

      <!-- Dependencies -->
      <mkdir dir="${dir.assemble.sdk}/lib/server/dependencies" />
      <copy todir="${dir.assemble.sdk}/lib/server/dependencies">
         <fileset dir="${dir.project.3rdparty}/lib" includes="${dir.assemble.sdk.server.jars}" />
      </copy>
      <mkdir dir="${dir.assemble.sdk}/lib/remote/dependencies" />
      <copy todir="${dir.assemble.sdk}/lib/remote/dependencies" flatten="true">
         <fileset dir="${dir.project.3rdparty}/lib" includes="${dir.assemble.sdk.remote.jars}" />
      </copy>

      <!-- -->
      <!-- Source -->
      <!-- -->
      <mkdir dir="${dir.assemble.sdk}/src" />
      <zip destfile="${dir.assemble.sdk}/src/core-src.zip">
         <zipfileset dir="${dir.project.core}/source" />
      </zip>
      <zip destfile="${dir.assemble.sdk}/src/remote-api-src.zip">
         <zipfileset dir="${dir.project.remoteapi}/source" />
      </zip>
      <zip destfile="${dir.assemble.sdk}/src/repository-src.zip">
         <zipfileset dir="${dir.project.repository}/source" />
      </zip>
      <zip destfile="${dir.assemble.sdk}/src/web-client-service-src.zip">
         <zipfileset dir="${dir.project.webserviceclient}/source/java" />
         <zipfileset dir="${dir.project.webserviceclient}/source/generated" />
      </zip>
      <zip destfile="${dir.assemble.sdk}/src/web-client-src.zip">
         <zipfileset dir="${dir.project.webclient}/source" />
      </zip>

      <!-- -->
      <!-- License -->
      <!-- -->
      <copy file="${dir.project.installer}/licenses/notice.txt" todir="${dir.assemble.sdk}" />
      <copy file="${dir.project.installer}/licenses/license.txt" todir="${dir.assemble.sdk}" />
      <mkdir dir="${dir.assemble.sdk}/licenses" />
      <copy todir="${dir.assemble.sdk}/licenses">
         <fileset dir="${dir.project.installer}/licenses/3rd-party" includes="*.*" />
      </copy>

      <!-- -->
      <!-- Samples -->
      <!-- -->

      <!-- Library Eclipse Projects -->
      <copy file="${dir.project.sdk}/sdk-projects/server/.project" todir="${dir.assemble.sdk}/lib/server" />
      <copy file="${dir.project.sdk}/sdk-projects/server/.classpath" todir="${dir.assemble.sdk}/lib/server" />
      <copy file="${dir.project.sdk}/sdk-projects/remote/.project" todir="${dir.assemble.sdk}/lib/remote" />
      <copy file="${dir.project.sdk}/sdk-projects/remote/.classpath" todir="${dir.assemble.sdk}/lib/remote" />

      <!-- Sample Projects -->
      <mkdir dir="${dir.assemble.sdk}/samples" />
      <copy todir="${dir.assemble.sdk}/samples">
         <fileset dir="${dir.project.sdk}/samples" excludes="**/build/**" />
      </copy>

   </target>

   <target name="distribute-sdk" depends="assemble-sdk"
           description="Creates the sdk distribution file for all platforms">
      <mkdir dir="${dir.dist}" />

      <zip destfile="${dir.dist}/${file.name.dist.sdk}.zip">
         <zipfileset dir="${dir.assemble.sdk}" />
      </zip>

      <tar destfile="${dir.dist}/${file.name.dist.sdk}.tar" longfile="gnu">
         <tarfileset dir="${dir.assemble.sdk}" />
      </tar>
      <gzip zipfile="${dir.dist}/${file.name.dist.sdk}.tar.gz" src="${dir.dist}/${file.name.dist.sdk}.tar" />
      <delete file="${dir.dist}/${file.name.dist.sdk}.tar" />
   </target>

</project>
