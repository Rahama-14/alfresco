<project name="clover" default="clover-pdf" >

   <!-- NOTE: Clover does not support our style of build scripts meaning -->
   <!--       the classes do not get instrumented, so we therefore have -->
   <!--       to compile and run the tests in this file -->
      
   <!-- ********************************** -->
   <!-- ** Initialisation/Configuration ** -->
   <!-- ********************************** -->
   
   <target name="init-properties">
      <path id="path.root" path="${basedir}/.."/>
      <property name="dir.product.root" refid="path.root"/>
      <property file="clover.properties" />
   </target>
   
   <target name="init" depends="init-properties">
      <!-- see if Clover is installed -->
      <available property="clover.installed" classname="com.cenqua.clover.CloverInstr" />
      <fail unless="clover.installed">
         You need to install Clover to run this script, copy the clover.jar to Ant's lib directory i.e. ${ant.home}/lib
      </fail>

      <!-- create directory structure we are going to use -->
      <mkdir dir="${dir.classes}" />
      <mkdir dir="${dir.test.resources}" />
      <mkdir dir="${dir.test.results}" />
      <mkdir dir="${dir.clover.database}" />
      <mkdir dir="${dir.clover.report}" />
      
      <!-- define classpath for compilation and unit tests -->
      <path id="classpath.clover">
         <pathelement location="${dir.classes}" />
         <pathelement location="${dir.test.resources}" />
         <pathelement location="${ant.home}/lib/clover.jar" />
         <fileset dir="${dir.3rdparty.lib}">
             <include name="**/*.jar" />
         </fileset>
      </path>
      
      <patternset id="patternset.source">
         <exclude name="**/*.java" />
      </patternset>
      
      <patternset id="patternset.tests">
         <include name="**/*Test.java" />
         <exclude name="**/Base*Test.java" />
         <exclude name="**/Abstract*Test.java" />
         <exclude name="**/*SystemTest.java" />
      </patternset>
      
      <!-- setup jibx -->
      <taskdef name="bind" classname="org.jibx.binding.ant.CompileTask" classpathref="classpath.clover" />

      <!-- initialise clover -->
      <taskdef resource="clovertasks" />
      <clover-setup initString="${file.coverage.db}" />
   </target>
   
   <!-- ************************ -->
   <!-- ** Maintainance tasks ** -->
   <!-- ************************ -->
   
   <target name="-clean-database" depends="init-properties">
      <ant dir="${dir.product.root}/common" target="reset-database" />
   </target>
   
   <target name="clean" depends="init-properties">
      <delete dir="${dir.clover.root}" includeEmptyDirs="true" quiet="yes" />
   </target>
   
   <!-- ****************** -->
   <!-- ** Clover tasks ** -->
   <!-- ****************** -->
   
   <target name="-compile" depends="init">
      <javac destdir="${dir.classes}" fork="true" deprecation="on" debug="on" 
             target="1.5" source="1.5" memorymaximumsize="512M">
         <src path="${dir.src.java.core}" />
         <src path="${dir.src.java.catalinavirtual}" />
         <src path="${dir.src.java.jndiclient}" />
         <src path="${dir.src.java.mbeans}" />
         <src path="${dir.src.java.repository}" />
         <src path="${dir.src.java.remote}" />
         <src path="${dir.src.java.remote.generated}" />
         <src path="${dir.src.java.jcr}" />
         <src path="${dir.src.java.web}" />
         <src path="${dir.src.java.enterprise}" />
         <classpath refid="classpath.clover" />
      </javac>
            
		<bind verbose="false" load="true" binding="${dir.src.java.repository}/org/alfresco/repo/dictionary/m2binding.xml">
			<classpathset dir="${dir.classes}"/>
		</bind>
   </target>
   
   <target name="-copy-files" depends="-compile">
      <!-- copy any properties files that are in the source tree -->
      <copy todir="${dir.classes}" overwrite="yes">
         <fileset dir="${dir.src.java.core}">
            <patternset refid="patternset.source" />
         </fileset>
         <fileset dir="${dir.src.java.catalinavirtual}">
            <patternset refid="patternset.source" />
         </fileset>
         <fileset dir="${dir.src.java.jndiclient}">
            <patternset refid="patternset.source" />
         </fileset>
         <fileset dir="${dir.src.java.mbeans}">
            <patternset refid="patternset.source" />
         </fileset>
         <fileset dir="${dir.src.java.repository}">
            <patternset refid="patternset.source" />
         </fileset>
         <fileset dir="${dir.src.java.jcr}">
            <patternset refid="patternset.source" />
         </fileset>
         <fileset dir="${dir.src.java.remote}">
            <patternset refid="patternset.source" />
         </fileset>
         <fileset dir="${dir.src.java.web}">
            <patternset refid="patternset.source" />
         </fileset>
         <!--
         <fileset dir="${dir.src.java.enterprise}">
            <patternset refid="patternset.source" />
         </fileset>
         -->
      </copy>
      
      <!-- copy all the config files from the appropriate projects -->
      <copy todir="${dir.classes}" overwrite="yes">
         <fileset dir="${dir.src.config.repository}" />
         <fileset dir="${dir.src.config.jcr}" />
         <fileset dir="${dir.src.config.web}" />
         <!--<fileset dir="${dir.src.config.enterprise}" />-->
      </copy>
      
      <!-- copy all the test resources files -->
      <copy todir="${dir.test.resources}">
         <fileset dir="${dir.src.test.core}" />
         <fileset dir="${dir.src.test.catalinavirtual}"/>
         <fileset dir="${dir.src.test.jndiclient}" />
         <fileset dir="${dir.src.test.mbeans}" />
         <fileset dir="${dir.src.test.repository}" />
         <fileset dir="${dir.src.test.remote}" />
         <fileset dir="${dir.src.test.web}" />
         <!--<fileset dir="${dir.src.test.enterprise}" />-->
      </copy>
   </target>
   
   <target name="-test" depends="-copy-files">
      <junit printsummary="yes" fork="yes" maxmemory="512M" haltonfailure="yes" dir="${dir.clover.root}">
         <classpath refid="classpath.clover" />
         <formatter type="xml" />
         <batchtest todir="${dir.test.results}">
            <fileset dir="${dir.src.java.core}">
               <patternset refid="patternset.tests" />
            </fileset>
            <fileset dir="${dir.src.java.catalinavirtual}">
               <patternset refid="patternset.tests" />
            </fileset>
            <fileset dir="${dir.src.java.jndiclient}">
               <patternset refid="patternset.tests" />
            </fileset>
            <fileset dir="${dir.src.java.mbeans}">
               <patternset refid="patternset.tests" />
            </fileset>
            <fileset dir="${dir.src.java.repository}">
               <patternset refid="patternset.tests" />
            </fileset>
            <fileset dir="${dir.src.java.remote}">
               <patternset refid="patternset.tests" />
            </fileset>
            <fileset dir="${dir.src.java.jcr}">
               <patternset refid="patternset.tests" />
            </fileset>
            <fileset dir="${dir.src.java.web}">
               <patternset refid="patternset.tests" />
            </fileset>
         </batchtest>
      </junit>
   </target>
   
   <target name="-test-enterprise" depends="-copy-files">
      <!-- copy enterprise files over the top of existing ones -->
      <copy todir="${dir.classes}" overwrite="yes">
         <fileset dir="${dir.src.java.enterprise}">
            <patternset refid="patternset.source" />
         </fileset>
      </copy>
      <copy todir="${dir.classes}" overwrite="yes">
         <fileset dir="${dir.src.config.enterprise}" />
      </copy>
      <copy todir="${dir.test.resources}">
        <fileset dir="${dir.src.test.enterprise}" />
      </copy>
      
      <!-- run the enterprise tests -->
      <junit printsummary="yes" fork="yes" maxmemory="512M" haltonfailure="yes" dir="${dir.clover.root}">
		   <classpath refid="classpath.clover" />
		   <formatter type="xml" />
		   <batchtest todir="${dir.test.results}">
		      <fileset dir="${dir.src.java.enterprise}">
		         <patternset refid="patternset.tests" />
		      </fileset>
		   </batchtest>
		</junit>
   </target>

   <target name="clover-html" depends="-clean-database, -test, -test-enterprise" 
           description="Produces a unit test code HTML coverage report">
      <clover-report>
         <current outfile="${dir.clover.report}">
            <format type="html" />
         </current>
      </clover-report>
   </target>
   
   <target name="clover-pdf" depends="-clean-database, -test, -test-enterprise, generate-pdf" 
           description="Produces a unit test code PDF coverage report" />
   
   <target name="generate-pdf" depends="init" 
           description="Generates a PDF report from an existing coverage database">
      
      <available property="coverage.db.present" file="${file.coverage.db}" />
      <fail unless="coverage.db.present">
         The Clover coverage database must be present in order to generate a PDF report.
      </fail>
      
      <clover-report>
      	<current outfile="${file.clover.report.pdf}" summary="true">
      		<format type="pdf" />
      	</current>
      </clover-report>
   </target>
   
</project>
