<?xml version="1.0" encoding="UTF-8"?>
<!-- ***************************************************************** -->
<!--                                                                   -->
<!-- Licensed Materials - Property of IBM                              -->
<!--                                                                   -->
<!-- 5724-S31                                                          -->
<!--                                                                   -->
<!-- Copyright IBM Corp. 2007, 2009  All Rights Reserved.              -->
<!--                                                                   -->
<!-- US Government Users Restricted Rights - Use, duplication or       -->
<!-- disclosure restricted by GSA ADP Schedule Contract with           -->
<!-- IBM Corp.                                                         -->
<!--                                                                   -->
<!-- ***************************************************************** -->

<!--
 * 5724S31
 * disclosure restricted by GSA ADP Schedule Contract with IBM 
 * Corp.
 *===============================================================
 -->
<wsdl:definitions xmlns:clbexc="http://exception.webservices.clb.content.ibm.com" xmlns:clbmodel="http://model.xsd.clb.content.ibm.com" xmlns:clbview="http://view.model.xsd.clb.content.ibm.com" xmlns:clbsvc="http://webservices.clb.content.ibm.com" xmlns:cmmodel="http://model.xsd.content.ibm.com" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ContentService" targetNamespace="http://webservices.clb.content.ibm.com">

	<wsdl:documentation>Content Model Web Services Definition - 8.0.5</wsdl:documentation>

	<wsdl:types>
		<xsd:schema elementFormDefault="qualified" targetNamespace="http://model.xsd.content.ibm.com" xmlns:cmmodel="http://model.xsd.content.ibm.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

			<xsd:annotation>
				<xsd:documentation>Schema to define the base content model</xsd:documentation>
			</xsd:annotation>

			<xsd:annotation>
				<xsd:documentation>Base content model attribute group definitions</xsd:documentation>
			</xsd:annotation>

			<xsd:annotation>
				<xsd:documentation>
					All of the attributes on the BaseAttrs are read-only. However, for update operations,
					the id and/or path attributes are set by the consumer to tell the server which node is
					being updated. The permissions attribute is a comma delimited value. The delimited values 
					will map to the Permission enumeration
				</xsd:documentation>
			</xsd:annotation>
			<xsd:attributeGroup name="BaseAttrs">
				<xsd:attribute name="id" type="xsd:string" use="required"/>
				<xsd:attribute name="path" type="xsd:string" use="required"/>
				<xsd:attribute name="locked" type="xsd:boolean" use="required"/>
				<xsd:attribute name="permissions" type="xsd:string" use="optional"/>
				<xsd:attribute name="displayLocation" type="xsd:string" use="optional"/>
				<xsd:attribute name="systemCreated" type="xsd:dateTime" use="optional"/>
				<xsd:attribute name="systemLastModified" type="xsd:dateTime" use="optional"/>
			</xsd:attributeGroup>

			<xsd:annotation>
				<xsd:documentation>
					The hidden attribute is read-only for all derived types. The created and lastModified are
					read-only and system managed for all derived types except ClbDraft and ClbFolder. When creating a 
					draft or folder, the consumer can specify these values to reflect the time on the consumer machine 
					and not the	server. The language attribute is read-only for ClbFolder.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:attributeGroup name="ContentAttrs">
				<xsd:attribute name="created" type="xsd:dateTime" use="optional"/>
				<xsd:attribute name="lastModified" type="xsd:dateTime" use="optional"/>
				<xsd:attribute name="hidden" type="xsd:boolean" use="required"/>
				<xsd:attribute name="language" type="xsd:string" use="optional"/>
			</xsd:attributeGroup>

			<xsd:attributeGroup name="DescriptionData">
				<xsd:attribute name="description" type="xsd:string" use="optional"/>
				<xsd:attribute name="title" type="xsd:string" use="optional"/>
			</xsd:attributeGroup>

			<xsd:annotation>
				<xsd:documentation>
					The dataLength and dataLastModified attributes are read-only for all derived types. 
					The dataMimeType is read-only for all derived types except ClbDraft. The dataMimeType
					can only be set when the draft is created. Once the dataMimeType is set, it can not be changed.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:attributeGroup name="ManagedData">
				<xsd:attribute name="dataLength" type="xsd:long" use="optional"/>
				<xsd:attribute name="dataLastModified" type="xsd:dateTime" use="optional"/>
				<xsd:attribute name="dataMimeType" type="xsd:string" use="optional"/>
			</xsd:attributeGroup>

			<xsd:annotation>
				<xsd:documentation>
					The label attribute is read-only for all derived types.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:attributeGroup name="NamedData">
				<xsd:attribute name="label" type="xsd:string" use="optional"/>
			</xsd:attributeGroup>

			<xsd:annotation>
				<xsd:documentation>
					The effectiveDate and expirationDate are currently only applicable for ClbDocument
					and ClbDraft. These are reserved for future use on all other sub-types.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:attributeGroup name="PublishData">
				<xsd:attribute name="effectiveDate" type="xsd:dateTime" use="optional"/>
				<xsd:attribute name="expirationDate" type="xsd:dateTime" use="optional"/>
			</xsd:attributeGroup>

			<xsd:simpleType name="Permission">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="None"/>
					<xsd:enumeration value="AddChild"/>
					<xsd:enumeration value="Delete"/>
					<xsd:enumeration value="Edit"/>
					<xsd:enumeration value="View"/>
					<xsd:enumeration value="GrantAccess"/>
					<xsd:enumeration value="Delegate"/>
					<xsd:enumeration value="LockOverride"/>
					<xsd:enumeration value="AddFolder"/>
					<xsd:enumeration value="EditFolder"/>
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:simpleType name="VersionType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="Name"/>
					<xsd:enumeration value="Label"/>
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:annotation>
				<xsd:documentation>Base content model complex type definitions</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="Base">
				<xsd:attributeGroup ref="cmmodel:BaseAttrs"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The creator, lastModifier, lockOwner, owners and categories attributes are read-only for all 
					derived types. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="Content">
				<xsd:complexContent>
					<xsd:extension base="cmmodel:Base">
						<xsd:sequence>
							<xsd:element name="creator" nillable="true" type="clbsvc:UserInfo"/>
							<xsd:element name="lastModifier" nillable="true" type="clbsvc:UserInfo"/>
							<xsd:element name="lockOwner" nillable="true" type="clbsvc:UserInfo"/>
							<xsd:element name="authors" minOccurs="0" maxOccurs="unbounded" type="clbsvc:UserInfo"/>
							<xsd:element name="owners" minOccurs="0" maxOccurs="unbounded" type="clbsvc:UserInfo"/>
							<xsd:element name="categories" minOccurs="0" maxOccurs="unbounded" type="xsd:string"/>
						</xsd:sequence>
						<xsd:attributeGroup ref="cmmodel:ContentAttrs"/>
						<xsd:attributeGroup ref="cmmodel:NamedData"/>
						<xsd:attributeGroup ref="cmmodel:DescriptionData"/>
						<xsd:attributeGroup ref="cmmodel:PublishData"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The Version is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="Version">
				<xsd:sequence>
					<xsd:element name="creator" nillable="true" type="clbsvc:UserInfo"/>
					<xsd:element name="labels" minOccurs="0" maxOccurs="unbounded" type="xsd:string"/>
				</xsd:sequence>
				<xsd:attribute name="comments" type="xsd:string" use="optional"/>
				<xsd:attribute name="name" type="xsd:string" use="optional"/>
				<xsd:attribute name="created" type="xsd:dateTime" use="optional"/>
				<xsd:attribute name="lastModified" type="xsd:dateTime" use="optional"/>
				<xsd:attribute name="activeVersion" type="xsd:boolean" use="required"/>
			</xsd:complexType>
		</xsd:schema>

		<xsd:schema elementFormDefault="qualified" targetNamespace="http://model.xsd.clb.content.ibm.com" xmlns:clbmodel="http://model.xsd.clb.content.ibm.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

			<xsd:annotation>
				<xsd:documentation>Schema to define the Clb content model</xsd:documentation>
			</xsd:annotation>

			<xsd:import namespace="http://model.xsd.content.ibm.com"/>

			<xsd:annotation>
				<xsd:documentation>Clb content model attribute group definitions</xsd:documentation>
			</xsd:annotation>

			<xsd:annotation>
				<xsd:documentation>
					The currentState attribute is read-only for all derived types. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:attributeGroup name="ClbControlData">
				<xsd:attribute name="currentState" type="xsd:string" use="optional"/>
			</xsd:attributeGroup>

			<xsd:annotation>
				<xsd:documentation>Clb content model simple type definitions</xsd:documentation>
			</xsd:annotation>

			<xsd:simpleType name="ClbVersioning">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="NONE"/>
					<xsd:enumeration value="EXPLICIT"/>
					<xsd:enumeration value="IMPLICIT"/>
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:simpleType name="ClbCategoryType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="DocumentManager"/>
					<xsd:enumeration value="PersonalDocumentManager"/>					
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:simpleType name="ClbDraftApprovalState">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="Pending"/>
					<xsd:enumeration value="Approved"/>
					<xsd:enumeration value="Rejected"/>
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:simpleType name="ClbDraftApprovalType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="Parallel"/>
					<xsd:enumeration value="Serial"/>
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:simpleType name="ClbContentURLMode">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="Download"/>
					<xsd:enumeration value="View"/>
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:simpleType name="ClbDataType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="String"/>
					<xsd:enumeration value="Double"/>
					<xsd:enumeration value="Long"/>
					<xsd:enumeration value="DateTime"/>
					<xsd:enumeration value="Boolean"/>
					<xsd:enumeration value="Reference"/>
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:simpleType name="ClbSortOrder">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="Ascending"/>
					<xsd:enumeration value="Descending"/>
					<xsd:enumeration value="None"/>
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:annotation>
				<xsd:documentation>Clb content model complex type definitions</xsd:documentation>
			</xsd:annotation>

			<xsd:annotation>
				<xsd:documentation>
					The key attribute is read-only. However, for update operations, the consumer will set 
					this value to indicate to the server which dynamic value is to be updated.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbDynamicValue">
				<xsd:attribute name="key" type="xsd:string" use="required"/>
			</xsd:complexType>

			<xsd:complexType name="ClbDynamicLongValue">
				<xsd:complexContent>
					<xsd:extension base="clbmodel:ClbDynamicValue">
						<xsd:sequence>
							<xsd:element name="values" type="xsd:long" minOccurs="0" maxOccurs="unbounded"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:complexType name="ClbDynamicDateValue">
				<xsd:complexContent>
					<xsd:extension base="clbmodel:ClbDynamicValue">
						<xsd:sequence>
							<xsd:element name="values" type="xsd:dateTime" minOccurs="0" maxOccurs="unbounded"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:complexType name="ClbDynamicDoubleValue">
				<xsd:complexContent>
					<xsd:extension base="clbmodel:ClbDynamicValue">
						<xsd:sequence>
							<xsd:element name="values" type="xsd:double" minOccurs="0" maxOccurs="unbounded"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:complexType name="ClbDynamicBooleanValue">
				<xsd:complexContent>
					<xsd:extension base="clbmodel:ClbDynamicValue">
						<xsd:sequence>
							<xsd:element name="values" type="xsd:boolean" minOccurs="0" maxOccurs="unbounded"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:complexType name="ClbDynamicStringValue">
				<xsd:complexContent>
					<xsd:extension base="clbmodel:ClbDynamicValue">
						<xsd:sequence>
							<xsd:element name="values" type="xsd:string" minOccurs="0" maxOccurs="unbounded" nillable="false"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The id attribute inherited from BaseAttrs is read-only. However, for ClbDraft create/update 
					operations, the consumer can create an empty ClbDocumentType and set the id to indicate to the
					server that a specific ClbDocumentType is to be applied. All other attributes on ClbDocumentType
					are considered read-only.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbDocumentType">
				<xsd:sequence>
					<xsd:element name="propertySheetTypes" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbPropertySheetType"/>
					<xsd:element name="template" nillable="true" type="clbmodel:ClbDocument"/>
				</xsd:sequence>
				<xsd:attributeGroup ref="cmmodel:BaseAttrs"/>
				<xsd:attributeGroup ref="cmmodel:ContentAttrs"/>
				<xsd:attributeGroup ref="cmmodel:DescriptionData"/>
				<xsd:attribute name="versioning" type="clbmodel:ClbVersioning" use="optional"/>
				<xsd:attribute name="approvalEnabled" use="required" type="xsd:boolean"/>
				<xsd:attribute name="approvalType" use="optional" type="clbmodel:ClbDraftApprovalType"/>
				<xsd:attribute name="templateExtension" use="optional" type="xsd:string"/>
				<xsd:attribute name="defaultExtension" use="optional" type="xsd:string"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The propertySheetTypeId and extracted attributes are read-only. The typical usage pattern for the 
					dynamicXXX arrays is for the consumer to retrieve the populated values from the server, and then update
					any "value" attributes on the dynamicXXX elements that need to be updated on the server.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbPropertySheet">
				<xsd:sequence>
					<xsd:element name="dynamicLongs" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbDynamicLongValue"/>
					<xsd:element name="dynamicDates" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbDynamicDateValue"/>
					<xsd:element name="dynamicDoubles" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbDynamicDoubleValue"/>
					<xsd:element name="dynamicBooleans" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbDynamicBooleanValue"/>
					<xsd:element name="dynamicStrings" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbDynamicStringValue"/>
				</xsd:sequence>
				<xsd:attributeGroup ref="cmmodel:NamedData"/>
				<xsd:attributeGroup ref="cmmodel:DescriptionData"/>
				<xsd:attribute name="propertySheetTypeId" type="xsd:string" use="required"/>
				<xsd:attribute name="extracted" type="xsd:boolean" use="required"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The id, extracted and templateXml attributes are read-only.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbPropertySheetType">
				<xsd:sequence>
					<xsd:element name="templateXml" nillable="true" type="xsd:string"/>
				</xsd:sequence>
				<xsd:attribute name="id" type="xsd:string" use="required"/>
				<xsd:attribute name="title" type="xsd:string" use="required"/>
				<xsd:attribute name="extracted" type="xsd:boolean" use="required"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The propertySheets and propertySheetTypes attributes are read-only.  					
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbData">
				<xsd:complexContent>
					<xsd:extension base="cmmodel:Content">
						<xsd:sequence>
							<xsd:element name="propertySheets" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbPropertySheet"/>
							<xsd:element name="propertySheetTypes" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbPropertySheetType"/>
						</xsd:sequence>
						<xsd:attributeGroup ref="clbmodel:ClbControlData"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The downloadURL and documentType attributes are read-only. A document can only have a 
					single draft, so the drafts array has a maximum size of 1. The ClbDraft data inside of 
					the drafts array can be updated, but the	array itself should be considered immutable. 					
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbDocument">
				<xsd:complexContent>
					<xsd:extension base="clbmodel:ClbData">
						<xsd:sequence>
							<xsd:element name="documentType" nillable="true" type="clbmodel:ClbDocumentType"/>
							<xsd:element name="drafts" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbDraft"/>
						</xsd:sequence>
						<xsd:attributeGroup ref="cmmodel:ManagedData"/>
						<xsd:attribute name="url" use="optional" type="xsd:string"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The approvers, approvalStates, expandGroups, approvalEnabled, approvalType and submitted 
					attributes are read-only. The documentType is also read-only, however, create and update 
					operations, the consumer can create an empty ClbDocumentType and set the id to indicate 
					to the	server that a specific ClbDocumentType is to be applied.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbDraft">
				<xsd:complexContent>
					<xsd:extension base="clbmodel:ClbData">
						<xsd:sequence>
							<xsd:element name="documentType" nillable="true" type="clbmodel:ClbDocumentType"/>
							<xsd:element name="approvers" minOccurs="0" maxOccurs="unbounded" type="xsd:string"/>
							<xsd:element name="approvalStates" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbDraftApprovalState"/>
						</xsd:sequence>
						<xsd:attributeGroup ref="cmmodel:ManagedData"/>
						<xsd:attribute name="expandGroups" use="required" type="xsd:boolean"/>
						<xsd:attribute name="approvalEnabled" use="required" type="xsd:boolean"/>
						<xsd:attribute name="approvalType" use="optional" type="clbmodel:ClbDraftApprovalType"/>
						<xsd:attribute name="submitted" use="required" type="xsd:boolean"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The folders and documents arrays are read-only. 					
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbFolder">
				<xsd:complexContent>
					<xsd:extension base="clbmodel:ClbData">
						<xsd:sequence>
							<xsd:element name="folders" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbFolder"/>
							<xsd:element name="documents" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbDocument"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbLibrary is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbLibrary">
				<xsd:complexContent>			
					<xsd:extension base="clbmodel:ClbFolder">
						<xsd:sequence>
							<xsd:element name="libraries" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbLibrary"/>
						</xsd:sequence>
						<xsd:attribute name="category"
							type="clbmodel:ClbCategoryType" use="optional">
						</xsd:attribute>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbTreeItem is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbTreeItem">
				<xsd:attribute name="id" type="xsd:string" use="required"/>
				<xsd:attribute name="path" type="xsd:string" use="required"/>
				<xsd:attribute name="label" type="xsd:string" use="required"/>
				<xsd:attribute name="lastModified" type="xsd:dateTime" use="optional"/>
				<xsd:attribute name="dataLength" type="xsd:long" use="optional"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbTreeFolder is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbTreeFolder">
				<xsd:complexContent>
					<xsd:extension base="clbmodel:ClbTreeItem">
						<xsd:sequence>
							<xsd:element name="items" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbTreeItem"/>
							<xsd:element name="folders" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbTreeFolder"/>
						</xsd:sequence>
						<xsd:attribute name="childCount" type="xsd:int" use="required"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbView is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbView">
				<xsd:complexContent>
					<xsd:extension base="cmmodel:Content">
						<xsd:sequence>
							<xsd:element name="types" minOccurs="0" maxOccurs="unbounded" type="xsd:string"/>
							<xsd:element name="formatXml" nillable="true" type="xsd:string"/>
						</xsd:sequence>
						<xsd:attribute name="folderId" type="xsd:string" use="required"/>
						<xsd:attribute name="shared" type="xsd:boolean" use="required"/>
						<xsd:attribute name="formatStyle" type="xsd:string" use="required"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbLabelType is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbLabelType">
				<xsd:attribute name="label" type="xsd:string" use="optional"/>
				<xsd:attribute name="lang" type="xsd:string" use="optional"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbStyleType is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbStyleType">
				<xsd:attribute name="name" type="xsd:string" use="optional"/>
				<xsd:attribute name="value" type="xsd:string" use="optional"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbOptionType is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbOptionType">
				<xsd:sequence>
					<xsd:element name="labels" type="clbmodel:ClbLabelType" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
				<xsd:attribute name="value" type="xsd:string" use="optional"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbPropertyType is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbPropertyType">
				<xsd:sequence>
					<xsd:element name="styles" type="clbmodel:ClbStyleType" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element name="labels" type="clbmodel:ClbLabelType" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element name="options" type="clbmodel:ClbOptionType" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element name="defaultValues" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
				<xsd:attribute name="dataType" type="clbmodel:ClbDataType" use="optional"/>
				<xsd:attribute name="indexable" type="xsd:boolean" use="optional"/>
				<xsd:attribute name="multiple" type="xsd:boolean" use="optional"/>
				<xsd:attribute name="readOnly" type="xsd:boolean" use="optional"/>
				<xsd:attribute name="required" type="xsd:boolean" use="optional"/>
				<xsd:attribute name="searchable" type="xsd:boolean" use="optional"/>
				<xsd:attribute name="maxLength" type="xsd:long" use="optional"/>
				<xsd:attribute name="nodeSet" type="xsd:string" use="optional"/>
				<xsd:attribute name="propertyId" type="xsd:string" use="required"/>
				<xsd:attribute name="propertyName" type="xsd:string" use="optional"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbViewFormatColumn is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbViewFormatColumn">
				<xsd:sequence>
					<xsd:element name="propertyType" type="clbmodel:ClbPropertyType" nillable="false"/>
				</xsd:sequence>
				<xsd:attribute name="columnId" type="xsd:string" use="required"/>
				<xsd:attribute name="title" type="xsd:string" use="required"/>
				<xsd:attribute name="propertyId" type="xsd:string" use="required"/>
				<xsd:attribute name="propertySheetId" type="xsd:string" use="required"/>
				<xsd:attribute name="sortOrder" type="clbmodel:ClbSortOrder" use="required"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbColumn is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbColumn">
				<xsd:sequence>
					<xsd:element name="values" type="xsd:anyType" minOccurs="0" maxOccurs="unbounded" nillable="false"/>
				</xsd:sequence>
				<xsd:attribute name="referenceId" type="xsd:string" use="required"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbViewResult is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbViewResult">
				<xsd:sequence>
					<xsd:element name="columns" type="clbmodel:ClbColumn" minOccurs="0" maxOccurs="unbounded" nillable="false"/>
					<xsd:element name="document" type="clbmodel:ClbDocument" nillable="false"/>
				</xsd:sequence>
			</xsd:complexType>

		</xsd:schema>

		<xsd:schema elementFormDefault="qualified" targetNamespace="http://exception.webservices.clb.content.ibm.com" xmlns:clbexc="http://exception.webservices.clb.content.ibm.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

			<xsd:annotation>
				<xsd:documentation>Schema to define the service exceptions</xsd:documentation>
			</xsd:annotation>

			<xsd:annotation>
				<xsd:documentation>Service exceptions complex type definitions</xsd:documentation>
			</xsd:annotation>

			<xsd:complexType name="ServiceException">
				<xsd:attribute name="message" type="xsd:string" use="optional"/>
			</xsd:complexType>

			<xsd:complexType name="LoginException">
				<xsd:complexContent>
					<xsd:extension base="clbexc:ServiceException">
						<xsd:sequence/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:element name="ServiceException" type="clbexc:ServiceException">
			</xsd:element>

			<xsd:element name="LoginException" type="clbexc:LoginException">
			</xsd:element>

		</xsd:schema>

		<xsd:schema elementFormDefault="qualified" targetNamespace="http://webservices.clb.content.ibm.com" xmlns:clbsvc="http://webservices.clb.content.ibm.com" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

			<xsd:annotation>
				<xsd:documentation>Schema to define the service methods</xsd:documentation>
			</xsd:annotation>

			<xsd:import namespace="http://model.xsd.content.ibm.com"/>
			<xsd:import namespace="http://model.xsd.clb.content.ibm.com"/>

			<xsd:annotation>
				<xsd:documentation>Service methods simple type definitions</xsd:documentation>
			</xsd:annotation>

			<xsd:complexType name="PaginationInfo">
				<xsd:sequence>
					<xsd:element name="encodedPageState" type="xsd:string"></xsd:element>
				</xsd:sequence>
				<xsd:attribute name="isLastPage" type="xsd:boolean"  use="required"/>
				<xsd:attribute name="size" type="xsd:integer"  use="required"/>
			</xsd:complexType>
			
			<xsd:complexType name="PageParams">
				<xsd:sequence>
					<xsd:element name="encodedPageState" type="xsd:string"></xsd:element>
				</xsd:sequence>
				<xsd:attribute name="count" type="xsd:long" />
				<xsd:attribute name="startIndex" type="xsd:long"/>
			</xsd:complexType>

			<xsd:simpleType name="ClbDownloadOption">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="None"/>
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:annotation>
				<xsd:documentation>
					Service options enable clients of the service to specify optional behavior for a call.

					Multiple options may be passed in a call to customize the response.
					
					None - specifying an option of none implies that no additonal custom behavior will take place on the call.
					IncludeDrafts - Will result in the ClbDocument that is returned from a call to include its ClbDraft objects if they exist.
					IncludeApproveDrafts - Will result in the ClbDocument that is returned from a call to include its ClbDraft objects if the caller is an approver of the draft.
					IncludeSubmittedDrafts - Will result in the ClbDocument that is returned from a call to include its ClbDraft objects if the caller has submitted the draft.
					IncludeReferences - Will result in the returned objects to include types that are concidered references. Currently, this only applies to ClbDocumentType and ClbPropertySheetType.
					IncludePermissions - Will result in retrieving the permissions for a piece of content for the given user.
					IncludePropertySheets - Will result in any object that supports and has custom metadata to include the associated property sheets for that object.
					ResolveLockOwner - Will result in populating the lock owner, if any, on the piece of content.
					RetrieveDownloadURL - Will result in populating the url for a piece of content with the location to download its binary contents.
					RetrieveViewURL - Will result in populating the url for a piece of content with the address to view this object in the browser.
					RetrieveByIdOrAbsPath - If provided, the client must pass both the id and absolute path to the server operation.  The server is expected to do the most efficient lookup for a piece of content for their environment, but the server is then expected to provide the resultant path for each resource retrieved as relative to the absolute path provided by the caller.  For repositories that have multi-filed content, it is recommeneded that clients leverage this support when they require the resultant path to be in a specific context.
					RetrievePathRelativeToLibraryId - This option overrides the default server beahvior for constructing a path when an object is requested by id that is filed in multiple libraries.  A caller may pass a libraryId as a SOAP header to the server, and teh server will construct the path to the returned resource as contained by the referenced library.
					ResolveDefaultDocumentType- If this option is provided for a getDocument operation request for a resource that does not yet exist, the server will reply with an ItemNotFound error, but the ClbDocumentResponse will include a blank ClbDocument object with the document type populated and all other fields left blank.  Clients can leverage this option to determine the default ClbDocumentType for the resource if it were subsequently created in order to prompt for attributes prior to creation of the resource.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType name="ClbServiceOption">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="None"/>
					<xsd:enumeration value="IncludeDrafts"/>
					<xsd:enumeration value="IncludeApproveDrafts"/>
					<xsd:enumeration value="IncludeSubmittedDrafts"/>
					<xsd:enumeration value="IncludeReferences"/>
					<xsd:enumeration value="IncludePermissions"/>
					<xsd:enumeration value="IncludePropertySheets"/>
					<xsd:enumeration value="ResolveLockOwner"/>
					<xsd:enumeration value="RetrieveDownloadURL"/>
					<xsd:enumeration value="RetrieveViewURL"/>
					<xsd:enumeration value="IncludeFolderChildren"/>
					<xsd:enumeration value="RetrieveByIdOrAbsPath"/>
					<xsd:enumeration value="RetrievePathRelativeToLibraryId"/>
					<xsd:enumeration value="ResolveDefaultDocumentType"/>
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:simpleType name="ClbDocTypeOption">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="LibraryScope"/>
					<xsd:enumeration value="All"/>
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:annotation>
				<xsd:documentation>
					Each ClbResponse, or sub-type, that is returned from an operation can potentially
					contain an error. These errors are considered "application" level errors that the
					consumers can potentially react to. "System" level errors are manifested as SOAP
					faults. The supported error types and their meanings are below.
					
					AccessDenied - The user performing the operation does not have the required permissions to complete it.
					ItemNotFound - The requested item can not be found in the repository.
					ItemExists - The creation of an item takes place but the item already exists.
					DocumentNotLocked - The operation that is being executed requires that the document already be locked, but it is not locked.
					DocumentAlreadyLocked - The operation that is being executed needs to lock the document, but it is already locked by another user.
					DraftExists - The operation that is being executed can not be performed because a draft exists.
					DraftSubmitted - The operation that is being executed can not be completed because the draft is in the submitted state.
					UnsupportedVersion - The consumer has sent up a serviceVersion that is not supported by the server.
					UnsupportedOperation - The server that the consumer is connected to does not support the operation that was invoked.
					OnlyDocumentsCanBeLocked - The consumer is attempting to lock a node that is not a document type.
					ExtensionChangeNotAllowed - The consumer is attempting to change the document extension during a renameDocument call.
					VersionLabelNotFound - The consumer has supplied a version label that does not exist on the document.
					ConstraintViolation - The consumer has sent up data that violates a repository constraint. Example: property value too large, or invalid characters.
					FixedFolder - The consumer is attempting to create, update or delete a folder under a business component, and the library does not support these actions.
					InvalidTypeForOperation - The consumer has sent up an id and/or path that resolves to a type that is not expected by that operation.
					InvalidPath - The consumer has sent up a path value that contains invalid characters.
					InvalidPathSegmentLength - The consumer has sent up a path value that is too long.
					GeneralInformation - A general purpose error, which contains an appropriate message, that is returned when no other error type is applicable.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType name="ClbErrorType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="AccessDenied"/>
					<xsd:enumeration value="ItemNotFound"/>
					<xsd:enumeration value="ItemExists"/>
					<xsd:enumeration value="DocumentNotLocked"/>
					<xsd:enumeration value="DocumentAlreadyLocked"/>
					<xsd:enumeration value="DraftExists"/>
					<xsd:enumeration value="DraftSubmitted"/>
					<xsd:enumeration value="UnsupportedVersion"/>
					<xsd:enumeration value="UnsupportedOperation"/>
					<xsd:enumeration value="OnlyDocumentsCanBeLocked"/>
					<xsd:enumeration value="ExtensionChangeNotAllowed"/>										
					<xsd:enumeration value="VersionLabelNotFound"/>										
					<xsd:enumeration value="ConstraintViolation"/>										
					<xsd:enumeration value="FixedFolder"/>
					<xsd:enumeration value="InvalidTypeForOperation"/>															
					<xsd:enumeration value="InvalidPath"/>
					<xsd:enumeration value="InvalidPathSegmentLength"/>															
					<xsd:enumeration value="GeneralInformation"/>															
				</xsd:restriction>
			</xsd:simpleType>

			<xsd:annotation>
				<xsd:documentation>Service methods complex type definitions</xsd:documentation>
			</xsd:annotation>

			<xsd:annotation>
				<xsd:documentation>
					The Property is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="Property">
				<xsd:attribute name="key" type="xsd:string" use="required"/>
				<xsd:attribute name="value" type="xsd:string" use="required"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The UserInfo is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="UserInfo">
				<xsd:attribute name="dn" type="xsd:string" use="optional"/>
				<xsd:attribute name="commonName" type="xsd:string" use="optional"/>
				<xsd:attribute name="emailAddress" type="xsd:string" use="optional"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ServerInfo is currently only used on retrieval operations, so all attributes 
					are considered read-only. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ServerInfo">
				<xsd:sequence>
					<xsd:element name="serverProperties" minOccurs="0" maxOccurs="unbounded" type="clbsvc:Property"/>
					<xsd:element name="providerCapabilities" minOccurs="0" maxOccurs="unbounded" type="clbsvc:Property"/>
				</xsd:sequence>
				<xsd:attribute name="version" type="xsd:string" use="optional"/>
				<xsd:attribute name="locale" type="xsd:string" use="optional"/>
				<xsd:attribute name="utcOffset" type="xsd:int" use="optional"/>
				<xsd:attribute name="securityEnabled" type="xsd:boolean" use="required"/>
			</xsd:complexType>

			<xsd:complexType name="ClbError">
				<xsd:attribute name="message" type="xsd:string" use="optional"/>
				<xsd:attribute name="type" type="clbsvc:ClbErrorType" use="required"/>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>Service methods response definitions</xsd:documentation>
			</xsd:annotation>

			<xsd:annotation>
				<xsd:documentation>
					The ClbResponse is the base type for all response types. It contains a single error field.
					If one of the errors, which are defined in the ClbErrorType, occurred while processing
					the request, then	the error field will contain that error. If no error occurred, the
					error will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbResponse">
				<xsd:sequence>
					<xsd:element name="error" nillable="true" type="clbsvc:ClbError"/>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The UserResponse contains a single userInfo field. This field will contain the
					requested information about the user. If an error occurred while processing the
					request, the userInfo field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="UserResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="user" nillable="true" type="clbsvc:UserInfo"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The UsersResponse contains an single userInfos field. This field will contain the
					array of UserInfo objects that corresponds to the list of userIds that was requested.
					If an error occurred while processing the request, the userInfos field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="UsersResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="users" minOccurs="0" maxOccurs="unbounded" type="clbsvc:UserInfo"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ServerInfoResponse contains a single serverInfo field. This field will contain the
					requested information about the server. If an error occurred while processing the
					request, the serverInfo field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ServerInfoResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="serverInfo" nillable="true" type="clbsvc:ServerInfo"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbDocumentResponse contains a document field that contains the requested ClbDocument.
					If an error occurred while processing the request, the document field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbDocumentResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="document" nillable="true" type="clbmodel:ClbDocument"/>							
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbDocumentsResponse contains a documents field that contains the requested list of
					ClbDocuments. If an error occurred while processing the request, the document field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbDocumentsResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="documents" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbDocument"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbCancelDocumentResponse contains a documentDeleted boolean that indicates if the
					document was deleted. If a new document has not yet been published, and it is cancelled,
					then the document will be deleted. If an error occurred while processing the request,
					the value of the documentDeleted field should be ignored.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbCancelDocumentResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:attribute name="documentDeleted" type="xsd:boolean" use="required"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbVersionResponse contains a singe versionName attribute, which will contain the version
					name that was generated. If an error occurred while processing the request, the versionName field 
					will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbVersionResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:attribute name="versionName" type="xsd:string" use="optional"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbVersionsResponse contains a list of Version objects. If an error occurred while processing 
					the request, the versions field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbVersionsResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="versions" minOccurs="0" maxOccurs="unbounded" type="cmmodel:Version"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbDraftResponse contains a draft field that contains the requested ClbDraft.
					If an error occurred while processing the request, the draft field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbDraftResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="draft" nillable="true" type="clbmodel:ClbDraft"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbApproveDraftResponse contains a draftPublished boolean that indicates if the
					draft was published. If the person approving the draft is the last one in the list, then
					the draft will be published. Otherwise, the draft will be forwarded to the next approver. 
					If an error occurred while processing the request, the value of the draftPublished field should 
					be ignored.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbApproveDraftResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:attribute name="draftPublished" type="xsd:boolean" use="required"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbDraftsResponse contains a drafts field that contains the requested list of
					ClbDraft objects. If an error occurred while processing the request, the drafts field 
					will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbDraftsResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="drafts" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbDraft"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbFolderResponse contains a folder field that contains the requested ClbFolder.
					If an error occurred while processing the request, the folder field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbFolderResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="folder" nillable="true" type="clbmodel:ClbFolder"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbFoldersResponse contains a folders field that contains the requested list of
					ClbFolder objects. If an error occurred while processing the request, the folders field 
					will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbFoldersResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="folders" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbFolder"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbLibraryResponse contains a library field that contains the requested ClbLibrary.
					If an error occurred while processing the request, the library field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbLibraryResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="library" nillable="true" type="clbmodel:ClbLibrary"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbLibrariesResponse contains a libraries field that contains the requested list of
					ClbLibrary objects. If an error occurred while processing the request, the libraries field 
					will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbLibrariesResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="libraries" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbLibrary"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>
			<xsd:complexType name="ClbLibrariesByPageResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbLibrariesResponse">
						<xsd:sequence>
							<xsd:element name="paginationInfo" minOccurs="1" maxOccurs="1" type="clbsvc:PaginationInfo"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>
			<xsd:annotation>
				<xsd:documentation>
					The ClbPropertySheetTypeResponse contains a propertySheetType field that contains the 
					requested ClbPropertySheetType. If an error occurred while processing the request, the 
					propertySheetType field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbPropertySheetTypeResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="propertySheetType" nillable="true" type="clbmodel:ClbPropertySheetType"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbTreeResponse contains a root field that contains the requested ClbTreeFolder, 
					which represents the root node of the requested tree. If an error occurred while processing 
					the request, the root field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbTreeResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="root" nillable="true" type="clbmodel:ClbTreeFolder"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbViewResponse contains a view field that contains the requested ClbView.
					If an error occurred while processing the request, the view field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbViewResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="view" nillable="true" type="clbmodel:ClbView"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbViewsResponse contains a views field that contains the requested list of
					ClbView objects. If an error occurred while processing the request, the views field 
					will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbViewsResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="views" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbView"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbViewResultsResponse contains a columnFormats and results fields that contain the 
					requested view information. If an error occurred while processing the request, these fields
					will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbViewResultsResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="columnFormats" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbViewFormatColumn"/>
							<xsd:element name="results" type="clbmodel:ClbViewResult" minOccurs="0" maxOccurs="unbounded"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbViewFormatResponse contains a columnFormats field that contains the requested ClbView.
					If an error occurred while processing the request, the columnFormats field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbViewFormatResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="columnFormats" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbViewFormatColumn"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbContentURLResponse contains a url field that contains the requested URL.
					If an error occurred while processing the request, the url field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbContentURLResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:attribute name="url" type="xsd:string" use="optional"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbDocumentTypeResponse contains a documentType field that contains the 
					requested ClbDocumentType. If an error occurred while processing the request, the 
					documentType field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbDocumentTypeResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="documentType" nillable="true" type="clbmodel:ClbDocumentType"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbDocumentTypesResponse contains a documentTypes field that contains the requested list of
					ClbDocumentType objects. If an error occurred while processing the request, the documentTypes 
					field will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbDocumentTypesResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:sequence>
							<xsd:element name="documentTypes" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbDocumentType"/>
						</xsd:sequence>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbCopyResponse contains attributes from the newly created node. If an error occurred while 
					processing the request, these fields will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbCopyResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:attribute name="id" type="xsd:string" use="optional"/>
						<xsd:attribute name="path" type="xsd:string" use="optional"/>
						<xsd:attribute name="lastModified" type="xsd:dateTime" use="optional"/>
						<xsd:attribute name="created" type="xsd:dateTime" use="optional"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>
			<xsd:annotation>
				<xsd:documentation>
					The ClbMoveResponse contains attributes from the moved node. If an error occurred while 
					processing the request, these fields will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbMoveResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:attribute name="id" type="xsd:string" use="optional"/>
						<xsd:attribute name="path" type="xsd:string" use="optional"/>
						<xsd:attribute name="lastModified" type="xsd:dateTime" use="optional"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>
					The ClbCheckinResponse contains attributes from the checked in node. If an error occurred while 
					processing the request, these fields will be null.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:complexType name="ClbCheckinResponse">
				<xsd:complexContent>
					<xsd:extension base="clbsvc:ClbResponse">
						<xsd:attribute name="id" type="xsd:string" use="optional"/>
						<xsd:attribute name="path" type="xsd:string" use="optional"/>
						<xsd:attribute name="lastModified" type="xsd:dateTime" use="optional"/>
					</xsd:extension>
				</xsd:complexContent>
			</xsd:complexType>

			<xsd:annotation>
				<xsd:documentation>Element definitions for the ContentService</xsd:documentation>
			</xsd:annotation>

			<xsd:annotation>
				<xsd:documentation>
					The getUser operation retrieves the requested UserInfo object and returns it in the UserResponse.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getUser">
				<xsd:complexType>
					<xsd:sequence/>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getUserResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getUserReturn" nillable="false" type="clbsvc:UserResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getUsers operation retrieves a list of UserInfo objects that are specified by the ids
					parameter and returns then in the UsersResponse. 

					Parameters:
						ids - The list of user dn values to retrieve. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getUsers">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="ids" minOccurs="1" maxOccurs="unbounded" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getUsersResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getUsersReturn" nillable="false" type="clbsvc:UsersResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getServerInfo operation retrieves the ServerInfo object and returns it in the ServerInfoResponse. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getServerInfo">
				<xsd:complexType>
					<xsd:sequence/>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getServerInfoResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getServerInfoReturn" nillable="false" type="clbsvc:ServerInfoResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>Element definitions for the DocumentService</xsd:documentation>
			</xsd:annotation>

			<xsd:annotation>
				<xsd:documentation>
					The getDocument operation retrieves the requested ClbDocument and returns it in the ClbDocumentResponse.
					This operation can be called by id, path or a combination of id and path. If only an id is
					provided, the id must be the uuid of the ClbDocument to retrieve. If only a path is provided,
					that path must be the absolute path to the ClbDocument to retrieve. If an id and path are both
					provided, the id must be the uuid of a folder that is a parent to the ClbDocument and the
					path must be the relative path from the parent folder. The url attribute of the returned ClbDocument 
					will also be populated if the ClbServiceOption RetrieveDownloadURL or RetrieveViewURL is provided. 
					If the RetrieveDownloadURL is provided, then the url attribute will be populated with a URL that 
					will download the binary content of the document. If the RetrieveViewURL is provided, then the url 
					attribute will be populated with a URL that will bring up the portal web page that contains the 
					document. If both RetrieveDownloadURL and RetrieveViewURL options are provided, the url attribute 
					will be populated with the download url.

					Parameters:
				 		id - The uuid of the document if no path is provided. If both id and path
							are provided, the id must be the uuid of the parent folder to the document.
						path - The absolute path to the document if no id is provided. If both id and path are
							provided, the path must be the relative path from the id provided.
						downloadOption - Placeholder for future MTOM attachment support. 
						serviceOptions - Multiple service options can be provided to control the returned results.
							The supported values are None, IncludeDrafts, IncludeReferences, IncludePermissions, 
							IncludePropertySheets, ResolveLockOwner, IncludeApproveDrafts, RetrieveDownloadURL, 
							RetrieveViewURL, RetrieveByIdOrAbsPath, RetrievePathRelativeToLibraryId, ResolveDefaultDocumentType 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="downloadOption" nillable="true" type="clbsvc:ClbDownloadOption"/>
						<xsd:element name="serviceOptions" minOccurs="0" maxOccurs="unbounded" type="clbsvc:ClbServiceOption"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getDocumentReturn" nillable="false" type="clbsvc:ClbDocumentResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getDocuments operation retrieves a list of ClbDocuments that are in a specified folder
					and returns the documents in the ClbDocumentsResponse. This operation can be called by id, path
					or a combination of id and path. If only an id is provided, the id must be the uuid of the
					ClbFolder that contains the documents to retrieve. If only a path is provided, that path must
					be the absolute path to the ClbFolder that contains the documents to retrieve. If an id and path
					are both provided, the id must be the uuid of a folder that is a parent to the target folder
					and the path must be the relative path from the parent folder to the target folder that contains
					the documents to retrieve.

					Parameters:
				 		id - The uuid of the folder that contains the documents to retrieve if no path is provided.
							If both id and path are provided, the uuid must be the uuid of the folder that is a parent to
							the target folder that contains the documents to retrieve.
						path - The absolute path to the document if no id is provided. If id and path are provided
							the path must be the relative path from the parent folder to the target folder that contains
							the documents to retrieve.
						serviceOptions - Multiple service options can be provided to control the returned results.
							The supported values are None, IncludeDrafts, IncludeSubmittedDrafts, IncludeReferences, 
							IncludePermissions, ResolveLockOwner							RetrieveViewURL, RetrieveByIdOrAbsPath and RetrievePathRelativeToLibraryId.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getDocuments">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="serviceOptions" minOccurs="0" maxOccurs="unbounded" type="clbsvc:ClbServiceOption"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getDocumentsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getDocumentsReturn" nillable="false" type="clbsvc:ClbDocumentsResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getLockedDocuments operation retrieves a list of ClbDocuments, which are locked by the
					current user, and that are under the specified folder. This operation can be called by id, 
					path or a combination of id and path. If only an id is provided, the id must be the uuid of 
					the root ClbFolder where the search will begin. If only a path is provided, that path must 
					be the absolute path to the root ClbFolder. If an id and path are both provided, the id must 
					be the uuid of a folder that is a parent to the target ClbFolder and the path must be the 
					relative path from the parent folder to the target folder where the search will begin.
					This operation searches all subfolders under the specified folder. 

					Parameters:
						id - The uuid of the folder where the search will begin if no path is provided. 
							If both id and path are provided, the uuid must be the uuid of the folder that is a parent to 
							the target folder. 
						path - The absolute path to the folder where the search will begin if no path is provided. 
							If id and path are provided the path must be the relative path from the parent folder to the 
							target folder. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getLockedDocuments">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getLockedDocumentsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getLockedDocumentsReturn" nillable="false" type="clbsvc:ClbDocumentsResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getDocumentVersions operation retrieves a list of versions for the specified ClbDocument 
					and returns them in the ClbVersionsResponse. This operation can be called by id, path or a 
					combination of id and path. If only an id is provided, the id must be the uuid of the ClbDocument 
					If only a path is provided, that path must be the absolute path to the ClbDocument. If an id and 
					path are both provided, the id must be the uuid of a folder that is a parent to the ClbDocument 
					and the path must be the relative path from the parent folder. 

					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getDocumentVersions">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getDocumentVersionsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getDocumentVersionsReturn" nillable="false" type="clbsvc:ClbVersionsResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getDocumentVersion operation retrieves the specified version of a ClbDocument and returns 
					it in the ClbDocumentResponse. This operation can be called by id, path or a combination of id 
					and path. If only an id is provided, the id must be the uuid of the ClbDocument to retrieve. 
					If only a path is provided, that path must be the absolute path to the ClbDocument to retrieve. 
					If an id and path are both provided, the id must be the uuid of a folder that is a parent to the 
					ClbDocument and the path must be the relative path from the parent folder. This operation 
					supports retrieving a version by name or version label. The value is of either the verion name 
					or verion label is provided in the verion parameter. The type that is provided (i.e. name or 
					label) is specified by the versionType parameter.
 
					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						version - Either the verion name or verion label.
						versionType - An enumeration value of either Name or Label.
						downloadOption - Placeholder for future MTOM attachment support. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getDocumentVersion">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="version" nillable="false" type="xsd:string"/>
						<xsd:element name="versionType" nillable="false" type="cmmodel:VersionType"/>
						<xsd:element name="downloadOption" nillable="true" type="clbsvc:ClbDownloadOption"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getDocumentVersionResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getDocumentVersionReturn" nillable="false" type="clbsvc:ClbDocumentResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The restoreVersion operation makes the specified verion of a given document the current working
					version. This operation can be called by id, path or a combination of id and path. If only an id 
					is provided, the id must be the uuid of the ClbDocument to retrieve. If only a path is provided, 
					that path must be the absolute path to the ClbDocument to retrieve. If an id and path are both 
					provided, the id must be the uuid of a folder that is a parent to the ClbDocument and the path 
					must be the relative path from the parent folder. This operation supports restoring a version by 
					name or version label. The value of either the verion name or verion label is provided in the 
					verion parameter. The type that is provided (i.e. name or label) is specified by the versionType 
					parameter.
 
					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						version - Either the verion name or verion label.
						versionType - An enumeration value of either Name or Label.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="restoreVersion">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="version" nillable="false" type="xsd:string"/>
						<xsd:element name="versionType" nillable="false" type="cmmodel:VersionType"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="restoreVersionResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="restoreVersionReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The createVersion operation creates a version of the specified document. This operation can be 
					called by id, path or a combination of id and path. If only an id is provided, the id must be 
					the uuid of the ClbDocument to retrieve. If only a path is provided, that path must be the 
					absolute path to the ClbDocument to retrieve. If an id and path are both provided, the id must 
					be the uuid of a folder that is a parent to the ClbDocument and the path must be the relative 
					path from the parent folder. Multiple versions of the same document are not allowed. In other
					words, the meta-data or the binary contents of the document must change before a subsequent 
					version is allowed.
 
					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						comments - Optional comments text that will be part of this version.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="createVersion">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="comments" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="createVersionResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="createVersionReturn" nillable="false" type="clbsvc:ClbVersionResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The addVersionLabel operation adds a label to a specified version of a document. This operation 
					can be called by id, path or a combination of id and path. If only an id is provided, the id 
					must be the uuid of the ClbDocument to retrieve. If only a path is provided, that path must be the 
					absolute path to the ClbDocument to retrieve. If an id and path are both provided, the id must 
					be the uuid of a folder that is a parent to the ClbDocument and the path must be the relative 
					path from the parent folder.
 
					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						version - The version name to add the label to.
						label - The label to be added.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="addVersionLabel">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="version" nillable="false" type="xsd:string"/>
						<xsd:element name="label" nillable="false" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="addVersionLabelResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="addVersionLabelReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The removeVersionLabel operation removes a label from a specified version of a document. This operation 
					can be called by id, path or a combination of id and path. If only an id is provided, the id 
					must be the uuid of the ClbDocument to retrieve. If only a path is provided, that path must be the 
					absolute path to the ClbDocument to retrieve. If an id and path are both provided, the id must 
					be the uuid of a folder that is a parent to the ClbDocument and the path must be the relative 
					path from the parent folder.
 
					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						version - The version name to remove the label from.
						label - The label to be removed.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="removeVersionLabel">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="version" nillable="false" type="xsd:string"/>
						<xsd:element name="label" nillable="false" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="removeVersionLabelResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="removeVersionLabelReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>


			<xsd:annotation>
				<xsd:documentation>
					The createDocument operation creates a published ClbDocument. The path attribute of the 
					document parameter is used to determine where the document will be created. 
 
					Parameters:
						document - The new document to create.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="createDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="document" nillable="false" type="clbmodel:ClbDocument"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="createDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="createDocumentReturn" nillable="false" type="clbsvc:ClbDocumentResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			

			<xsd:annotation>
				<xsd:documentation>
   			        This operation updates a published ClbDocument in the repository.  Attributes provided in the document
					parameter will be used to update the document. If locking is enforced on the server, the document will be locked
					modified, and then unlocked after the updates.  If an error occurs during the update, the document will be left
					in an unlocked state.
.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="updateDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="document" nillable="false" type="clbmodel:ClbDocument"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="updateDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="updateDocumentReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>			
			
			<xsd:annotation>
				<xsd:documentation>
					The deleteDocument operation is used to delete a document from the repository. This operation can be 
					called by id, path or a combination of id and path. If only an id is provided, the id must be the uuid 
					of the document to delete. If only a path is provided, that path must be the absolute path to the document
					to delete. If an id and path are both provided, the id must be the uuid of a folder that is a parent to 
					the document and the path must be the relative path from the parent folder.

					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="deleteDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="deleteDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="deleteDocumentReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			
			<xsd:annotation>
				<xsd:documentation>
					The copyDocument operation is used to copy a document into a specified folder. This operation 
					can be called by id, path or a combination of id and path. This is true for both the source (i.e. the
					document to be copied) and for the destination folder. If only the srcId is provided, the 
					srcId must be the uuid of the document to be copied. If only a srcPath is provided, that srcPath must be 
					the absolute path to the document to be copied. If the srcId and srcPath are both provided, the srcId 
					must be the uuid of a folder that is a parent of the document to be copied and the srcPath must be the 
					relative path from the parent folder. The same pattern is true for destId and destPath.

					Parameters:
						srcId - The uuid of the source document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						srcPath - The absolute path to the source document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						destId - The uuid of the destination folder if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the destination folder. 
						destPath - The absolute path to the destination folder if no id is provided. If both id and path 
							are provided, the path must be the relative path from the id provided.
						shallowCopy - If true, the copy will not include the children of the document. If false, the 
						  document and children will be copied to the target. Currently, the only child types that are
						  copied are property sheets. The drafts and comments of a document are never copied.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="copyDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="srcId" nillable="true" type="xsd:string"/>
						<xsd:element name="srcPath" nillable="true" type="xsd:string"/>
						<xsd:element name="destId" nillable="true" type="xsd:string"/>
						<xsd:element name="destPath" nillable="true" type="xsd:string"/>
						<xsd:element name="shallowCopy" nillable="false" type="xsd:boolean"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="copyDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="copyDocumentReturn" nillable="false" type="clbsvc:ClbCopyResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The moveDocument operation is used to move a document. This operation can be called by id, path or a 
					combination of id and path. This is true for both the source and destination parameters. If only the 
					srcId is provided, the srcId must be the uuid of the document to be moved. If only a srcPath is provided, 
					that srcPath must be the absolute path to the document to be moved. If the srcId and srcPath are both 
					provided, the srcId must be the uuid of a parent folder of the document to be moved and the 
					srcPath must be the relative path from the parent folder. The same pattern is true for destId and 
					destPath. NOTE: The destId and destPath should reference the resulting document and not the parent 
					folder where the source document is being moved to. In other words, if a document is being moved, and 
					only the	destPath is supplied, this should be the absolute path of the document after the move is 
					completed. Since the move results in a new document being created, and thus a new uuid, the user should 
					not attempt to supply only a destId without a destPath. 

					Parameters:
						srcId - The uuid of the source document if no path is provided. If both srcId and srcPath 
							are provided, the srcId must be the uuid of the parent folder to the document that is being moved. 
						srcPath - The absolute path to the source document if no srcId is provided. If both srcId and srcPath are 
							provided, the path must be the relative path from the id provided.
						destId - The uuid of the destination parent folder. The destId should not be supplied without also
						  providing a destPath. If both destId and destPath are provided, the destId must be the uuid of the 
						  destination parent folder 
						destPath - The absolute path to the resulting document after the move. If both destId and destPath 
							are provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="moveDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="srcId" nillable="true" type="xsd:string"/>
						<xsd:element name="srcPath" nillable="true" type="xsd:string"/>
						<xsd:element name="destId" nillable="true" type="xsd:string"/>
						<xsd:element name="destPath" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="moveDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="moveDocumentReturn" nillable="false" type="clbsvc:ClbMoveResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The renameDocument operation will rename the specified document. Prior to renaming a document, this 
					operation will attempt to obtain a lock on the document. If the document is already locked by another 
					user, a DocumentAlreadyLocked error will be returned. If the document is not locked, it will be locked, 
					the document will be renamed, and then unlocked. If the document is locked	by the current user and no 
					draft exists, the document will be renamed and remain locked. If the document is locked by the current 
					user and a draft exists, a DraftExists error will be returned. This operation can be called by id, path 
					or a combination of id and path. If only an id is provided, the id must be the uuid of the document 
					to rename. If only a path is provided, that path must be the absolute path to the document to rename. 
					If an id and path are both provided, the id must be the uuid of a folder that is a parent to the document
					and the	path must be the relative path from the parent folder. The newName should contain the name that 
					the document will be renamed to. The base name can be changed, but not the extension. For example, if 
					the current file name is foo.doc, a newName value of bar.doc is valid.	However, a newName of foo.xls 
					or bar.txt is not valid. If the extension is attempted to be changed, an ExtensionChangeNotAllowed 
					ClbErrorType will be returned.

					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and 
						  path are provided, the path must be the relative path from the id provided.
						newName - name that the document will be renamed to. The base name of a document
						  can be changed, but not the extension.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="renameDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="newName" nillable="false" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="renameDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="renameDocumentReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The lockDocument operation is used to lock a document in the repository. This operation can be called 
					by id, path or a combination of id and path. If only an id is provided, the id must be the uuid of 
					the document to be locked. If only a path is provided, that path must be the absolute path to the 
					document to be locked. If an id and path are both provided, the id must be the uuid of a folder that 
					is a parent to the document and the path must be the relative path from the parent folder.

					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="lockDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="lockDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="lockDocumentReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The unlockDocument operation is used to unlock a document in the repository. This operation can be called 
					by id, path or a combination of id and path. If only an id is provided, the id must be the uuid of 
					the document to be unlocked. If only a path is provided, that path must be the absolute path to the 
					document to be unlocked. If an id and path are both provided, the id must be the uuid of a folder that 
					is a parent to the document and the path must be the relative path from the parent folder.

					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="unlockDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="unlockDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="unlockDocumentReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The checkoutDocument operation attempts to lock the requested ClbDocument and returns the data
					of the document in the ClbDocumentResponse. If the document is already locked by someone else,
					a DocumentAlreadyLocked error will be returned with the user information of the person that has
					it locked. This operation can be called by id, path or a combination of id and path. If only an 
					id is provided, the id must be the uuid of the ClbDocument to retrieve. If only a path is provided, 
					that path must be the absolute path to the ClbDocument to retrieve. If an id and path are both 
					provided, the id must be the uuid of a folder that is a parent to the ClbDocument and the path 
					must be the relative path from the parent folder.  

					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						downloadOption - Placeholder for future MTOM attachment support. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="checkoutDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="downloadOption" nillable="true" type="clbsvc:ClbDownloadOption"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="checkoutDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="checkoutDocumentReturn" nillable="false" type="clbsvc:ClbDocumentResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The checkinDocument operation takes the data provided in the document parameter and updates the
					corresponding draft in the repository. If draft approval is enabled, the draft will be submitted
					for approval. Otherwise, the draft will be published and the parent document will be unlocked.
					The id or path attributes are the only required values to be supplied, and they must reference the
					document that is being checked in. 

					Parameters:
						document - The id or path attribute is the only required attribute to be supplied in the
							document parameter. The id or path should reference the document to be checked in. If any
							other data is supplied in the document, that data will be updated on the document prior to 
							checking it in.  
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="checkinDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="document" nillable="false" type="clbmodel:ClbDocument"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="checkinDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="checkinDocumentReturn" nillable="false" type="clbsvc:ClbCheckinResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The cancelDocument operation will cancel a prior checkout of the referenced document. If a draft
					does not exist, the document will be unlocked. If a draft exists, the parent document has not
					yet been published (i.e. this is a newly created draft and document), the draft and parent 
					document will both be deleted. In this scenario, the documentDeleted attribute in the 
					ClbCancelDocumentResponse will be true. If a draft exists, and the parent document has already been
					published, the draft will be deleted and the parent document will be unlocked. If the document is 
					locked by someone else, a DocumentAlreadyLocked error will be returned with the user information 
					of the person that has it locked. This operation can be called by id, path or a combination of id 
					and path. If only an id is provided, the id must be the uuid of the ClbDocument to cancel. 
					If only a path is provided, that path must be the absolute path to the ClbDocument to cancel. 
					If an id and path are both provided, the id must be the uuid of a folder that is a parent to the 
					ClbDocument and the path must be the relative path from the parent folder.

					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="cancelDocument">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="cancelDocumentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="cancelDocumentReturn" nillable="false" type="clbsvc:ClbCancelDocumentResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The approveDraft operation is called when the draft approver wishes to approve a draft. If there are
					additional approvers, the draft will be sent to the next approver in the chain. If there are no other 
					approvers, the draft will be published. If the draft is published, the draftPublished attribute in 
					the ClbApproveDraftResponse will be true. This operation can be called by id, path or a combination 
					of id and path. If only an id is provided, the id must be the uuid of the ClbDraft to approve. 
					If only a path is provided, that path must be the absolute path to the ClbDraft to approve. If an 
					id and path are both provided, the id must be the uuid of a folder that is a parent to the ClbDraft 
					and the path must be the relative path from the parent folder.

					Parameters:
						id - The uuid of the draft if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the draft. 
						path - The absolute path to the draft if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="approveDraft">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="approveDraftResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="approveDraftReturn" nillable="false" type="clbsvc:ClbApproveDraftResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The submitDraft operation will attempt to submit the referenced draft for approval. This operation 
					can be called by id, path or a combination of id and path. If only an id is provided, the id must be 
					the uuid of the ClbDraft to submit. If only a path is provided, that path must be the absolute path 
					to the ClbDraft to submit. If an id and path are both provided, the id must be the uuid of a 
					folder that is a parent to the ClbDraft and the path must be the relative path from the parent folder.

					Parameters:
						id - The uuid of the draft if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the draft. 
						path - The absolute path to the draft if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="submitDraft">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="submitDraftResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="submitDraftReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The rejectDraft operation is called when the draft approver wishes to reject a draft. This operation 
					can be called by id, path or a combination of id and path. If only an id is provided, the id must be 
					the uuid of the ClbDraft to reject. If only a path is provided, that path must be the absolute path 
					to the ClbDraft to reject. If an id and path are both provided, the id must be the uuid of a 
					folder that is a parent to the ClbDraft and the path must be the relative path from the parent folder.

					Parameters:
						id - The uuid of the draft if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the draft. 
						path - The absolute path to the draft if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="rejectDraft">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="rejectDraftResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="rejectDraftReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The createDraft operation creates a ClbDraft in the repository. The data provided in the draft
					parameter will be used to populate the new draft in the repository. This operation can be called by id, 
					path or a combination of id and path. If only an id is provided, the id must be the uuid of the 
					ClbDocument to create a draft of. If only a path is provided, that path must be the absolute path 
					to the ClbDocument to create a draft of. If an id and path are both provided, the id must be the uuid 
					of a folder that is a parent to the ClbDocument and the path must be the relative path from the parent 
					folder.

					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						draft - The data that will be used to populate the new draft.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="createDraft">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="draft" nillable="true" type="clbmodel:ClbDraft"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="createDraftResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="createDraftReturn" nillable="false" type="clbsvc:ClbDraftResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getDraft operation retrieves the requested ClbDraft and returns it in the ClbDraftResponse.
					This operation can be called by id, path or a combination of id and path. If only an id is 
					provided, the id must be the uuid of the ClbDraft to retrieve. If only a path is provided,
					that path must be the absolute path to the ClbDraft to retrieve. If an id and path are both
					provided, the id must be the uuid of a folder that is a parent to the ClbDraft and the 
					path must be the relative path from the parent folder. Users should note that the path of a 
					given draft if not guarenteed to be the same if a draft is cancelled and then a new one is 
					created. For example, document "A" has a draft "A.1" and the path of A.1 is xyz. If A.1 is
					cancelled and a new draft A.2 is created, then A.1.path is not guarenteed to equal A.2.path. 
					If a user does not know the uuid or path of a given draft, then the parent document should be
					obtained using the INCLUDE_DRAFTS service option and doc.getDrafts() should be called to obtain
					the draft.

					Parameters:
						id - The uuid of the draft if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the draft if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						downloadOption - Placeholder for future MTOM attachment support. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getDraft">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="downloadOption" nillable="true" type="clbsvc:ClbDownloadOption"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getDraftResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getDraftReturn" nillable="false" type="clbsvc:ClbDraftResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The updateDraft operation takes the data provided in the draft parameter and updates the
					corresponding draft in the repository. The id or path attribute should be populated to indicate
					which draft in the repository should be updated. This operation does not support the id and path
					offset behavior that some of the other operations support. If the id is supplied, the id must be
					the uuid of the draft that is to be updated. If the path is supplied, the value can be the path
					of the draft or the path of the parent document. This behavior is a convenience for those consumers
					that may not differentiate between the path of the draft and the path of the parent document. If both
					the id and path are supplied, the id will be used. A common scenario is to first check to see if a 
					document already exists, and if it does not, call createDraft to create both the document and draft. 
					If the document	already exists, then call updateDraft. For convenience, the updateDraft can be used 
					for both scenarios.	If the parent docuemnt does not exist, and the createDocument is true, the 
					parent document will automaticaly be created as part of the draft creation. In this scenario, the 
					path atribute of the draft parameter should be the absolute path of the document that is to be 
					created. 

					Parameters:
						draft - The data supplied in the draft will be used to update the	draft in the repository. 
						createDocument - If the createDocument=true and the parent document does not exist, 
							it will be automatically created as part of the draft creation. In this scenario, the
							path of the draft should be that of the parent document that will be created.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="updateDraft">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="draft" nillable="false" type="clbmodel:ClbDraft"/>
						<xsd:element name="createDocument" nillable="false" type="xsd:boolean"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="updateDraftResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="updateDraftReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getPrivateDrafts operation retrieves a list of ClbDraft objects that are in a specified 
					folder and returns the doucments in the ClbDraftsResponse. The drafts that are returned are private
					drafts and con only be seen by the current user. This operation can be called by id, path 
					or a combination of id and path. If only an id is provided, the id must be the uuid of the 
					ClbFolder that contains the drafts to retrieve. If only a path is provided, that path must 
					be the absolute path to the ClbFolder that contains the drafts to retrieve. If an id and path 
					are both provided, the id must be the uuid of a folder that is a parent to the target ClbFolder 
					and the path must be the relative path from the parent folder to the target folder. 

					Parameters:
						id - If no path is provided, this should be the uuid of the folder to look for
							drafts under. If both id and path are provided, the id must be the uuid of the parent folder 
							of the search folder. 
						path - If no id is provided, the absolute path to the folder to look for drafts under. 
							If both id and path are provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getPrivateDrafts">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getPrivateDraftsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getPrivateDraftsReturn" nillable="false" type="clbsvc:ClbDraftsResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getSubmittedDrafts operation retrieves a list of ClbDraft objects that are in a specified 
					folder and returns the doucments in the ClbDraftsResponse. The drafts that are returned are those
					drafts that the current user has submitted for approval. This operation can be called by id, path 
					or a combination of id and path. If only an id is provided, the id must be the uuid of the 
					ClbFolder that contains the drafts to retrieve. If only a path is provided, that path must 
					be the absolute path to the ClbFolder that contains the drafts to retrieve. If an id and path 
					are both provided, the id must be the uuid of a folder that is a parent to the target ClbFolder 
					and the path must be the relative path from the parent folder to the target folder. 

					Parameters:
						id - If no path is provided, this should be the uuid of the folder to look for
							drafts under. If both id and path are provided, the id must be the uuid of the parent folder 
							of the search folder. 
						path - If no id is provided, the absolute path to the folder to look for drafts under. 
							If both id and path are provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getSubmittedDrafts">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getSubmittedDraftsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getSubmittedDraftsReturn" nillable="false" type="clbsvc:ClbDraftsResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getApproveDrafts operation retrieves a list of ClbDraft objects that are in a specified 
					folder and returns the doucments in the ClbDraftsResponse. The drafts that are returned are those
					drafts that the current user is listed as an approver of. This operation can be called by id, path 
					or a combination of id and path. If only an id is provided, the id must be the uuid of the 
					ClbFolder that contains the drafts to retrieve. If only a path is provided, that path must 
					be the absolute path to the ClbFolder that contains the drafts to retrieve. If an id and path 
					are both provided, the id must be the uuid of a folder that is a parent to the target ClbFolder 
					and the path must be the relative path from the parent folder to the target folder. 

					Parameters:
						id - If no path is provided, this should be the uuid of the folder to look for
							drafts under. If both id and path are provided, the id must be the uuid of the parent folder 
							of the search folder. 
						path - If no id is provided, the absolute path to the folder to look for drafts under. 
							If both id and path are provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getApproveDrafts">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getApproveDraftsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getApproveDraftsReturn" nillable="false" type="clbsvc:ClbDraftsResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getFolder operation retrieves the requested ClbFolder and returns it in the ClbFolderResponse.
					This operation can be called by id, path or a combination of id and path. If only an id is 
					provided, the id must be the uuid of the ClbFolder to retrieve. If only a path is provided,
					that path must be the absolute path to the ClbFolder to retrieve. If an id and path are both
					provided, the id must be the uuid of a folder that is a parent to the ClbFolder and the 
					path must be the relative path from the parent folder.

					Parameters:
						id - The uuid of the folder if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the target folder. 
						path - The absolute path to the folder if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						serviceOptions - Multiple service options can be provided to control the returned results.
							The supported values are None, IncludeFolderChildren, IncludePermissions, IncludePropertySheets							RetrieveViewURL, RetrieveByIdOrAbsPath and RetrievePathRelativeToLibraryId.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getFolder">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="serviceOptions" minOccurs="0" maxOccurs="unbounded" type="clbsvc:ClbServiceOption"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getFolderResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getFolderReturn" nillable="false" type="clbsvc:ClbFolderResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getFolders operation retrieves a list of ClbFolder objects that are in a specified folder
					and returns the folders in the ClbFoldersResponse. This operation can be called by id, path 
					or a combination of id and path. If only an id is provided, the id must be the uuid of the 
					ClbFolder that contains the folders to retrieve. If only a path is provided, that path must 
					be the absolute path to the ClbFolder that contains the folders to retrieve. If an id and path 
					are both provided, the id must be the uuid of a folder that is a parent to the target ClbFolder 
					and the path must be the relative path from the parent folder to the target folder. 

					Parameters:
						id - The uuid of the folder that contains the folders to retrieve if no path is provided. 
							If both id and path are provided, the uuid must be the uuid of the folder that is a parent to 
							the target folder. 
						path - The absolute path to the folder if no id is provided. If id and path are provided
							the path must be the relative path from the parent folder to the target folder. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getFolders">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getFoldersResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getFoldersReturn" nillable="false" type="clbsvc:ClbFoldersResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getTree operation can be used to get a recursive tree starting at a specified folder. 
					This operation was designed to only return a minimal set of information to maximize performance
					of transmitting large amounts of excess data across the wire. The ClbTreeFolder and ClbTreeItem 
					objects used in the return allow this, as opposed to returning ClbFolder and ClbDocument objects.  

					Parameters:
						id - The uuid of the folder if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the target folder. 
						path - The absolute path to the folder if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getTree">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getTreeResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getTreeReturn" nillable="false" type="clbsvc:ClbTreeResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The createFolder operation creates a ClbFolder in the repository. The data provided in the folder
					parameter will be used to populate the new ClbFolder in the repository.

					Parameters:
						folder - The data that will be used to populate the new folder. The path attribute must contain
							the absolute path of the folder to be created.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="createFolder">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="folder" nillable="false" type="clbmodel:ClbFolder"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="createFolderResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="createFolderReturn" nillable="false" type="clbsvc:ClbFolderResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The updateFolder operation takes the data provided in the folder parameter and updates the
					corresponding ClbFolder in the repository. The id or path attributes of the folder parameter must 
					reference the folder that is being updated.

					Parameters:
						folder - The id or path attribute of the foler should reference the folder in the
							repository to be updated. The data supplied in the folder will be used to update the
							folder in the repository. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="updateFolder">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="folder" nillable="false" type="clbmodel:ClbFolder"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="updateFolderResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="updateFolderReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The deleteFolder operation is used to delete a folder from the repository. This operation can be called 
					by id, path or a combination of id and path. If only an id is provided, the id must be the uuid of 
					the folder to delete. If only a path is provided, that path must be the absolute path to the folder to 
					delete. If an id and path are both provided, the id must be the uuid of a folder that is a parent to 
					the folder that is being deleted and the path must be the relative path from the parent folder.

					Parameters:
						id - The uuid of the folder if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the folder. 
						path - The absolute path to the folder if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="deleteFolder">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="deleteFolderResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="deleteFolderReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The copyFolder operation is used to copy a folder into a specified folder. This operation 
					can be called by id, path or a combination of id and path. This is true for both the source (i.e. the
					folder copied) and for the destination folder. If only the srcId is provided, the srcId must be the 
					uuid of the folder to be copied. If only a srcPath is provided, that srcPath must be the absolute path 
					to the folder to be copied. If the srcId and srcPath are both provided, the srcId must be the uuid of a 
					folder that is a parent of the folder to be copied and the srcPath must be the relative path from the 
					parent folder. The same pattern is true for destId and destPath.

					Parameters:
						srcId - The uuid of the source folder if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the item. 
						srcPath - The absolute path to the source folder if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						destId - The uuid of the destination folder if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the destination folder. 
						destPath - The absolute path to the destination folder if no id is provided. If both id and path 
							are provided, the path must be the relative path from the id provided.
						shallowCopy - If true, the copy will only be one level deep. If false, the entire tree under the
							source node will be copied to the target.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="copyFolder">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="srcId" nillable="true" type="xsd:string"/>
						<xsd:element name="srcPath" nillable="true" type="xsd:string"/>
						<xsd:element name="destId" nillable="true" type="xsd:string"/>
						<xsd:element name="destPath" nillable="true" type="xsd:string"/>
						<xsd:element name="shallowCopy" nillable="false" type="xsd:boolean"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="copyFolderResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="copyFolderReturn" nillable="false" type="clbsvc:ClbCopyResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The moveFolder operation is used to move a folder. This operation can be called by id, path or a 
					combination of id and path. This is true for both the source and destination parameters. If only the 
					srcId is provided, the srcId must be the uuid of the folder to be moved. If only a srcPath is provided, 
					that srcPath must be the absolute path to the folder to be moved. If the srcId and srcPath are both 
					provided, the srcId must be the uuid of a parent folder of the folder to be moved and the 
					srcPath must be the relative path from the parent folder. The same pattern is true for destId and 
					destPath. NOTE: The destId and destPath should reference the resulting folder and not the parent 
					folder where the source folder is being moved to. In other words, if a folder is being moved, and only 
					the	destPath is supplied, this should be the absolute path of the folder after the move is completed. 
					Since the move results in a new folder being created, and thus a new uuid, the user should not attempt 
					to supply only a destId without a destPath. 

					Parameters:
						srcId - The uuid of the source folder if no path is provided. If both srcId and srcPath 
							are provided, the srcId must be the uuid of the parent folder to the folder that is being moved. 
						srcPath - The absolute path to the source folder if no srcId is provided. If both srcId and srcPath are 
							provided, the path must be the relative path from the srcId provided.
						destId - The uuid of the detination parent folder. The destId should not be supplied without also
						  providing a destPath. If both destId and destPath are provided, the destId must be the uuid of the destination 
						  parent folder 
						destPath - The absolute path to the resulting folder after the move. If both destId and destPath 
							are provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="moveFolder">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="srcId" nillable="true" type="xsd:string"/>
						<xsd:element name="srcPath" nillable="true" type="xsd:string"/>
						<xsd:element name="destId" nillable="true" type="xsd:string"/>
						<xsd:element name="destPath" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="moveFolderResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="moveFolderReturn" nillable="false" type="clbsvc:ClbMoveResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The renameFolder operation will rename the specified folder. This operation can be called by id, path or 
					a combination of id and path. If only an id is provided, the id must be the uuid of the folder to 
					rename. If only a path is provided, that path must be the absolute path to the folder to rename. If an 
					id and path are both provided, the id must be the uuid of a parent folder to the folder that is being 
					renamed and the	path must be the relative path from the parent folder. The newName should contain the 
					name that the folder will be renamed to. 

					Parameters:
						id - The uuid of the folder if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the folder that is being renamed. 
						path - The absolute path to the folder if no id is provided. If both id and 
						  path are provided, the path must be the relative path from the id provided.
						newName - name that the folder will be renamed to.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="renameFolder">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="newName" nillable="false" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="renameFolderResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="renameFolderReturn" nillable="false" type="clbsvc:ClbResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getFolderURL operation is used to obtain a URL to a folder. The mode parameter is 
					supplied for future functionality only. The returned URL will be a view URL. The URL can 
					be SSL or just http, which is controlled by the secureURL parameter. This operation can be 
					called by id, path or a combination of id and path. If only an id is provided, the id must 
					be the uuid of the folder. If only a path is provided, that path must be the absolute path 
					to the folder. If an id and path are both provided, the id must be the uuid of a folder 
					that is a parent to the requested folder and the path must be the relative path from the 
					parent folder.

					Parameters:
						id - The uuid of the folder if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the requested folder. 
						path - The absolute path to the folder if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						mode - Ignored for this operation. Only view URLs are supported.
						secureURL - If true, the returned URL will be prefixed with https.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getFolderURL">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="mode" nillable="false" type="clbmodel:ClbContentURLMode"/>
						<xsd:element name="secureURL" nillable="false" type="xsd:boolean"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getFolderURLResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getFolderURLReturn" nillable="false" type="clbsvc:ClbContentURLResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getPropertySheetType operation returns the requested ClbPropertySheetType in the 
					ClbPropertySheetTypeResponse. 

					Parameters:
						id - The uuid of the ClbPropertySheetType
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getPropertySheetType">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getPropertySheetTypeResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getPropertySheetTypeReturn" nillable="false" type="clbsvc:ClbPropertySheetTypeResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getDocumentType operation returns the requested ClbDocumentType in the 
					ClbDocumentTypeResponse. This operation can be called by id, path or a combination of id and path. 
					If only an id is provided, the id must be the uuid of the ClbDocumentType to retrieve. If only a path 
					is provided, that path must be the absolute path to the ClbDocumentType to retrieve. If an id and 
					path are both provided, the id must be the uuid of a folder that is a parent to the ClbDocumentType
					and the path must be the relative path from the parent folder. 

					Parameters:
						id - The uuid of the ClbDocumentType if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the ClbDocumentType. 
						path - The absolute path to the ClbDocumentType if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						downloadOption - Placeholder for future MTOM attachment support. 
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getDocumentType">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="downloadOption" nillable="true" type="clbsvc:ClbDownloadOption"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getDocumentTypeResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getDocumentTypeReturn" nillable="false" type="clbsvc:ClbDocumentTypeResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getDocumentTypes operation retrieves a list of ClbDocumentType objects that are in a specified 
					folder and returns the doucments in the ClbDocumentTypesResponse. This operation can be called by id, 
					path or a combination of id and path. If only an id is provided, the id must be the uuid of the 
					ClbLibrary that contains the document types to retrieve. If only a path is provided, that path must 
					be the absolute path to the ClbLibrary that contains the document types to retrieve. If an id and 
					path are both provided, the id must be the uuid of a folder that is a parent to the target ClbLibrary 
					and the path must be the relative path from the parent folder to the target library. 

					Parameters:
						libraryId - The uuid of the library if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the library. 
						libraryPath - The absolute path to the library if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						extensionFilter - Results can be filtered by providing an extension. For example, if you
							want document types for Microsoft Word documents, you would supply a value of "doc". 
						docTypeOption - If null or a value of LibraryScope is supplied, the operation will return
							document types that are scoped to the supplied library. If a value of All is supplied, you will
							get both the document types that are scoped to the supplied library and those scoped to the
							application root library.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getDocumentTypes">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="libraryId" nillable="true" type="xsd:string"/>
						<xsd:element name="libraryPath" nillable="true" type="xsd:string"/>
						<xsd:element name="extensionFilter" nillable="true" type="xsd:string"/>
						<xsd:element name="docTypeOption" nillable="true" type="clbsvc:ClbDocTypeOption"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getDocumentTypesResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getDocumentTypesReturn" nillable="false" type="clbsvc:ClbDocumentTypesResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getDocumentURL operation is used to obtain a URL to a document. The returned URL can be
					a download or a view URL, which is controlled by the mode parameter. The URL can also be SSL or just
					http, which is controlled by the secureURL parameter. This operation can be called by id, path or a 
					combination of id and path. If only an id is provided, the id must be the uuid of the document. If only 
					a path is provided, that path must be the absolute path to the document. If an id and path are both 
					provided, the id must be the uuid of a folder that is a parent to the document and the path must be the 
					relative path from the parent folder.

					Parameters:
						id - The uuid of the document if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the document. 
						path - The absolute path to the document if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						mode - Indicates if the returned URL should bring up a web page to view the document, or if
							the URL should prompt the user to download the document.
						secureURL - If true, the returned URL will be prefixed with https.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getDocumentURL">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
						<xsd:element name="mode" nillable="false" type="clbmodel:ClbContentURLMode"/>
						<xsd:element name="secureURL" nillable="false" type="xsd:boolean"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getDocumentURLResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getDocumentURLReturn" nillable="false" type="clbsvc:ClbContentURLResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getView operation retrieves the requested ClbView and returns it in the ClbViewResponse.

					Parameters:
						viewId - The uuid of the view to return.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getView">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="viewId" nillable="false" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getViewResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getViewReturn" nillable="false" type="clbsvc:ClbViewResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getAllViews operation returns all views in the specified folder/library.

					Parameters:
						folderId - The uuid of the folder/library that contains the requested views.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getAllViews">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="folderId" nillable="false" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getAllViewsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getAllViewsReturn" nillable="false" type="clbsvc:ClbViewsResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getPrivateViews operation returns the private views in the specified folder/library.

					Parameters:
						folderId - The uuid of the folder/library that contains the requested views.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getPrivateViews">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="folderId" nillable="false" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getPrivateViewsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getPrivateViewsReturn" nillable="false" type="clbsvc:ClbViewsResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getSharedViews operation returns the shared views in the specified folder/library.

					Parameters:
						folderId - The uuid of the folder/library that contains the requested views.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getSharedViews">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="folderId" nillable="false" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getSharedViewsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getSharedViewsReturn" nillable="false" type="clbsvc:ClbViewsResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The executeView operation takes the specified view uuid, executes that view, and returns the results
					in the ClbViewResultsResponse.

					Parameters:
						viewId - The uuid of the view to execute.
						serviceOptions - Multiple service options can be provided to control the returned results.
							The supported values are None, IncludeReferences, IncludePermissions, 
							ResolveLockOwner							RetrieveViewURL, RetrieveByIdOrAbsPath and RetrievePathRelativeToLibraryId
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="executeView">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="viewId" nillable="false" type="xsd:string"/>
						<xsd:element name="serviceOptions" minOccurs="0" maxOccurs="unbounded" type="clbsvc:ClbServiceOption"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="executeViewResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="executeViewReturn" nillable="false" type="clbsvc:ClbViewResultsResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getViewFormat operation takes the specified view uuid and returns the view format in the 
					ClbViewFormatResponse

					Parameters:
						viewId - The uuid of the view to get the view format of.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getViewFormat">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="viewId" nillable="false" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getViewFormatResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getViewFormatReturn" nillable="false" type="clbsvc:ClbViewFormatResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>Element definitions for the LibraryService</xsd:documentation>
			</xsd:annotation>

			<xsd:annotation>
				<xsd:documentation>
					The getApplicationRoot operation is used to obtain the default application root library. The ClbLibrary
					is returned in the ClbLibraryResponse.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getApplicationRoot">
				<xsd:complexType>
					<xsd:sequence/>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getApplicationRootResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getApplicationRootReturn" nillable="false" type="clbsvc:ClbLibraryResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getBusinessComponent operation retrieves the requested ClbLibrary and returns it in the 
					ClbLibraryResponse. This operation can be called by id, path or a combination of id and path. 
					If only an id is provided, the id must be the uuid of the ClbLibrary to retrieve. If only a path 
					is provided, that path must be the absolute path to the ClbLibrary to retrieve. If an id and path 
					are both provided, the id must be the uuid of a folder that is a parent to the ClbLibrary and the 
					path must be the relative path from the parent folder.

					Parameters:
						id - The uuid of the business component if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent folder to the business component. 
						path - The absolute path to the business component if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getBusinessComponent">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="id" nillable="true" type="xsd:string"/>
						<xsd:element name="path" nillable="true" type="xsd:string"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:element name="getBusinessComponentResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getBusinessComponentReturn" nillable="false" type="clbsvc:ClbLibraryResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

			<xsd:annotation>
				<xsd:documentation>
					The getBusinessComponents operation is used to obtain a list of business components. If a list of 
					business components are needed across all libraries, then null can be passed for the libraryId and 
					libraryPath parameters. Otherwise, the returned business components will be scoped under the specified
					library.

					Parameters:
						libraryId - The uuid of the parent library if no path is provided. If both id and path 
							are provided, the id must be the uuid of the parent library of the target library. 
						libraryPath - The absolute path to the parent library if no id is provided. If both id and path are 
							provided, the path must be the relative path from the id provided.
						categoryTypes - The business components that are returned can be filtered based on category 
							types using this parameter.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:element name="getBusinessComponents">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="libraryId" nillable="true" type="xsd:string"/>
						<xsd:element name="libraryPath" nillable="true" type="xsd:string"/>
						<xsd:element name="categoryTypes" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbCategoryType"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

		<xsd:element name="getBusinessComponentsByPage">
			<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="libraryId" nillable="true" type="xsd:string"/>
							<xsd:element name="libraryPath" nillable="true" type="xsd:string"/>
							<xsd:element name="categoryTypes" minOccurs="0" maxOccurs="unbounded" type="clbmodel:ClbCategoryType"/>
							<xsd:element name="pageParams" nillable="true" type="clbsvc:PageParams"/>
						</xsd:sequence>
			</xsd:complexType>
		</xsd:element>

			<xsd:element name="getBusinessComponentsResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getBusinessComponentsReturn" nillable="false" type="clbsvc:ClbLibrariesResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>

		<xsd:element name="getBusinessComponentsByPageResponse">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="getBusinessComponentsByPageReturn" nillable="false" type="clbsvc:ClbLibrariesByPageResponse"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:schema>

	</wsdl:types>

	<!-- Begin messages for the ContentService -->

	<wsdl:message name="LoginException">
		<wsdl:part element="clbexc:LoginException" name="LoginException"/>
	</wsdl:message>

	<wsdl:message name="ServiceException">
		<wsdl:part element="clbexc:ServiceException" name="ServiceException"/>
	</wsdl:message>

	<wsdl:message name="getUserRequest">
		<wsdl:part element="clbsvc:getUser" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getUserResponse">
		<wsdl:part element="clbsvc:getUserResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getUsersRequest">
		<wsdl:part element="clbsvc:getUsers" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getUsersResponse">
		<wsdl:part element="clbsvc:getUsersResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getServerInfoRequest">
		<wsdl:part element="clbsvc:getServerInfo" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getServerInfoResponse">
		<wsdl:part element="clbsvc:getServerInfoResponse" name="parameters"/>
	</wsdl:message>

	<!-- Begin messages for the DocumentService -->

	<wsdl:message name="getDocumentRequest">
		<wsdl:part element="clbsvc:getDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentResponse">
		<wsdl:part element="clbsvc:getDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentsRequest">
		<wsdl:part element="clbsvc:getDocuments" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentsResponse">
		<wsdl:part element="clbsvc:getDocumentsResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getLockedDocumentsRequest">
		<wsdl:part element="clbsvc:getLockedDocuments" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getLockedDocumentsResponse">
		<wsdl:part element="clbsvc:getLockedDocumentsResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentVersionsRequest">
		<wsdl:part element="clbsvc:getDocumentVersions" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentVersionsResponse">
		<wsdl:part element="clbsvc:getDocumentVersionsResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentVersionRequest">
		<wsdl:part element="clbsvc:getDocumentVersion" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentVersionResponse">
		<wsdl:part element="clbsvc:getDocumentVersionResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="restoreVersionRequest">
		<wsdl:part element="clbsvc:restoreVersion" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="restoreVersionResponse">
		<wsdl:part element="clbsvc:restoreVersionResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="createVersionRequest">
		<wsdl:part element="clbsvc:createVersion" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="createVersionResponse">
		<wsdl:part element="clbsvc:createVersionResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="addVersionLabelRequest">
		<wsdl:part element="clbsvc:addVersionLabel" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="addVersionLabelResponse">
		<wsdl:part element="clbsvc:addVersionLabelResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="removeVersionLabelRequest">
		<wsdl:part element="clbsvc:removeVersionLabel" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="removeVersionLabelResponse">
		<wsdl:part element="clbsvc:removeVersionLabelResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="deleteDocumentRequest">
		<wsdl:part element="clbsvc:deleteDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="deleteDocumentResponse">
		<wsdl:part element="clbsvc:deleteDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="copyDocumentRequest">
		<wsdl:part element="clbsvc:copyDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="copyDocumentResponse">
		<wsdl:part element="clbsvc:copyDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="moveDocumentRequest">
		<wsdl:part element="clbsvc:moveDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="moveDocumentResponse">
		<wsdl:part element="clbsvc:moveDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="renameDocumentRequest">
		<wsdl:part element="clbsvc:renameDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="renameDocumentResponse">
		<wsdl:part element="clbsvc:renameDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="lockDocumentRequest">
		<wsdl:part element="clbsvc:lockDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="lockDocumentResponse">
		<wsdl:part element="clbsvc:lockDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="unlockDocumentRequest">
		<wsdl:part element="clbsvc:unlockDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="unlockDocumentResponse">
		<wsdl:part element="clbsvc:unlockDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="createDocumentRequest">
		<wsdl:part element="clbsvc:createDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="createDocumentResponse">
		<wsdl:part element="clbsvc:createDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="updateDocumentRequest">
		<wsdl:part element="clbsvc:updateDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="updateDocumentResponse">
		<wsdl:part element="clbsvc:updateDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="checkoutDocumentRequest">
		<wsdl:part element="clbsvc:checkoutDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="checkoutDocumentResponse">
		<wsdl:part element="clbsvc:checkoutDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="checkinDocumentRequest">
		<wsdl:part element="clbsvc:checkinDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="checkinDocumentResponse">
		<wsdl:part element="clbsvc:checkinDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="cancelDocumentRequest">
		<wsdl:part element="clbsvc:cancelDocument" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="cancelDocumentResponse">
		<wsdl:part element="clbsvc:cancelDocumentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="approveDraftRequest">
		<wsdl:part element="clbsvc:approveDraft" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="approveDraftResponse">
		<wsdl:part element="clbsvc:approveDraftResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="submitDraftRequest">
		<wsdl:part element="clbsvc:submitDraft" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="submitDraftResponse">
		<wsdl:part element="clbsvc:submitDraftResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="rejectDraftRequest">
		<wsdl:part element="clbsvc:rejectDraft" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="rejectDraftResponse">
		<wsdl:part element="clbsvc:rejectDraftResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="createDraftRequest">
		<wsdl:part element="clbsvc:createDraft" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="createDraftResponse">
		<wsdl:part element="clbsvc:createDraftResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDraftRequest">
		<wsdl:part element="clbsvc:getDraft" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDraftResponse">
		<wsdl:part element="clbsvc:getDraftResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="updateDraftRequest">
		<wsdl:part element="clbsvc:updateDraft" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="updateDraftResponse">
		<wsdl:part element="clbsvc:updateDraftResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getPrivateDraftsRequest">
		<wsdl:part element="clbsvc:getPrivateDrafts" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getPrivateDraftsResponse">
		<wsdl:part element="clbsvc:getPrivateDraftsResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getSubmittedDraftsRequest">
		<wsdl:part element="clbsvc:getSubmittedDrafts" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getSubmittedDraftsResponse">
		<wsdl:part element="clbsvc:getSubmittedDraftsResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getApproveDraftsRequest">
		<wsdl:part element="clbsvc:getApproveDrafts" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getApproveDraftsResponse">
		<wsdl:part element="clbsvc:getApproveDraftsResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getFolderRequest">
		<wsdl:part element="clbsvc:getFolder" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getFolderResponse">
		<wsdl:part element="clbsvc:getFolderResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getFoldersRequest">
		<wsdl:part element="clbsvc:getFolders" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getFoldersResponse">
		<wsdl:part element="clbsvc:getFoldersResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getTreeRequest">
		<wsdl:part element="clbsvc:getTree" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getTreeResponse">
		<wsdl:part element="clbsvc:getTreeResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="createFolderRequest">
		<wsdl:part element="clbsvc:createFolder" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="createFolderResponse">
		<wsdl:part element="clbsvc:createFolderResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="updateFolderRequest">
		<wsdl:part element="clbsvc:updateFolder" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="updateFolderResponse">
		<wsdl:part element="clbsvc:updateFolderResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="deleteFolderRequest">
		<wsdl:part element="clbsvc:deleteFolder" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="deleteFolderResponse">
		<wsdl:part element="clbsvc:deleteFolderResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="copyFolderRequest">
		<wsdl:part element="clbsvc:copyFolder" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="copyFolderResponse">
		<wsdl:part element="clbsvc:copyFolderResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="moveFolderRequest">
		<wsdl:part element="clbsvc:moveFolder" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="moveFolderResponse">
		<wsdl:part element="clbsvc:moveFolderResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="renameFolderRequest">
		<wsdl:part element="clbsvc:renameFolder" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="renameFolderResponse">
		<wsdl:part element="clbsvc:renameFolderResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getFolderURLRequest">
		<wsdl:part element="clbsvc:getFolderURL" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getFolderURLResponse">
		<wsdl:part element="clbsvc:getFolderURLResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getPropertySheetTypeRequest">
		<wsdl:part element="clbsvc:getPropertySheetType" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getPropertySheetTypeResponse">
		<wsdl:part element="clbsvc:getPropertySheetTypeResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentTypeRequest">
		<wsdl:part element="clbsvc:getDocumentType" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentTypeResponse">
		<wsdl:part element="clbsvc:getDocumentTypeResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentTypesRequest">
		<wsdl:part element="clbsvc:getDocumentTypes" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentTypesResponse">
		<wsdl:part element="clbsvc:getDocumentTypesResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentURLRequest">
		<wsdl:part element="clbsvc:getDocumentURL" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getDocumentURLResponse">
		<wsdl:part element="clbsvc:getDocumentURLResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getViewRequest">
		<wsdl:part element="clbsvc:getView" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getViewResponse">
		<wsdl:part element="clbsvc:getViewResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getAllViewsRequest">
		<wsdl:part element="clbsvc:getAllViews" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getAllViewsResponse">
		<wsdl:part element="clbsvc:getAllViewsResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getPrivateViewsRequest">
		<wsdl:part element="clbsvc:getPrivateViews" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getPrivateViewsResponse">
		<wsdl:part element="clbsvc:getPrivateViewsResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getSharedViewsRequest">
		<wsdl:part element="clbsvc:getSharedViews" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getSharedViewsResponse">
		<wsdl:part element="clbsvc:getSharedViewsResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="executeViewRequest">
		<wsdl:part element="clbsvc:executeView" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="executeViewResponse">
		<wsdl:part element="clbsvc:executeViewResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getViewFormatRequest">
		<wsdl:part element="clbsvc:getViewFormat" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getViewFormatResponse">
		<wsdl:part element="clbsvc:getViewFormatResponse" name="parameters"/>
	</wsdl:message>

	<!-- Begin messages for the LibraryService -->

	<wsdl:message name="getApplicationRootRequest">
		<wsdl:part element="clbsvc:getApplicationRoot" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getApplicationRootResponse">
		<wsdl:part element="clbsvc:getApplicationRootResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getBusinessComponentRequest">
		<wsdl:part element="clbsvc:getBusinessComponent" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getBusinessComponentResponse">
		<wsdl:part element="clbsvc:getBusinessComponentResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getBusinessComponentsRequest">
		<wsdl:part element="clbsvc:getBusinessComponents" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getBusinessComponentsByPageResponse">
		<wsdl:part element="clbsvc:getBusinessComponentsByPageResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getBusinessComponentsByPageRequest">
		<wsdl:part element="clbsvc:getBusinessComponentsByPage" name="parameters"/>
	</wsdl:message>

	<wsdl:message name="getBusinessComponentsResponse">
		<wsdl:part element="clbsvc:getBusinessComponentsResponse" name="parameters"/>
	</wsdl:message>

	<wsdl:portType name="ContentService">

		<wsdl:operation name="getUser">
			<wsdl:input message="clbsvc:getUserRequest" name="getUserRequest"/>
			<wsdl:output message="clbsvc:getUserResponse" name="getUserResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getUsers">
			<wsdl:input message="clbsvc:getUsersRequest" name="getUsersRequest"/>
			<wsdl:output message="clbsvc:getUsersResponse" name="getUsersResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getServerInfo">
			<wsdl:input message="clbsvc:getServerInfoRequest" name="getServerInfoRequest"/>
			<wsdl:output message="clbsvc:getServerInfoResponse" name="getServerInfoResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

	</wsdl:portType>

	<wsdl:portType name="DocumentService">

		<wsdl:operation name="getDocument">
			<wsdl:input message="clbsvc:getDocumentRequest" name="getDocumentRequest"/>
			<wsdl:output message="clbsvc:getDocumentResponse" name="getDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getDocuments">
			<wsdl:input message="clbsvc:getDocumentsRequest" name="getDocumentsRequest"/>
			<wsdl:output message="clbsvc:getDocumentsResponse" name="getDocumentsResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getLockedDocuments">
			<wsdl:input message="clbsvc:getLockedDocumentsRequest" name="getLockedDocumentsRequest"/>
			<wsdl:output message="clbsvc:getLockedDocumentsResponse" name="getLockedDocumentsResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getDocumentVersions">
			<wsdl:input message="clbsvc:getDocumentVersionsRequest" name="getDocumentVersionsRequest"/>
			<wsdl:output message="clbsvc:getDocumentVersionsResponse" name="getDocumentVersionsResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getDocumentVersion">
			<wsdl:input message="clbsvc:getDocumentVersionRequest" name="getDocumentVersionRequest"/>
			<wsdl:output message="clbsvc:getDocumentVersionResponse" name="getDocumentVersionResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="restoreVersion">
			<wsdl:input message="clbsvc:restoreVersionRequest" name="restoreVersionRequest"/>
			<wsdl:output message="clbsvc:restoreVersionResponse" name="restoreVersionResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="createVersion">
			<wsdl:input message="clbsvc:createVersionRequest" name="createVersionRequest"/>
			<wsdl:output message="clbsvc:createVersionResponse" name="createVersionResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="addVersionLabel">
			<wsdl:input message="clbsvc:addVersionLabelRequest" name="addVersionLabelRequest"/>
			<wsdl:output message="clbsvc:addVersionLabelResponse" name="addVersionLabelResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="removeVersionLabel">
			<wsdl:input message="clbsvc:removeVersionLabelRequest" name="removeVersionLabelRequest"/>
			<wsdl:output message="clbsvc:removeVersionLabelResponse" name="removeVersionLabelResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="deleteDocument">
			<wsdl:input message="clbsvc:deleteDocumentRequest" name="deleteDocumentRequest"/>
			<wsdl:output message="clbsvc:deleteDocumentResponse" name="deleteDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="copyDocument">
			<wsdl:input message="clbsvc:copyDocumentRequest" name="copyDocumentRequest"/>
			<wsdl:output message="clbsvc:copyDocumentResponse" name="copyDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="moveDocument">
			<wsdl:input message="clbsvc:moveDocumentRequest" name="moveDocumentRequest"/>
			<wsdl:output message="clbsvc:moveDocumentResponse" name="moveDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="renameDocument">
			<wsdl:input message="clbsvc:renameDocumentRequest" name="renameDocumentRequest"/>
			<wsdl:output message="clbsvc:renameDocumentResponse" name="renameDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="lockDocument">
			<wsdl:input message="clbsvc:lockDocumentRequest" name="lockDocumentRequest"/>
			<wsdl:output message="clbsvc:lockDocumentResponse" name="lockDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="unlockDocument">
			<wsdl:input message="clbsvc:unlockDocumentRequest" name="unlockDocumentRequest"/>
			<wsdl:output message="clbsvc:unlockDocumentResponse" name="unlockDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="createDocument">
			<wsdl:input message="clbsvc:createDocumentRequest" name="createDocumentRequest"/>
			<wsdl:output message="clbsvc:createDocumentResponse" name="createDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="updateDocument">
			<wsdl:input message="clbsvc:updateDocumentRequest" name="updateDocumentRequest"/>
			<wsdl:output message="clbsvc:updateDocumentResponse" name="updateDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="checkoutDocument">
			<wsdl:input message="clbsvc:checkoutDocumentRequest" name="checkoutDocumentRequest"/>
			<wsdl:output message="clbsvc:checkoutDocumentResponse" name="checkoutDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="checkinDocument">
			<wsdl:input message="clbsvc:checkinDocumentRequest" name="checkinDocumentRequest"/>
			<wsdl:output message="clbsvc:checkinDocumentResponse" name="checkinDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="cancelDocument">
			<wsdl:input message="clbsvc:cancelDocumentRequest" name="cancelDocumentRequest"/>
			<wsdl:output message="clbsvc:cancelDocumentResponse" name="cancelDocumentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="approveDraft">
			<wsdl:input message="clbsvc:approveDraftRequest" name="approveDraftRequest"/>
			<wsdl:output message="clbsvc:approveDraftResponse" name="approveDraftResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="submitDraft">
			<wsdl:input message="clbsvc:submitDraftRequest" name="submitDraftRequest"/>
			<wsdl:output message="clbsvc:submitDraftResponse" name="submitDraftResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="rejectDraft">
			<wsdl:input message="clbsvc:rejectDraftRequest" name="rejectDraftRequest"/>
			<wsdl:output message="clbsvc:rejectDraftResponse" name="rejectDraftResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="createDraft">
			<wsdl:input message="clbsvc:createDraftRequest" name="createDraftRequest"/>
			<wsdl:output message="clbsvc:createDraftResponse" name="createDraftResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getDraft">
			<wsdl:input message="clbsvc:getDraftRequest" name="getDraftRequest"/>
			<wsdl:output message="clbsvc:getDraftResponse" name="getDraftResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="updateDraft">
			<wsdl:input message="clbsvc:updateDraftRequest" name="updateDraftRequest"/>
			<wsdl:output message="clbsvc:updateDraftResponse" name="updateDraftResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getPrivateDrafts">
			<wsdl:input message="clbsvc:getPrivateDraftsRequest" name="getPrivateDraftsRequest"/>
			<wsdl:output message="clbsvc:getPrivateDraftsResponse" name="getPrivateDraftsResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getSubmittedDrafts">
			<wsdl:input message="clbsvc:getSubmittedDraftsRequest" name="getSubmittedDraftsRequest"/>
			<wsdl:output message="clbsvc:getSubmittedDraftsResponse" name="getSubmittedDraftsResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getApproveDrafts">
			<wsdl:input message="clbsvc:getApproveDraftsRequest" name="getApproveDraftsRequest"/>
			<wsdl:output message="clbsvc:getApproveDraftsResponse" name="getApproveDraftsResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getFolder">
			<wsdl:input message="clbsvc:getFolderRequest" name="getFolderRequest"/>
			<wsdl:output message="clbsvc:getFolderResponse" name="getFolderResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getFolders">
			<wsdl:input message="clbsvc:getFoldersRequest" name="getFoldersRequest"/>
			<wsdl:output message="clbsvc:getFoldersResponse" name="getFoldersResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getTree">
			<wsdl:input message="clbsvc:getTreeRequest" name="getTreeRequest"/>
			<wsdl:output message="clbsvc:getTreeResponse" name="getTreeResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="createFolder">
			<wsdl:input message="clbsvc:createFolderRequest" name="createFolderRequest"/>
			<wsdl:output message="clbsvc:createFolderResponse" name="createFolderResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="updateFolder">
			<wsdl:input message="clbsvc:updateFolderRequest" name="updateFolderRequest"/>
			<wsdl:output message="clbsvc:updateFolderResponse" name="updateFolderResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="deleteFolder">
			<wsdl:input message="clbsvc:deleteFolderRequest" name="deleteFolderRequest"/>
			<wsdl:output message="clbsvc:deleteFolderResponse" name="deleteFolderResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="copyFolder">
			<wsdl:input message="clbsvc:copyFolderRequest" name="copyFolderRequest"/>
			<wsdl:output message="clbsvc:copyFolderResponse" name="copyFolderResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="moveFolder">
			<wsdl:input message="clbsvc:moveFolderRequest" name="moveFolderRequest"/>
			<wsdl:output message="clbsvc:moveFolderResponse" name="moveFolderResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="renameFolder">
			<wsdl:input message="clbsvc:renameFolderRequest" name="renameFolderRequest"/>
			<wsdl:output message="clbsvc:renameFolderResponse" name="renameFolderResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getFolderURL">
			<wsdl:input message="clbsvc:getFolderURLRequest" name="getFolderURLRequest"/>
			<wsdl:output message="clbsvc:getFolderURLResponse" name="getFolderURLResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getPropertySheetType">
			<wsdl:input message="clbsvc:getPropertySheetTypeRequest" name="getPropertySheetTypeRequest"/>
			<wsdl:output message="clbsvc:getPropertySheetTypeResponse" name="getPropertySheetTypeResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getDocumentType">
			<wsdl:input message="clbsvc:getDocumentTypeRequest" name="getDocumentTypeRequest"/>
			<wsdl:output message="clbsvc:getDocumentTypeResponse" name="getDocumentTypeResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getDocumentTypes">
			<wsdl:input message="clbsvc:getDocumentTypesRequest" name="getDocumentTypesRequest"/>
			<wsdl:output message="clbsvc:getDocumentTypesResponse" name="getDocumentTypesResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getDocumentURL">
			<wsdl:input message="clbsvc:getDocumentURLRequest" name="getDocumentURLRequest"/>
			<wsdl:output message="clbsvc:getDocumentURLResponse" name="getDocumentURLResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getView">
			<wsdl:input message="clbsvc:getViewRequest" name="getViewRequest"/>
			<wsdl:output message="clbsvc:getViewResponse" name="getViewResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getAllViews">
			<wsdl:input message="clbsvc:getAllViewsRequest" name="getAllViewsRequest"/>
			<wsdl:output message="clbsvc:getAllViewsResponse" name="getAllViewsResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getPrivateViews">
			<wsdl:input message="clbsvc:getPrivateViewsRequest" name="getPrivateViewsRequest"/>
			<wsdl:output message="clbsvc:getPrivateViewsResponse" name="getPrivateViewsResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getSharedViews">
			<wsdl:input message="clbsvc:getSharedViewsRequest" name="getSharedViewsRequest"/>
			<wsdl:output message="clbsvc:getSharedViewsResponse" name="getSharedViewsResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="executeView">
			<wsdl:input message="clbsvc:executeViewRequest" name="executeViewRequest"/>
			<wsdl:output message="clbsvc:executeViewResponse" name="executeViewResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getViewFormat">
			<wsdl:input message="clbsvc:getViewFormatRequest" name="getViewFormatRequest"/>
			<wsdl:output message="clbsvc:getViewFormatResponse" name="getViewFormatResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

	</wsdl:portType>

	<wsdl:portType name="LibraryService">

		<wsdl:operation name="getApplicationRoot">
			<wsdl:input message="clbsvc:getApplicationRootRequest" name="getApplicationRootRequest"/>
			<wsdl:output message="clbsvc:getApplicationRootResponse" name="getApplicationRootResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getBusinessComponent">
			<wsdl:input message="clbsvc:getBusinessComponentRequest" name="getBusinessComponentRequest"/>
			<wsdl:output message="clbsvc:getBusinessComponentResponse" name="getBusinessComponentResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getBusinessComponents">
			<wsdl:input message="clbsvc:getBusinessComponentsRequest" name="getBusinessComponentsRequest"/>
			<wsdl:output message="clbsvc:getBusinessComponentsResponse" name="getBusinessComponentsResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>

		<wsdl:operation name="getBusinessComponentsByPage">
			<wsdl:input message="clbsvc:getBusinessComponentsByPageRequest" name="getBusinessComponentsByPageRequest"/>
			<wsdl:output message="clbsvc:getBusinessComponentsByPageResponse" name="getBusinessComponentsByPageResponse"/>
			<wsdl:fault message="clbsvc:LoginException" name="LoginException"/>
			<wsdl:fault message="clbsvc:ServiceException" name="ServiceException"/>
		</wsdl:operation>
	</wsdl:portType>

	<wsdl:binding name="ContentServiceSOAP" type="clbsvc:ContentService">

		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

		<wsdl:operation name="getUser">
			<soap:operation soapAction=""/>
			<wsdl:input name="getUserRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getUserResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getUsers">
			<soap:operation soapAction=""/>
			<wsdl:input name="getUsersRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getUsersResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getServerInfo">
			<soap:operation soapAction=""/>
			<wsdl:input name="getServerInfoRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getServerInfoResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

	</wsdl:binding>

	<wsdl:binding name="DocumentServiceSOAP" type="clbsvc:DocumentService">

		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

		<wsdl:operation name="getDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="getDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getDocuments">
			<soap:operation soapAction=""/>
			<wsdl:input name="getDocumentsRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getDocumentsResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getLockedDocuments">
			<soap:operation soapAction=""/>
			<wsdl:input name="getLockedDocumentsRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getLockedDocumentsResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getDocumentVersions">
			<soap:operation soapAction=""/>
			<wsdl:input name="getDocumentVersionsRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getDocumentVersionsResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getDocumentVersion">
			<soap:operation soapAction=""/>
			<wsdl:input name="getDocumentVersionRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getDocumentVersionResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="restoreVersion">
			<soap:operation soapAction=""/>
			<wsdl:input name="restoreVersionRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="restoreVersionResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="createVersion">
			<soap:operation soapAction=""/>
			<wsdl:input name="createVersionRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="createVersionResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="addVersionLabel">
			<soap:operation soapAction=""/>
			<wsdl:input name="addVersionLabelRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="addVersionLabelResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="removeVersionLabel">
			<soap:operation soapAction=""/>
			<wsdl:input name="removeVersionLabelRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="removeVersionLabelResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="deleteDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="deleteDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="deleteDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="copyDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="copyDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="copyDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="moveDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="moveDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="moveDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="renameDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="renameDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="renameDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="lockDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="lockDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="lockDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="unlockDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="unlockDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="unlockDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="createDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="createDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="createDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="updateDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="updateDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="updateDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="checkoutDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="checkoutDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="checkoutDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="checkinDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="checkinDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="checkinDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="cancelDocument">
			<soap:operation soapAction=""/>
			<wsdl:input name="cancelDocumentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="cancelDocumentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="approveDraft">
			<soap:operation soapAction=""/>
			<wsdl:input name="approveDraftRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="approveDraftResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="submitDraft">
			<soap:operation soapAction=""/>
			<wsdl:input name="submitDraftRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="submitDraftResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="rejectDraft">
			<soap:operation soapAction=""/>
			<wsdl:input name="rejectDraftRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="rejectDraftResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="createDraft">
			<soap:operation soapAction=""/>
			<wsdl:input name="createDraftRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="createDraftResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getDraft">
			<soap:operation soapAction=""/>
			<wsdl:input name="getDraftRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getDraftResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="updateDraft">
			<soap:operation soapAction=""/>
			<wsdl:input name="updateDraftRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="updateDraftResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getPrivateDrafts">
			<soap:operation soapAction=""/>
			<wsdl:input name="getPrivateDraftsRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getPrivateDraftsResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getSubmittedDrafts">
			<soap:operation soapAction=""/>
			<wsdl:input name="getSubmittedDraftsRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getSubmittedDraftsResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getApproveDrafts">
			<soap:operation soapAction=""/>
			<wsdl:input name="getApproveDraftsRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getApproveDraftsResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getFolder">
			<soap:operation soapAction=""/>
			<wsdl:input name="getFolderRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getFolderResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getFolders">
			<soap:operation soapAction=""/>
			<wsdl:input name="getFoldersRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getFoldersResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getTree">
			<soap:operation soapAction=""/>
			<wsdl:input name="getTreeRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getTreeResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="createFolder">
			<soap:operation soapAction=""/>
			<wsdl:input name="createFolderRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="createFolderResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="updateFolder">
			<soap:operation soapAction=""/>
			<wsdl:input name="updateFolderRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="updateFolderResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="deleteFolder">
			<soap:operation soapAction=""/>
			<wsdl:input name="deleteFolderRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="deleteFolderResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="copyFolder">
			<soap:operation soapAction=""/>
			<wsdl:input name="copyFolderRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="copyFolderResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="moveFolder">
			<soap:operation soapAction=""/>
			<wsdl:input name="moveFolderRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="moveFolderResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="renameFolder">
			<soap:operation soapAction=""/>
			<wsdl:input name="renameFolderRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="renameFolderResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getFolderURL">
			<soap:operation soapAction=""/>
			<wsdl:input name="getFolderURLRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getFolderURLResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getPropertySheetType">
			<soap:operation soapAction=""/>
			<wsdl:input name="getPropertySheetTypeRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getPropertySheetTypeResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getDocumentType">
			<soap:operation soapAction=""/>
			<wsdl:input name="getDocumentTypeRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getDocumentTypeResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getDocumentTypes">
			<soap:operation soapAction=""/>
			<wsdl:input name="getDocumentTypesRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getDocumentTypesResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getDocumentURL">
			<soap:operation soapAction=""/>
			<wsdl:input name="getDocumentURLRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getDocumentURLResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getView">
			<soap:operation soapAction=""/>
			<wsdl:input name="getViewRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getViewResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getAllViews">
			<soap:operation soapAction=""/>
			<wsdl:input name="getAllViewsRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getAllViewsResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getPrivateViews">
			<soap:operation soapAction=""/>
			<wsdl:input name="getPrivateViewsRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getPrivateViewsResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getSharedViews">
			<soap:operation soapAction=""/>
			<wsdl:input name="getSharedViewsRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getSharedViewsResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="executeView">
			<soap:operation soapAction=""/>
			<wsdl:input name="executeViewRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="executeViewResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getViewFormat">
			<soap:operation soapAction=""/>
			<wsdl:input name="getViewFormatRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getViewFormatResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

	</wsdl:binding>

	<wsdl:binding name="LibraryServiceSOAP" type="clbsvc:LibraryService">

		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

		<wsdl:operation name="getApplicationRoot">
			<soap:operation soapAction=""/>
			<wsdl:input name="getApplicationRootRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getApplicationRootResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getBusinessComponent">
			<soap:operation soapAction=""/>
			<wsdl:input name="getBusinessComponentRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getBusinessComponentResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getBusinessComponents">
			<soap:operation soapAction=""/>
			<wsdl:input name="getBusinessComponentsRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getBusinessComponentsResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getBusinessComponentsByPage">
			<soap:operation soapAction=""/>
			<wsdl:input name="getBusinessComponentsByPageRequest">
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output name="getBusinessComponentsByPageResponse">
				<soap:body use="literal"/>
			</wsdl:output>
			<wsdl:fault name="LoginException">
				<soap:fault name="LoginException" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ServiceException">
				<soap:fault name="ServiceException" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>
	</wsdl:binding>

	<wsdl:service name="DocumentService">

		<wsdl:port binding="clbsvc:DocumentServiceSOAP" name="DocumentService">
			<soap:address location="http://localhost:10038/dm/services/DocumentService"/>
		</wsdl:port>

	</wsdl:service>

	<wsdl:service name="ContentService">

		<wsdl:port binding="clbsvc:ContentServiceSOAP" name="ContentService">
			<soap:address location="http://localhost:10038/dm/services/ContentService"/>
		</wsdl:port>

	</wsdl:service>

	<wsdl:service name="LibraryService">

		<wsdl:port binding="clbsvc:LibraryServiceSOAP" name="LibraryService">
			<soap:address location="http://localhost:10038/dm/services/LibraryService"/>
		</wsdl:port>

	</wsdl:service>

</wsdl:definitions>
