<project name="continuous"
         default="continuous" >

   <!-- ********************************** -->
   <!-- ** Initialisation/Configuration ** -->
   <!-- ********************************** -->

   <import file="build.xml" />

   <target name="init" 
           depends="alfresco.init">
      <property file="continuous.properties"/>
   </target>
	
   <target name="bootstrap-wcm-test" depends="init" >
   	  <!-- enable wcm for unit tests -->
   	  <echo message="enable wcm for tests" />
      <copy file="${file.name.wcm.bootstrap}" todir="${dir.project.repository}/${dir.name.source}/${dir.name.test.resources}/alfresco/extension" />
   </target>

   <target name="init-test" 
           depends="init,bootstrap-wcm-test">
      <mkdir dir="${dir.continuous.dist}" />
   </target>


   <!-- ********************** -->
   <!-- ** Cleaning targets ** -->
   <!-- ********************** -->

   <target name="clean-continuous"
           description="Cleans just the continuous build area" 
           depends="init">
      <delete quiet="yes" 
              includeEmptyDirs="true" 
              dir="${dir.continuous.build}" />
   </target>

   <!-- *********************** -->
   <!-- ** Top level targets ** -->
   <!-- *********************** -->

   <target name="continuous" 
           description="Performs a full clean, runs all tests and creates all distribution files"
           depends="clean-continuous, 
                    clean, 
                    -reset-database, 
                    set-build-number,
                    init-test, 
                    test, 
                    distribute" />

   <target name="continuous-without-tests" 
           description="Performs a full clean and creates all distribution files"
           depends="clean-continuous, 
                    clean, 
                    -reset-database, 
                    distribute" />

   <target name="distribute" 
           description="Creates the distribution files for all platforms"
           depends="set-build-number, 
                    incremental, 
                    distribute-mmt,
                    distribute-bm-remote,
                    distribute-amps,
                    distribute-tomcat,
                    distribute-war, 
                    distribute-wcm,
                    distribute-sdk, 
                    distribute-webserviceclient,
                    distribute-extensions-office2003,
                    distribute-deployment,
                    distribute-sample-extensions,
                    distribute-installers,
                    distribute-docs,
                    revert-changes" />

   <target name="set-build-number"
           depends="init, set-build-devbox-number, set-revision-number">
      <property file="${dir.project.repository.config}/alfresco/version.properties" />
      <property file="distribute.properties" />
   </target>

   <target name="set-build-devbox-number"
           if="alf.build.number">
      <exec executable="svn">
         <arg line="revert ${dir.project.repository.config}/alfresco/version.properties"/>
      </exec>
      <replace file="${dir.project.repository.config}/alfresco/version.properties"
               token="@build-number@"
               value="${alf.build.number}"
               summary="yes" />
      <copy todir="${dir.project.webscriptframework.config}" 
            file="${dir.project.repository.config}/alfresco/version.properties"
            overwrite="true"/>
   </target>

   <target name="set-revision-number"
           depends="init"
           unless="alf.build.number">
      <taskdef name="svn"
               classname="org.tigris.subversion.svnant.SvnTask">
         <classpath refid="classpath.compile" />
      </taskdef>

      <svn>
         <status path="${basedir}" revisionProperty="svn.revision" />
      </svn>
      <exec executable="svn">
         <arg line="revert ${dir.project.repository.config}/alfresco/version.properties"/>
      </exec>
      <replace file="${dir.project.repository.config}/alfresco/version.properties"
               token="@build-number@"
               value="r${svn.revision}"
               summary="yes" />
      <copy todir="${dir.project.webscriptframework.config}" 
            file="${dir.project.repository.config}/alfresco/version.properties"
            overwrite="true"/>
   </target>

   <target name="set-build-number-cc"
           depends="init"
           if="build.release">
      <replace file="${dir.project.repository.config}/alfresco/version.properties" 
               token="@build-number@" 
               value="${label}" />
      <copy todir="${dir.project.webscriptframework.config}" 
            file="${dir.project.repository.config}/alfresco/version.properties"
            overwrite="true"/>
   </target>

   <target name="revert-changes"
           depends="init">
      <exec executable="svn">
         <arg line="revert ${dir.project.repository.config}/alfresco/version.properties"/>
      </exec>
   </target>

   <target name="generate-checksums"
           description="Generates checksum files for the distibution files" 
           depends="init">
      <delete>
         <fileset dir="${dir.continuous.dist}" 
                  includes="*.MD5"/>
      </delete>
      <checksum>
         <fileset dir="${dir.continuous.dist}"/>
      </checksum>
   </target>

   <!-- **************************************************** -->
   <!-- ** Database targets (for internal script use only)** -->
   <!-- **************************************************** -->
 
  <target name="reset-database" 
          depends="-drop-database, 
                   -create-database" />
   <target name="-reset-database" 
           depends="-drop-database, 
                    -create-database" />

   <target name="-create-database" 
           depends="init">
      <property file="${dir.project.repository.config}/alfresco/repository.properties"/>
      <sql driver="${db.driver}" 
           url="jdbc:mysql:///" 
           classpathref="classpath.compile" 
           print="yes"
           userid="${db.username}" 
           password="${db.password}">
         create database ${db.name};
      </sql>
   </target>

   <target name="-drop-database" 
           depends="init">
      <property file="${dir.project.repository.config}/alfresco/repository.properties"/>
      <sql driver="${db.driver}" 
           url="${db.url}" 
           classpathref="classpath.compile" 
           print="yes"
           userid="${db.username}" 
           password="${db.password}">
         drop database ${db.name};
      </sql>

      <delete verbose="true">
         <fileset dir="${basedir}" 
                  includes="**/alfresco.log" />
      </delete>
      <delete dir="${dir.test.alfdata}" 
              quiet="yes" 
              includeEmptyDirs="true" />
      <delete dir="${dir.project.repository}/alf_data" 
              quiet="yes" 
              includeEmptyDirs="true"  />
      <delete dir="${dir.project.remoteapi}/alf_data" 
              quiet="yes" 
              includeEmptyDirs="true" />
   </target>

   <!-- ***************** -->
   <!-- ** WCM targets ** -->
   <!-- ***************** -->

   <target name="distribute-wcm" 
           description="Creates the distibution files for WCM"
           depends="assemble-virtual,
                    distribute-wcm-windows,
                    distribute-wcm-linux" />


   <target name="distribute-wcm-windows">
      <zip destfile="${dir.continuous.dist}/${file.name.dist.wcm}.zip">
         <zipfileset dir="${dir.continuous.assemble.virtualtomcat}"
                     prefix="virtual-tomcat" />
         <zipfileset dir="${dir.project.installer}"
                     includes="wcm-bootstrap-context.xml" />
         <zipfileset dir="${dir.project.installer.windows}"
                     includes="README_wcm.txt,
                               virtual_start.bat,
                               virtual_stop.bat,
                               virtual_alf.bat" />
         <zipfileset dir="${dir.project.installer}/extras-wcm" 
                     prefix="extras/wcm" />
         <zipfileset dir="${dir.project.webstudio.dist}"
                     includes="${file.name.war.webstudio}"
                     fullpath="tomcat/webapps/${file.name.war.webstudio}" />
      </zip>
   </target>

   <target name="distribute-wcm-linux">
      <tar destfile="${dir.continuous.dist}/${file.name.dist.wcm}.tar.gz" 
           longfile="gnu" 
           compression="gzip">
         <tarfileset dir="${dir.continuous.assemble.virtualtomcat}" 
                     prefix="virtual-tomcat"
                     excludes="**/bin/*.sh,**/bin/*.bat" />
         <tarfileset dir="${dir.continuous.assemble.virtualtomcat}/bin"
                     prefix="virtual-tomcat/bin"
                     includes="*.sh" 
                     mode="755" />
         <tarfileset dir="${dir.project.installer.linux}"
                     includes="README_wcm.txt" />
         <tarfileset dir="${dir.project.installer}"
                     includes="wcm-bootstrap-context.xml" />
         <tarfileset dir="${dir.project.installer.linux}"
                     includes="virtual_alf.sh" 
                     mode="755" />
         <tarfileset dir="${dir.project.installer}/extras-wcm"
                     prefix="extras/wcm" />
         <tarfileset dir="${dir.project.webstudio.dist}"
                     includes="${file.name.war.webstudio}"
                     fullpath="tomcat/webapps/${file.name.war.webstudio}" />
      </tar>
   </target>

   <target name="assemble-virtual"
           depends="init">
      <mkdir dir="${dir.continuous.dist}" />
      <delete quiet="yes"
              includeEmptyDirs="true"
              dir="${dir.continuous.assemble.virtualtomcat}" />
      <unzip src="${dir.name.binaries}/tomcat/${file.name.zip.tomcatvirt.custom}"
             dest="${dir.continuous.assemble}" />
      <move file="${dir.continuous.assemble}/${file.name.base.zip.tomcatvirt.custom}"
            tofile="${dir.continuous.assemble.virtualtomcat}" />
      <move file="${dir.continuous.assemble.virtualtomcat}/server/lib/servlets-ssi.renametojar" 
            tofile="${dir.continuous.assemble.virtualtomcat}/server/lib/servlets-ssi.jar" />
      <deploy-virtual-tomcat location="${dir.continuous.assemble.virtualtomcat}" />
   </target>

   <!-- ******************** -->
   <!-- ** Tomcat targets ** -->
   <!-- ******************** -->

   <target name="distribute-tomcat" 
           description="Creates the distibution files for Tomcat"
           depends="assemble-tomcat,
                    distribute-tomcat-windows,
                    distribute-tomcat-linux" />

   <target name="distribute-tomcat-windows">
      <zip destfile="${dir.continuous.dist}/${file.name.dist.tomcat}.zip">
         <zipfileset dir="${dir.continuous.assemble.tomcat}"
                     prefix="tomcat"
                     excludes="bin/*.sh" />
         <zipfileset dir="${dir.project.installer.windows}"
                     includes="alfresco.bat,
                               alf_start.bat,
                               restart_alf.bat,
                               alf_stop.bat,
                               apply_amps.bat,
                               README_mysql.txt,
                               README.txt" />
         <zipfileset dir="${dir.project.installer}/install_extension"
                     prefix="install_extension" />
         <zipfileset dir="${dir.project.installer}"
                     includes="licenses/**,amps/**" />
         <zipfileset dir="${dir.project.installer.extras}" 
                     prefix="extras"
                     excludes="**/*.sh" />
         <zipfileset dir="${dir.project.installer.binwin}"
                     prefix="bin" />
         <zipfileset dir="${dir.name.binaries.installer.win32}"
                     prefix="bin"
                     excludes="jdk*, OpenOffice*" />
         <zipfileset dir="${dir.project.jlan}/jni"
                     prefix="bin" />
         <zipfileset dir="${dir.continuous.dist}"
                     includes="${file.name.dist.mmt}.jar"
                     fullpath="bin/alfresco-mmt.jar" />
         <zipfileset dir="${dir.continuous.dist}"
                     includes="${file.name.dist.bm-remote}.jar"
                     fullpath="bin/alfresco-bm-remote.jar" />
      </zip>
   </target>

   <target name="distribute-tomcat-linux">
      <tar destfile="${dir.continuous.dist}/${file.name.dist.tomcat}.tar.gz" 
           longfile="gnu" 
           compression="gzip">
         <tarfileset dir="${dir.continuous.assemble.tomcat}"
                     prefix="tomcat" 
                     excludes="bin/*.sh,bin/*.bat,bin/*.exe" />
         <tarfileset dir="${dir.continuous.assemble.tomcat}/bin" 
                     prefix="tomcat/bin"
                     includes="*.sh" 
                     mode="755" />
         <tarfileset dir="${dir.project.installer.builder}/configwizard"
                     includes="output/*.bin" />
         <tarfileset dir="${dir.project.installer}"
                     includes="install_extension/**" />
         <tarfileset dir="${dir.project.installer}"
                     includes="licenses/**,amps/**" />
         <tarfileset dir="${dir.project.installer.linux}"
                     includes="**/*.sh"
                     mode="755" />
         <tarfileset dir="${dir.project.installer.linux}"
                     includes="README.txt,
                               README_mysql.txt,
                               README_osx.txt" />
         <tarfileset dir="${dir.project.installer.extras}"
                     prefix="extras"
                     excludes="**/*.bat" />
         <tarfileset dir="${dir.project.installer.binlin}"
                     prefix="bin" />
         <tarfileset dir="${dir.continuous.dist}"
                     includes="${file.name.dist.mmt}.jar"
                     fullpath="bin/alfresco-mmt.jar" />
         <tarfileset dir="${dir.continuous.dist}"
                     includes="${file.name.dist.bm-remote}.jar"
                     fullpath="bin/alfresco-bm-remote.jar" />
      </tar>
   </target>

   <target name="distribute-installers"
           depends="init, assemble-tomcat, assemble-virtual">
      <delete quiet="yes"
              includeEmptyDirs="true"
              dir="${dir.project.installer.builder}/quick-installer/output" />
      <exec dir="${dir.project.installer.builder}/quick-installer" executable="${file.name.installer129.exe}" output="build/error-ij.txt" failifexecutionfails="false">
         <arg line='-DVersion "${file.name.exe.version}" --platform Windows -DCodeline "${file.name.codeline}" -DIncludes "-Full" --control-script "${file.name.installer.fullijs}" --build --quiet "${file.name.installer.quick}"'/>
      </exec>
      <exec dir="${dir.project.installer.builder}" executable="${file.name.installer129.exe}" output="build/error-ij.txt" failifexecutionfails="false">
         <arg line='-DVersion "${file.name.exe.version}" --platform Windows -DCodeline "${file.name.codeline}" -DIncludes "-OOo" --control-script "${file.name.installer.ooijs}" --build --quiet "${file.name.installer.quick}"'/>
      </exec>
      <exec dir="${dir.project.installer.builder}" executable="${file.name.installer129.exe}" output="build/error-ij.txt" failifexecutionfails="false">
         <arg line='-DVersion "${file.name.exe.version}" -DCodeline "${file.name.codeline}" -DIncludes "-Mini" --control-script "${file.name.installer.coreijs}" --build --quiet "${file.name.installer.quick}"'/>
      </exec>
      <move todir="${dir.continuous.dist}" failonerror="no">
         <fileset dir="${dir.project.installer.builder}/quick-installer/output">
            <include name="**/*"/>
         </fileset>
      </move>
   </target>

   <target name="assemble-tomcat"
           depends="init, set-build-number">
      <mkdir dir="${dir.continuous.dist}" />

      <unzip src="${dir.name.binaries}/tomcat/${file.name.distro.tomcat}"
             dest="${dir.continuous.assemble}" />
      <move file="${dir.continuous.assemble}/${dir.name.distro.tomcat}" 
            tofile="${dir.continuous.assemble.tomcat}" />
      <delete dir="${dir.continuous.assemble.tomcat}/webapps/balancer" />
      <delete dir="${dir.continuous.assemble.tomcat}/webapps/jsp-examples" />
      <delete dir="${dir.continuous.assemble.tomcat}/webapps/servlets-examples" />
      <delete dir="${dir.continuous.assemble.tomcat}/webapps/tomcat-docs" />
      <delete dir="${dir.continuous.assemble.tomcat}/webapps/webdav" />
      <delete dir="${dir.continuous.assemble.tomcat}/webapps/ROOT" />

      <!-- make sure the context is set for no serialization -->
      <copy todir="${dir.continuous.assemble.tomcat}/conf" 
            file="${dir.project.3rdparty.distro}/context.xml"
            overwrite="true"/>

      <!-- make sure the server is set for UTF-8 -->
      <copy todir="${dir.continuous.assemble.tomcat}/conf" 
            file="${dir.project.3rdparty.distro}/server.xml"
            overwrite="true"/>

      <!-- copy project files common to both platforms -->
      <copy todir="${dir.continuous.assemble.tomcat}/webapps">
         <fileset dir="${dir.project.webclient.dist}" 
                  includes="${file.name.war.webclient}" />
         <fileset dir="${dir.project.slingshot.dist}"
                  includes="${file.name.war.slingshot}" />
      </copy>
      <!-- Copy any required common libs -->
      <copy todir="${dir.continuous.assemble.tomcat}/lib" 
            file="${dir.project.3rdparty.lib}/commons/commons-el.jar" />
      <!-- Add shared loader to Tomcat 6-->
	  <replace file="${dir.continuous.assemble.tomcat}/conf/catalina.properties" 
	      token="shared.loader=" 
	      value="shared.loader=${catalina.base}/shared/classes,${catalina.base}/shared/lib/*.jar" />
	  <!-- Add config to shared location -->
      <copy todir="${dir.continuous.assemble.tomcat}/shared/classes/alfresco/extension">
         <fileset dir="${dir.project.repository.config}/alfresco/extension" />
         <fileset dir="${dir.project.webclient.config}/alfresco/extension" />
         <fileset dir="${dir.project.installer.extension}" />
      </copy>
      <copy todir="${dir.continuous.assemble.tomcat}/shared/classes/alfresco/messages">
         <fileset dir="${dir.project.installer.messages}" />
      </copy>

      <!-- rename model files ready for use -->
      <move tofile="${dir.continuous.assemble.tomcat}/shared/classes/alfresco/extension/web-client-config-custom.xml"
            file="${dir.continuous.assemble.tomcat}/shared/classes/alfresco/extension/web-client-config-custom.xml.sample" />
      <move tofile="${dir.continuous.assemble.tomcat}/shared/classes/alfresco/extension/customModel.xml"
            file="${dir.continuous.assemble.tomcat}/shared/classes/alfresco/extension/customModel.xml.sample" />
      <move tofile="${dir.continuous.assemble.tomcat}/shared/classes/alfresco/extension/exampleModel.xml"
            file="${dir.continuous.assemble.tomcat}/shared/classes/alfresco/extension/exampleModel.xml.sample" />
   </target>

   <!-- ***************** -->
   <!-- ** WAR targets ** -->
   <!-- ***************** -->

   <target name="distribute-war"
           description="Creates the WAR file distribution for all platforms"
           depends="init" >
      <mkdir dir="${dir.continuous.dist}" />

      <zip destfile="${dir.continuous.dist}/${file.name.dist.war}.zip">
         <zipfileset dir="${dir.project.jlan}/jni"
                     prefix="bin"/>
         <zipfileset dir="${dir.project.installer.extras}"
                     prefix="extras"
                     excludes="**/*.sh" />
         <zipfileset dir="${dir.project.installer}"
                     includes="licenses/**,
                               README_war.txt" />
         <zipfileset dir="${dir.project.installer}"
                     includes="README_mysql.txt" />
         <zipfileset dir="${dir.project.webclient.dist}"
                     includes="${file.name.war.webclient}" />
         <zipfileset dir="${dir.project.slingshot.dist}"
                     includes="${file.name.war.slingshot}" />
         <zipfileset dir="${dir.project.repository.config}/alfresco/extension"
                     prefix="extensions/extension" />
         <zipfileset dir="${dir.project.webclient.config}/alfresco/extension"
                     prefix="extensions/extension" />
         <zipfileset dir="${dir.project.installer.extension}"
                     prefix="extensions/extension" />
         <zipfileset dir="${dir.project.installer.messages}"
                     prefix="extensions/messages" />
         <zipfileset dir="${dir.project.3rdparty.lib}/${dir.name.xalan}"
                     includes="${file.name.jar.xalan},${file.name.jar.serializer}"
                     prefix="endorsed" />
      </zip>

      <tar destfile="${dir.continuous.dist}/${file.name.dist.war}.tar.gz"
           longfile="gnu"
           compression="gzip">
         <tarfileset dir="${dir.project.installer.extras}"
                     prefix="extras"
                     excludes="**/*.bat" />
         <tarfileset dir="${dir.project.installer}"
                     includes="licenses/**,
                               README_war.txt" />
         <tarfileset dir="${dir.project.installer}"
                     includes="README_mysql_linux.txt"
                     fullpath="README_mysql.txt" />
         <tarfileset dir="${dir.project.webclient.dist}"
                     includes="${file.name.war.webclient}" />
         <tarfileset dir="${dir.project.slingshot.dist}"
                     includes="${file.name.war.slingshot}" />
         <tarfileset dir="${dir.project.repository.config}/alfresco/extension"
                     prefix="extensions/extension" />
         <tarfileset dir="${dir.project.webclient.config}/alfresco/extension"
                     prefix="extensions/extension" />
         <tarfileset dir="${dir.project.installer.extension}"
                     prefix="extensions/extension" />
         <tarfileset dir="${dir.project.installer.messages}"
                     prefix="extensions/messages" />
         <tarfileset dir="${dir.project.3rdparty.lib}/${dir.name.xalan}"
                     includes="${file.name.jar.xalan},
                               ${file.name.jar.serializer}"
                     prefix="endorsed" />
      </tar>
   </target>

   <target name="distribute-war-installers"
           depends="assemble-tomcat">

   </target>

   <!-- ******************************** -->
   <!-- ** Web Service Client targets ** -->
   <!-- ******************************** -->

   <target name="distribute-webserviceclient"
           description="Creates the web service client distribution file for all platforms"
           depends="init">
      <mkdir dir="${dir.continuous.dist}" />

      <zip destfile="${dir.continuous.dist}/${file.name.dist.webserviceclient}.zip">
         <zipfileset dir="${dir.project.webserviceclient.dist}" />
         <zipfileset dir="${dir.project.webserviceclient.config}/alfresco" 
                     prefix="alfresco"/>
      </zip>

      <tar destfile="${dir.continuous.dist}/${file.name.dist.webserviceclient}.tar.gz" 
           longfile="gnu" 
           compression="gzip">
         <tarfileset dir="${dir.project.webserviceclient.dist}" />
         <tarfileset dir="${dir.project.webserviceclient.config}/alfresco" 
                     prefix="alfresco"/>
      </tar>
   </target>

   <!-- *************************** -->
   <!-- ** Office Add-in targets ** -->
   <!-- *************************** -->
   
   <target name="distribute-extensions-office2003"
           description="Creates the Office 2003 Extensions distribution files"
           depends="distribute-extensions-office2003-word,
                    distribute-extensions-office2003-excel,
                    distribute-extensions-office2003-powerpoint,
                    distribute-extensions-office2003-all" />

   <target name="distribute-extensions-office2003-word"
           description="Creates the Word 2003 Extensions distribution files"
           depends="init">
      <mkdir dir="${dir.continuous.dist}" />

      <zip destfile="${dir.continuous.dist}/${file.name.dist.extension-office2003-word}.zip">
         <zipfileset dir="${dir.project.extension.office.word2003}"
                     includes="readme.rtf,
                               setup.exe,
                               AlfrescoWord2003Setup.msi" />
         <zipfileset dir="${dir.project.extension.office.word2003}/Office2003PIA"
                     prefix="Office2003PIA"
                     includes="o2003pia.msi" />
      </zip>
   </target>

   <target name="distribute-extensions-office2003-excel"
           description="Creates the Excel 2003 Extensions distribution files"
           depends="init">
      <mkdir dir="${dir.continuous.dist}" />

      <zip destfile="${dir.continuous.dist}/${file.name.dist.extension-office2003-excel}.zip">
         <zipfileset dir="${dir.project.extension.office.excel2003}"
                     includes="readme.rtf,
                               setup.exe,
                               AlfrescoExcel2003Setup.msi" />
         <zipfileset dir="${dir.project.extension.office.excel2003}/Office2003PIA"
                     prefix="Office2003PIA"
                     includes="o2003pia.msi" />
      </zip>
   </target>

   <target name="distribute-extensions-office2003-powerpoint"
           description="Creates the PowerPoint 2003 Extensions distribution files"
           depends="init">
      <mkdir dir="${dir.continuous.dist}" />

      <zip destfile="${dir.continuous.dist}/${file.name.dist.extension-office2003-powerpoint}.zip">
         <zipfileset dir="${dir.project.extension.office.powerpoint2003}"
                     includes="readme.rtf,
                               setup.exe,
                               AlfrescoPowerPoint2003Setup.msi" />
         <zipfileset dir="${dir.project.extension.office.powerpoint2003}/Office2003PIA"
                     prefix="Office2003PIA"
                     includes="o2003pia.msi" />
      </zip>
   </target>

   <target name="distribute-extensions-office2003-all"
           description="Creates the 3-in-1 Office 2003 Extensions distribution files"
           depends="init">
      <mkdir dir="${dir.continuous.dist}" />

      <zip destfile="${dir.continuous.dist}/${file.name.dist.extension-office2003-all}.zip">
         <zipfileset dir="${dir.project.extension.office.all2003}"
                     includes="readme.rtf,
                               setup.exe,
                               AlfrescoOffice2003Setup.msi" />
         <zipfileset dir="${dir.project.extension.office.all2003}/Office2003PIA"
                     prefix="Office2003PIA"
                     includes="o2003pia.msi" />
      </zip>
   </target>

   <!-- ************************ -->
   <!-- ** Deployment targets ** -->
   <!-- ************************ -->
      
   <target name="distribute-deployment" 
           depends="init"
           description="Creates a zip file containing the deployment receiver">
      <mkdir dir="${dir.continuous.dist}" />
      <copy file="${dir.project.deployment.dist}/${file.name.zip.deployment}"
            tofile="${dir.continuous.dist}/${file.name.dist.deployment}.zip" />
      <delete quiet="yes"
              includeEmptyDirs="true"
              dir="${dir.project.installer.builder}/deploy-installer/output" />
      <exec dir="${dir.project.installer.builder}" executable="${file.name.installer129.exe}" output="build/error-ij.txt" failifexecutionfails="false">
         <arg line='-DVersion "${file.name.exe.version}" -DCodeline ${file.name.codeline} --build --quiet "${file.name.installer.deploy}"'/>
      </exec>
      <move todir="${dir.continuous.dist}" failonerror="false">
         <fileset dir="${dir.project.installer.builder}/deploy-installer/output">
            <include name="**/*"/>
         </fileset>
      </move>
   </target>
   

   <!-- ******************************* -->
   <!-- ** Sample Extensions targets ** -->
   <!-- ******************************* -->
   
   <target name="assemble-sample-extensions" 
           depends="init">

      <!-- Create the required directory structure -->
      <mkdir dir="${dir.continuous.dist}" />
      <mkdir dir="${dir.continuous.assemble.extension-samples}" />

      <!-- get the sample extension files -->
      <copy todir="${dir.continuous.assemble.extension-samples}" 
            flatten="false">
         <fileset dir="${dir.project.repository.config}" 
                  includes="alfresco/extension/**/*" />
      </copy>

   </target>
   
   <target name="distribute-sample-extensions" 
           depends="assemble-sample-extensions"
           description="Creates a jar file containing the alfresco sample extensions">
      <mkdir dir="${dir.continuous.dist}" />

      <zip destfile="${dir.continuous.dist}/${file.name.dist.sample-extensions}.zip">
         <zipfileset dir="${dir.continuous.assemble.extension-samples}" />
      </zip>
      <tar destfile="${dir.continuous.dist}/${file.name.dist.sample-extensions}.tar.gz" 
           longfile="gnu" 
           compression="gzip">
         <tarfileset dir="${dir.continuous.assemble.extension-samples}" />
      </tar>
   </target>

   <!-- ************************************ -->
   <!-- ** Module Management Tool targets ** -->
   <!-- ************************************ -->
   
   <target name="assemble-mmt" 
           depends="init">

      <!-- Create the required directory structure -->
      <mkdir dir="${dir.continuous.dist}" />
      <mkdir dir="${dir.continuous.assemble.mmt}" />

      <!-- extract the one-jar file -->
      <unjar src="${dir.project.3rdparty.lib}/one-jar/one-jar-boot-0.96-RC4.jar"
             dest="${dir.continuous.assemble.mmt}" 
             overwrite="true" />
      <!-- remove unwanted files -->
      <delete >
         <fileset dir="${dir.continuous.assemble.mmt}">
            <include name="**/*.java" />
            <include name="**/boot-manifest.mf" />
         </fileset>
      </delete>

      <!-- copy required jars into lib folder -->
      <copy todir="${dir.continuous.assemble.mmt}/lib" 
            flatten="false">
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="**/jug-lgpl-2.0.0.jar" />
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="**/truezip.jar" />
      </copy>

      <!-- get the files for the main mmt jar -->
      <copy todir="${dir.continuous.assemble.mmt}/tmp-mmt-jar" 
            flatten="false">
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/i18n/I18NUtil.class" />
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/error/AlfrescoRuntimeException.class" />
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/util/VersionNumber.class" />
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/util/ISO8601DateFormat.class" />
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/util/Pair.class" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/repo/module/tool/default-file-mapping.properties" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/repo/module/**/*.class" />
         <fileset dir="${dir.project.repository.classes}"
                  includes="org/alfresco/service/cmr/module/**/*.class" />
      </copy>
      <!-- copy in a manifest file -->
      <copy tofile="${dir.continuous.assemble.mmt}/tmp-mmt-jar/META-INF/MANIFEST.MF" >
         <fileset dir="${dir.project.repository}/source/meta-inf" 
                  includes="mmt-manifest.mf" />
      </copy>
      <!-- jar the main mmt classes -->
      <mkdir dir="${dir.continuous.assemble.mmt}/main" />
      <jar destfile="${dir.continuous.assemble.mmt}/main/main.jar" 
           manifest="${dir.continuous.assemble.mmt}/tmp-mmt-jar/META-INF/MANIFEST.MF" 
           update="false" >
         <fileset dir="${dir.continuous.assemble.mmt}/tmp-mmt-jar">
            <include name="**/*" />
         </fileset>
      </jar>
      <!-- Remove temp files -->
      <delete dir="${dir.continuous.assemble.mmt}/tmp-mmt-jar" />

   </target>
   
   <target name="distribute-mmt" 
           depends="assemble-mmt"
           description="Creates the Alfresco Module Management Tool distribution file for all platforms">
      <mkdir dir="${dir.continuous.dist}" />

      <zip destfile="${dir.continuous.dist}/${file.name.dist.mmt}.jar">
         <zipfileset dir="${dir.continuous.assemble.mmt}" />
      </zip>
      <!-- Version-independent name for installers and bundles -->
      <copy file="${dir.continuous.dist}/${file.name.dist.mmt}.jar"
            tofile="${dir.continuous.dist}/alfresco-mmt.jar" />
   </target>

   <!-- ************************************ -->
   <!-- ** Benchmark Remote targets       ** -->
   <!-- ************************************ -->
   
   <target name="assemble-bm-remote" 
           depends="init">

      <!-- Create the required directory structure -->
      <mkdir dir="${dir.continuous.dist}" />
      <mkdir dir="${dir.continuous.assemble.bm-remote}" />

      <!-- extract the one-jar file -->
      <unjar src="${dir.project.3rdparty.lib}/one-jar/one-jar-boot-0.96-RC4.jar" 
             dest="${dir.continuous.assemble.bm-remote}" 
             overwrite="true" />
      <!-- remove unwanted files -->
      <delete >
         <fileset dir="${dir.continuous.assemble.bm-remote}">
            <include name="**/*.java" />
            <include name="**/boot-manifest.mf" />
         </fileset>
      </delete>

      <!-- copy required jars into lib folder -->
      <copy todir="${dir.continuous.assemble.bm-remote}/lib" 
            flatten="false">
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="**/spring-2.0.2.jar" />
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="**/ehcache-1.4.1-patched.jar" />
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="**/jug-lgpl-2.0.0.jar" />
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="**/commons/commons-logging-1.1.jar" />
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="**/log4j-1.2.15.jar" />
      </copy>

      <!-- get the files for the main bm-remote jar -->
      <copy todir="${dir.continuous.assemble.bm-remote}/tmp-bm-remote-jar" 
            flatten="false">
         <fileset dir="${dir.project.core.src.java}" 
                  includes="log4j.properties" />
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/error/AlfrescoRuntimeException.class" />
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/error/StackTraceUtil.class" />
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/i18n/I18NUtil.class" />
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/util/GUID.class" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/model/ContentModel.class" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/repo/cache/EhCacheAdapter.class" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/repo/cache/SimpleCache.class" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/repo/remote/FileFolderRemoteClient.class" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/repo/model/filefolder/**/*.class" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/service/cmr/model/*.class" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/service/cmr/repository/*.class" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/service/cmr/remote/*.class" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/service/namespace/*.class" />
      </copy>
      <!-- copy the ehcache file -->
      <copy todir="${dir.continuous.assemble.bm-remote}/tmp-bm-remote-jar" 
            flatten="false">
         <fileset dir="${dir.project.repository.src.java}" 
                  includes="org/alfresco/repo/model/filefolder/**/loader-ehcache.xml" />
      </copy>
      <!-- copy in a manifest file -->
      <copy tofile="${dir.continuous.assemble.bm-remote}/tmp-bm-remote-jar/META-INF/MANIFEST.MF" >
         <fileset dir="${dir.project.repository}/source/meta-inf" 
                  includes="bm-remote-manifest.mf" />
      </copy>
      <!-- jar the main bm-remote classes -->
      <mkdir dir="${dir.continuous.assemble.bm-remote}/main" />
      <jar destfile="${dir.continuous.assemble.bm-remote}/main/main.jar" 
           manifest="${dir.continuous.assemble.bm-remote}/tmp-bm-remote-jar/META-INF/MANIFEST.MF" 
           update="false" >
         <fileset dir="${dir.continuous.assemble.bm-remote}/tmp-bm-remote-jar">
            <include name="**/*" />
         </fileset>
      </jar>
      <!-- Remove temp files -->
      <delete dir="${dir.continuous.assemble.bm-remote}/tmp-bm-remote-jar" />

   </target>
   
   <target name="distribute-bm-remote" 
           depends="assemble-bm-remote"
           description="Creates the Alfresco Remote Benchmark Tool distribution file for all platforms">
      <mkdir dir="${dir.continuous.dist}" />

      <zip destfile="${dir.continuous.dist}/${file.name.dist.bm-remote}.jar">
         <zipfileset dir="${dir.continuous.assemble.bm-remote}" />
      </zip>
   </target>

	<!-- ***************** -->
	<!-- ** AMP targets ** -->
	<!-- ***************** -->
	
	<target name="distribute-amps" 
	        description="Creates the distribution AMP file for all extensions"
	        depends="init,
                         package-php-extension, package-mediawiki-extension, package-rm-extension, package-blog-extension,
                         package-fb-doclib-extension, package-googlegadgets,
                         package-avmcompare-extension, package-truncatemalformedxml-extension">
		
		<copy todir="${dir.continuous.dist}">
			<fileset dir="${dir.module.php.dist}"                  includes="${file.name.amp.php}" />
			<fileset dir="${dir.module.mediawiki.dist}"            includes="${file.name.amp.mediawiki}" />
			<fileset dir="${dir.module.rm.dist}"                   includes="${file.name.amp.rm}" />
			<fileset dir="${dir.module.blog.dist}"                 includes="${file.name.amp.blog}" />
			<fileset dir="${dir.module.avmcompare.dist}"           includes="${file.name.amp.avmcompare}" />
			<fileset dir="${dir.module.truncatemalformedxml.dist}" includes="${file.name.amp.truncatemalformedxml}" />
			<fileset dir="${dir.module.fb.doclib.dist}"            includes="${file.name.amp.fb.doclib}" />
			<fileset dir="${dir.module.gg.dist}"                   includes="${file.name.zip.gg}" />
			<fileset dir="${dir.project.installer}"                includes="vti-module.amp, ROOT.war" />  
	   </copy>
	</target>
	
   <!-- ***************** -->
   <!-- ** SDK targets ** -->
   <!-- ***************** -->

   <target name="distribute-sdk" 
           description="Creates the sdk distribution file for all platforms" 
           depends="verify-sdk">
      <zip destfile="${dir.continuous.dist}/${file.name.dist.sdk}.zip">
         <zipfileset dir="${dir.continuous.assemble.sdk}" />
         <zipfileset dir="${dir.project.installer.extras}"
                     prefix="extras" 
                     excludes="**/*.sh" />
      </zip>

      <tar destfile="${dir.continuous.dist}/${file.name.dist.sdk}.tar.gz" 
           longfile="gnu" 
           compression="gzip">
         <tarfileset dir="${dir.continuous.assemble.sdk}" />
         <tarfileset dir="${dir.project.installer.extras}" 
                     prefix="extras" 
                     excludes="**/*.bat" />
      </tar>
   </target>
   
   <target name="verify-sdk" 
           depends="assemble-sdk">
      <mkdir dir="${dir.continuous.assemble.sdk.verify}" />
      
      <copy todir="${dir.continuous.assemble.sdk.verify}/lib">
         <fileset dir="${dir.continuous.assemble.sdk}/lib" />
      </copy>
      <copy todir="${dir.continuous.assemble.sdk.verify}/samples">
         <fileset dir="${dir.continuous.assemble.sdk}/samples" />
      </copy>
      
      <taskdef name="verify-classpath"
               classname="org.alfresco.devenv.ant.VerifyEclipseClasspath">
         <classpath refid="classpath.compile" />
      </taskdef>
   
      <verify-classpath projectdir="${dir.continuous.assemble.sdk.verify}/lib/server" />
      <verify-classpath projectdir="${dir.continuous.assemble.sdk.verify}/lib/remote" />
      
      <subant target="compile">
         <fileset dir="${dir.continuous.assemble.sdk.verify}/samples" 
                  includes="*/build.xml"/>
      </subant>
   </target>

   <target name="assemble-sdk" 
           depends="generate-docs">
      <mkdir dir="${dir.continuous.dist}" />

      <!-- -->
      <!-- Binaries -->
      <!-- -->
      <mkdir dir="${dir.continuous.assemble.sdk}/bin" />
      <copy todir="${dir.continuous.assemble.sdk}/bin">
         <fileset dir="${dir.project.jlan}/jni" 
                  includes="*.dll" />
         <fileset dir="${dir.project.installer}" 
                  includes=".hotspot_compiler" />
      </copy>

      <!-- -->
      <!-- Readme -->
      <!-- -->
      <copy todir="${dir.continuous.assemble.sdk}" 
            file="${dir.project.sdk}/readme.txt" />

      <!-- -->
      <!-- Documentation -->
      <!-- -->
      <mkdir dir="${dir.continuous.assemble.sdk}/doc" />

      <!-- Javadoc -->
      <mkdir dir="${dir.continuous.assemble.sdk}/doc/api" />
      <zip destfile="${dir.continuous.assemble.sdk}/doc/api/core-doc.zip">
         <zipfileset dir="${dir.project.core.docs.java}" />
      </zip>
      <zip destfile="${dir.continuous.assemble.sdk}/doc/api/repository-doc.zip">
         <zipfileset dir="${dir.project.repository.docs.java}" />
      </zip>
      <zip destfile="${dir.continuous.assemble.sdk}/doc/api/remote-api-doc.zip">
         <zipfileset dir="${dir.project.remoteapi.docs.java}" />
      </zip>
      <zip destfile="${dir.continuous.assemble.sdk}/doc/api/web-client-doc.zip">
         <zipfileset dir="${dir.project.webclient.docs.java}" />
      </zip>

      <!-- Taglib -->
      <mkdir dir="${dir.continuous.assemble.sdk}/doc/taglib" />
      <zip destfile="${dir.continuous.assemble.sdk}/doc/taglib/alfresco-taglib-doc.zip">
         <zipfileset dir="${dir.project.webclient.docs.taglib}" />
      </zip>

      <!-- -->
      <!-- Libraries -->
      <!-- -->
      <mkdir dir="${dir.continuous.assemble.sdk}/lib" />

      <!-- Remote API Libraries -->
      <mkdir dir="${dir.continuous.assemble.sdk}/lib/remote" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/remote" 
            file="${dir.project.webserviceclient.dist}/${file.name.jar.webserviceclient}" />
      <mkdir dir="${dir.continuous.assemble.sdk}/lib/remote/wsdl" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/remote/wsdl">
         <fileset dir="${dir.project.remoteapi.src.wsdl}" 
                  includes="*.wsdl,*.xsd" />
      </copy>

      <!-- Server Libraries -->
      <mkdir dir="${dir.continuous.assemble.sdk}/lib/server" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server" 
            file="${dir.project.core.dist}/${file.name.jar.core}" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server" 
            file="${dir.project.repository.dist}/${file.name.jar.repository}" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server" 
            file="${dir.project.remoteapi.dist}/${file.name.jar.remoteapi}" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server" 
            file="${dir.project.jndi.dist}/${file.name.jar.jndi}" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server"
            file="${dir.project.linkvalidation.dist}/${file.name.jar.linkvalidation}" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server" 
            file="${dir.project.mbeans.dist}/${file.name.jar.mbeans}" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server"
            file="${dir.project.deployment.dist}/${file.name.jar.deployment}" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server" 
            file="${dir.project.webclient.dist}/${file.name.jar.webclient}" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server" 
            file="${dir.project.webscriptframework.dist}/${file.name.jar.webscriptframework}" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server" 
            file="${dir.project.webframework.dist}/${file.name.jar.webframework}" />

      <!-- Deployment Libraries -->
      <mkdir dir="${dir.continuous.assemble.sdk}/lib/deployment"/>
      <copy todir="${dir.continuous.assemble.sdk}/lib/deployment"
            file="${dir.project.core.dist}/${file.name.jar.core}"/>
      <copy todir="${dir.continuous.assemble.sdk}/lib/deployment"
            file="${dir.project.deployment.dist}/${file.name.jar.deployment}"/>

      <!-- Package configuration as a .jar -->
      <!-- TODO: configuration should ideally live in each of the above .jars -->
      <mkdir dir="${dir.continuous.assemble.sdk}/config" />
      <copy todir="${dir.continuous.assemble.sdk}/config"
            includeEmptyDirs="false">
         <fileset dir="${dir.project.repository.config}" 
                  excludes="**/extension/*,**/desktop/*" />
         <fileset dir="${dir.project.webclient.config}" 
                  excludes="**/extension/*" />
         <fileset dir="${dir.project.core.src.java}" 
                  includes="log4j.properties" />
      </copy>
      <delete>
         <fileset dir="${dir.continuous.assemble.sdk}/config/alfresco/messages">
            <include name="*_en_US.properties" />
         </fileset>
      </delete>
      <copy todir="${dir.continuous.assemble.sdk}/config/alfresco/messages">
         <fileset dir="${dir.continuous.assemble.sdk}/config/alfresco/messages"/>
         <mapper type="glob" 
                 from="*.properties" 
                 to="*_en_US.properties"/>
      </copy>
      <zip destfile="${dir.continuous.assemble.sdk}/lib/server/config.jar">
         <zipfileset dir="${dir.continuous.assemble.sdk}/config" />
      </zip>
      <delete dir="${dir.continuous.assemble.sdk}/config" />

      <!-- Dependencies -->
      <mkdir dir="${dir.continuous.assemble.sdk}/lib/server/dependencies" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server/dependencies">
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="**/*.jar" />
      </copy>
      <mkdir dir="${dir.continuous.assemble.sdk}/lib/server/alfresco/desktop" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server/alfresco/desktop">
         <fileset dir="${dir.project.repository.config}/alfresco/desktop" />
      </copy>
      <mkdir dir="${dir.continuous.assemble.sdk}/lib/server/alfresco/alfresco" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server/alfresco/alfresco">
         <fileset dir="${dir.project.repository.config}/alfresco" 
                  includes="alfresco-jmxrmi.*" />
      </copy>
      <mkdir dir="${dir.continuous.assemble.sdk}/lib/remote/dependencies" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/remote/dependencies" 
            flatten="true">
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="${includes.sdk.remote.jars}" />
      </copy>

      <!-- -->
      <!-- Source -->
      <!-- -->
      <mkdir dir="${dir.continuous.assemble.sdk}/src" />
      <zip destfile="${dir.continuous.assemble.sdk}/src/core-src.zip">
         <zipfileset dir="${dir.project.core.src}" />
      </zip>
      <zip destfile="${dir.continuous.assemble.sdk}/src/remote-api-src.zip">
         <zipfileset dir="${dir.project.remoteapi.src}" />
      </zip>
      <zip destfile="${dir.continuous.assemble.sdk}/src/repository-src.zip">
         <zipfileset dir="${dir.project.repository.src}" />
      </zip>
      <zip destfile="${dir.continuous.assemble.sdk}/src/web-service-client-src.zip">
         <zipfileset dir="${dir.project.webserviceclient.src.java}" />
         <zipfileset dir="${dir.project.webserviceclient.src.generated}" />
      </zip>
      <zip destfile="${dir.continuous.assemble.sdk}/src/web-client-src.zip">
         <zipfileset dir="${dir.project.webclient.src}" />
      </zip>

      <!-- -->
      <!-- License -->
      <!-- -->
      <copy todir="${dir.continuous.assemble.sdk}" 
            file="${dir.project.installer.licenses}/notice.txt"  />
      <copy todir="${dir.continuous.assemble.sdk}" 
            file="${dir.project.installer.licenses}/license.txt" />
      <mkdir dir="${dir.continuous.assemble.sdk}/licenses" />
      <copy todir="${dir.continuous.assemble.sdk}/licenses">
         <fileset dir="${dir.project.installer.licenses}/3rd-party" 
                  includes="*.*" />
      </copy>

      <!-- -->
      <!-- Samples -->
      <!-- -->

      <!-- Library Eclipse Projects -->
      <copy todir="${dir.continuous.assemble.sdk}/lib/server" 
            file="${dir.project.sdk.projects.server}/.project" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/server" 
            file="${dir.project.sdk.projects.server}/.classpath" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/remote" 
            file="${dir.project.sdk.projects.remote}/.project" />
      <copy todir="${dir.continuous.assemble.sdk}/lib/remote"
            file="${dir.project.sdk.projects.remote}/.classpath" />

      <!-- Sample Projects -->
      <mkdir dir="${dir.continuous.assemble.sdk}/samples" />
      <copy todir="${dir.continuous.assemble.sdk}/samples">
         <fileset dir="${dir.project.sdk.samples}" 
                  excludes="**/build/**" />
      </copy>
   </target>
   
   <!-- *************************** -->
   <!-- ** Documentation targets ** -->
   <!-- *************************** -->

   <target name="distribute-docs" 
           description="Assembles the documentation from all projects"
           depends="init">
      <mkdir dir="${dir.continuous.assemble.docs.java}" />
      <mkdir dir="${dir.continuous.assemble.docs.taglib}" />
      
      <!-- java docs -->
      <copy todir="${dir.continuous.assemble.docs.java}/catalina-virtual">
         <fileset dir="${dir.project.catalinavirtual.docs.java}" />
      </copy>
      <copy todir="${dir.continuous.assemble.docs.java}/core">
         <fileset dir="${dir.project.core.docs.java}" />
      </copy>
      <copy todir="${dir.continuous.assemble.docs.java}/deployment">
         <fileset dir="${dir.project.deployment.docs.java}" />
      </copy>
      <copy todir="${dir.continuous.assemble.docs.java}/jndi-client">
         <fileset dir="${dir.project.jndi.docs.java}" />
      </copy>
      <copy todir="${dir.continuous.assemble.docs.java}/link-validation">
         <fileset dir="${dir.project.linkvalidation.docs.java}" />
      </copy>
      <copy todir="${dir.continuous.assemble.docs.java}/mbeans">
         <fileset dir="${dir.project.mbeans.docs.java}" />
      </copy>
      <copy todir="${dir.continuous.assemble.docs.java}/remote-api">
         <fileset dir="${dir.project.remoteapi.docs.java}" />
      </copy>
      <copy todir="${dir.continuous.assemble.docs.java}/repository">
         <fileset dir="${dir.project.repository.docs.java}" />
      </copy>
      <!--
      <copy todir="${dir.continuous.assemble.docs.java}/webscript-framework">
         <fileset dir="${dir.project.webscriptframework.docs.java}" />
      </copy>
      -->
      <copy todir="${dir.continuous.assemble.docs.java}/web-client">
         <fileset dir="${dir.project.webclient.docs.java}" />
      </copy>
      <copy todir="${dir.continuous.assemble.docs.java}/web-service-client">
         <fileset dir="${dir.project.webserviceclient.docs.java}" />
      </copy>
      
      <!-- taglib docs -->
      <copy todir="${dir.continuous.assemble.docs.taglib}/web-client">
         <fileset dir="${dir.project.webclient.docs.taglib}" />
      </copy>
   </target>

</project>
