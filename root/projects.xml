<project name="projects">


   <!-- ************************************************************************** -->
   <!-- ** This file contains the targets used to build the individual projects ** -->
   <!-- ************************************************************************** -->

   <!-- ****************** -->
   <!-- ** Core Project ** -->
   <!-- ****************** -->
   
   <target name="incremental-core" 
           description="Performs an incremental build of the core project"
           depends="package-core" />
      
   <target name="build-core" 
           description="Performs a clean build of the core project"
           depends="clean-core, 
                    incremental-core" />
   
   <target name="clean-core" 
           description="Cleans the core project" 
           depends="init">
      <clean projectdir="${dir.project.core}" />
   </target>
   
   <target name="compile-core" 
           description="Compiles the core project" 
           depends="init">
      <compile-java projectdir="${dir.project.core}" />
   </target>
   
   <target name="package-core"
           description="Packages the core project"
           depends="compile-core">
      <mkdir dir="${dir.project.core.dist}" />
      <jar jarfile="${dir.project.core.dist}/${file.name.jar.core}" 
           basedir="${dir.project.core.classes}" />
   </target>
   
   <target name="test-core" 
           description="Runs the tests for the core project" 
           depends="compile-core">
      <run-tests projectdir="${dir.project.core}" />
   </target>
   
   <target name="generate-javadocs-core" 
           description="Generates the JavaDocs for the core project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Core API Specification" 
                         windowtitle="Alfresco Core API" 
                         projectdir="${dir.project.core}"/>
   </target>
   
   <!-- ******************** -->
   <!-- ** MBeans Project ** -->
   <!-- ******************** -->
   
   <target name="incremental-mbeans" 
           description="Performs an incremental build of the mbeans project" 
           depends="package-mbeans" />
      
   <target name="build-mbeans" 
           description="Performs a clean build of the mbeans project" 
           depends="clean-mbeans, 
           incremental-mbeans" />
   
   <target name="clean-mbeans" 
           description="Cleans the mbeans project" 
           depends="init">
      <clean projectdir="${dir.project.mbeans}" />
   </target>
   
   <target name="compile-mbeans" 
           description="Compiles the mbeans project" 
           depends="init">
      <compile-java projectdir="${dir.project.mbeans}" />
   </target>
   
   <target name="package-mbeans"
           description="Packages the mbeans project"
           depends="compile-mbeans">
      <mkdir dir="${dir.project.mbeans.dist}" />
      <jar jarfile="${dir.project.mbeans.dist}/${file.name.jar.mbeans}" 
           basedir="${dir.project.mbeans.classes}" />
   </target>
   
   <target name="test-mbeans" 
           description="Runs the tests for the mbeans project" 
           depends="compile-mbeans">
      <run-tests projectdir="${dir.project.mbeans}" />
   </target>
   
   <target name="generate-javadocs-mbeans" 
           description="Generates the JavaDocs for the mbeans project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Virtualization MBean" 
                         windowtitle="Alfresco Virtualization MBean" 
                         projectdir="${dir.project.mbeans}" />
   </target>

   <!-- ******************** -->
   <!-- ** Deployment Project ** -->
   <!-- ******************** -->
   
   <target name="incremental-deployment" 
           description="Performs an incremental build of the deployment project" 
           depends="package-deployment" />
      
   <target name="build-deployment" 
           description="Performs a clean build of the deployment project" 
           depends="clean-deployment, 
           incremental-deployment" />
   
   <target name="clean-deployment" 
           description="Cleans the deployment project" 
           depends="init">
      <clean projectdir="${dir.project.deployment}" />
   </target>
   
   <target name="compile-deployment" 
           description="Compiles the deployment project" 
           depends="init">
      <compile-java projectdir="${dir.project.deployment}" />
   </target>
   
   <target name="package-deployment"
           description="Packages the deployment project"
           depends="package-deployment-jar,
                    package-deployment-zip">
   </target>
         
   <target name="package-deployment-jar"
           description="Packages the JAR file for the deployment project"
           depends="compile-deployment">
      <mkdir dir="${dir.project.deployment.dist}" />
      <jar jarfile="${dir.project.deployment.dist}/${file.name.jar.deployment}" 
                 basedir="${dir.project.deployment.classes}" />
   </target>
   
   <target name="package-deployment-zip"
           description="Packages zip file of the deployment project"
           depends="assemble-deployment">
      <mkdir dir="${dir.project.deployment.dist}" />
      <zip basedir="${dir.project.deployment.assemble}" compress="yes"
           destfile="${dir.project.deployment.dist}/${file.name.zip.deployment}" />
   </target>
   
   <target name="assemble-deployment" 
           description="Assembles the files needed for the deployment project package"
           depends="package-deployment-jar">
      <mkdir dir="${dir.project.deployment.assemble}" />
      <copy todir="${dir.project.deployment.assemble}">
         <fileset dir="${dir.project.deployment.dist}">
            <include name="${file.name.jar.deployment}" />
         </fileset>
         <fileset dir="${dir.project.deployment}/config">
            <include name="*" />
         </fileset>
         <fileset dir="${dir.project.3rdparty.lib}">
            <include name="spring-*.jar" />
            <include name="jug.jar" />
         </fileset> 
         <fileset dir="${dir.project.3rdparty.lib}/commons">
            <filename name="commons-logging-*.jar" />
         </fileset>
         <fileset dir="${dir.project.core.dist}">
            <filename name="${file.name.jar.core}" />
         </fileset>
      </copy>
   </target>
   
   <target name="test-deployment" 
           description="Runs the tests for the deployment project" 
           depends="compile-deployment">
      <run-tests projectdir="${dir.project.deployment}" />
   </target>
   
   <target name="generate-javadocs-deployment" 
           description="Generates the JavaDocs for the deployment project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Deployment Receiver" 
                         windowtitle="Alfresco Deployment Receiver" 
                         projectdir="${dir.project.deployment}" />
   </target>
      
   <!-- ************************ -->
   <!-- ** Repository Project ** -->
   <!-- ************************ -->
      
   <target name="incremental-repository" 
           description="Performs an incremental build of the repository project" 
           depends="package-repository" />
      
   <target name="build-repository" 
           description="Performs a clean build of the repository project" 
           depends="clean-repository, 
                    incremental-repository" />
   
   <target name="clean-repository" 
           description="Cleans the repository project" 
           depends="init">
      <clean projectdir="${dir.project.repository}" />
   </target>
   
   <target name="compile-repository" 
           description="Compiles the repository project" 
           depends="compile-repository-java, 
                    compile-repository-jibx" />
   
   <target name="compile-repository-java" 
           description="Compiles the Java source for repository project" 
           depends="init">
      <compile-java projectdir="${dir.project.repository}" />
   </target>
   
   <target name="compile-repository-jibx" 
           description="Compiles the JIBX bindings for the repository project" 
           depends="init">
      <!-- load the JIBX task definition -->
      <taskdef name="bind" 
               classname="org.jibx.binding.ant.CompileTask"
               classpath="${dir.project.3rdparty.lib}/jibx/jibx-bind.jar;${dir.project.3rdparty.lib}/jibx/jibx-run.jar;${dir.project.3rdparty.lib}/bcel.jar;${dir.project.3rdparty.lib}/xpp3-1.1.3_8.jar" />

      <bind verbose="false" 
            load="true" 
            binding="${file.jibx.binding.m2}">
         <classpathset dir="${dir.project.repository.classes}"/>
      </bind>
      <bind verbose="false" 
            load="true" 
            binding="${file.jibx.binding.systeminfo}">
         <classpathset dir="${dir.project.repository.classes}"/>
     </bind>
   </target>
   
   <target name="package-repository"
           description="Packages the repository project" 
           depends="compile-repository">
      <mkdir dir="${dir.project.repository.dist}" />
      <jar jarfile="${dir.project.repository.dist}/${file.name.jar.repository}" 
            basedir="${dir.project.repository.classes}" />
   </target>
   
   <target name="test-repository" 
           description="Runs the tests for the repository project" 
           depends="compile-repository">
      <run-tests projectdir="${dir.project.repository}" />
   </target>
   
   <target name="generate-javadocs-repository" 
           description="Generates the JavaDocs for the repository project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Repository Specification" 
                         windowtitle="Alfresco Repository" 
                         projectdir="${dir.project.repository}" />
   </target>
   
   <target name="build-single-jar" 
           description="Builds a self-contained executable jar" 
           depends="package-repository">

      <!-- extract the one-jar file -->
      <unjar src="${dir.project.3rdparty.lib}/one-jar/one-jar-boot-0.95.jar" 
             dest="${dir.onejar}" 
             overwrite="true" />

      <!-- remove unwanted files -->
      <delete >
         <fileset dir="${dir.onejar}">
            <include name="**/*.java" />
            <include name="**/boot-manifest.mf" />
         </fileset>
      </delete>
      <!-- copy required jars into lib folder -->
      <copy todir="${dir.onejar}/lib" 
            flatten="false">
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="**/*.jar" 
                  excludes="${dir.name.devenv}/**" />
         <fileset dir="${dir.project.core.dist}" 
                  includes="${file.name.jar.core}" />
         <fileset dir="${dir.project.repository.dist}" 
                  includes="${file.name.jar.repository}" />
         <fileset dir="${dir.project.core.src.java}" 
                  includes="**/*log4j.properties" />
      </copy>
      <!-- delete target one-jar -->
      <delete file="${dir.project.repository.dist}/${file.name.jar.onejar}" />
      <!-- build the one-jar -->
      <jar destfile="${dir.project.repository.dist}/${file.name.jar.onejar}" 
           manifest="${dir.onejar}/META-INF/MANIFEST.MF"
           update="false" >
         <fileset dir="${dir.onejar}">
            <include name="**/*" />
         </fileset>
      </jar>
   </target>


   <!-- ***************************** -->
   <!-- ** Link Validation Project ** -->
   <!-- ***************************** -->
   
   <target name="incremental-linkvalidation" 
           description="Performs an incremental build of the linkvalidation project" 
           depends="package-linkvalidation" />
      
   <target name="build-linkvalidation" 
           description="Performs a clean build of the linkvalidation project" 
           depends="clean-linkvalidation, 
                    incremental-linkvalidation" />
   
   <target name="clean-linkvalidation" 
           description="Cleans the linkvalidation project" 
           depends="init">
      <clean projectdir="${dir.project.linkvalidation}" />
   </target>
   
   <target name="compile-linkvalidation" 
           description="Compiles the linkvalidation project" 
           depends="init">
      <compile-java projectdir="${dir.project.linkvalidation}" />
   </target>
   
   <target name="package-linkvalidation" 
           description="Packages the linkvalidation project" 
           depends="compile-linkvalidation">
      <mkdir dir="${dir.project.linkvalidation.dist}" />
      <jar jarfile="${dir.project.linkvalidation.dist}/${file.name.jar.linkvalidation}" 
           basedir="${dir.project.linkvalidation.classes}" />
   </target>
   

   <target name="test-linkvalidation" depends="init">
      <alfresco-virtual-antcall target="_test-linkvalidation"/>
   </target>

   <target name="_test-linkvalidation" 
           description="Runs the tests for the linkvalidation project" 
           depends="compile-linkvalidation">
      <run-tests projectdir="${dir.project.linkvalidation}" />
   </target>

   <target name="start-tomcat-if-necessary"
           depends="tomcat-check-status" 
           unless="tomcat.started">
      <tomcat-start/>
   </target>

   <target name="start-virtual-tomcat-if-necessary"
           depends="virtual-tomcat-check-status" 
           unless="virtual.tomcat.started">
       <virtual-tomcat-start/>
   </target>

   <target name="tomcat-check-status">
      <condition property="tomcat.started">
         <socket server="localhost" port="8080"/>
      </condition>
   </target>

   <target name="virtual-tomcat-check-status">
      <condition property="virtual.tomcat.started">
         <socket server="localhost" port="8180"/>
      </condition>
   </target>

   <target name="wait-for-alfresco">
      <waitfor maxwaitunit    = "second"
               checkeveryunit = "second"
               maxwait        = "20"
               checkevery     = "2">
         <http url="http://localhost:8080/alfresco"/>
      </waitfor>
   </target>

   <target name="wait-for-virtual-tomcat">
      <waitfor maxwaitunit    = "second"
               checkeveryunit = "second"
               maxwait        = "20"
               checkevery     = "2">
          <!-- Any non-existent virtual host will do for testing liveness -->
         <http url="http://dummy-project.www--sandbox.127-0-0-1.ip.alfrescodemo.net:8180/"/>
      </waitfor>
    </target>

   <target name="tomcat-stop-if-necessary" 
           depends="tomcat-check-status" 
           if="tomcat.started">
      <antcall target="java-tomcat-stop"/>
   </target>

   <target name="virtual-tomcat-stop-if-necessary" 
           depends="virtual-tomcat-check-status" 
           if="virtual.tomcat.started">
      <antcall target="java-virtual-tomcat-stop"/>
   </target>

   <target name="java-tomcat-stop"
           unless="tomcat.previously.started">
      <java jar="${tomcat.home}/bin/bootstrap.jar" 
            fork="true">
         <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
         <arg line="stop"/>
      </java>
      <sleep seconds="2"/>
   </target>

   <target name="java-virtual-tomcat-stop"
           unless="virtual.tomcat.previously.started">
      <java jar="${virtual.tomcat.home}/bin/bootstrap.jar" 
            fork="true">
         <jvmarg value="-Dcatalina.home=${virtual.tomcat.home}"/>
         <arg line="stop"/>
      </java>
      <sleep seconds="2"/>
   </target>

   <target name="generate-javadocs-linkvalidation" 
           description="Generates the JavaDocs for the linkvalidation project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Core API Specification" 
                         windowtitle="Alfresco Core API" 
                         projectdir="${dir.project.linkvalidation}"/>
   </target>


   
   <!-- ********************* -->
   <!-- ** JCR TCK Project ** -->
   <!-- ********************* -->

   <target name="build-tck" 
           depends="package-repository"
           description="Builds the JCR TCK WAR file">
      <war warfile="${dir.project.repository.dist}/${file.name.war.jcr.tck}" 
           webxml="${dir.project.repository.src.webinf}\JCRTCK\web.xml">
         <fileset dir="${dir.project.repository.src.web}" 
                  excludes="WEB-INF/**" />
         <webinf dir="${dir.project.installer}" 
                 includes="licenses/**" />
         <webinf dir="${dir.project.repository.src.webinf}" 
                 excludes="web.xml"/>
         <lib dir="${dir.project.3rdparty.lib}" 
              includes="*.jar" 
              excludes="${dir.name.devenv}/**,jcr-1.0.jar" />
         <lib dir="${dir.project.3rdparty.lib}/jibx" 
              includes="*.jar" />
         <lib dir="${dir.project.3rdparty.lib}/openoffice" 
              includes="*.jar" />
         <lib dir="${dir.project.3rdparty.lib}/jmagick" 
              includes="*.jar" />
         <lib dir="${dir.project.3rdparty.lib}/commons" 
              includes="*.jar" />
         <lib dir="${dir.project.3rdparty.lib}/jgroups" 
              includes="*.jar" />
         <lib dir="${dir.project.3rdparty.lib}/swarmcache" 
              includes="*.jar" />
         <lib dir="${dir.project.repository.dist}" 
              includes="${file.name.jar.repository}" />
         <lib dir="${dir.project.core.dist}" 
              includes="${dir.name.jar.core}" />
         <classes dir="${dir.project.repository.config}"/>
         <classes file="${dir.project.core.src.java}/log4j.properties" 
                  prefix="WEB-INF/classes" />
      </war>
   </target>

   <target name="deploy-tck" 
           depends="build-tck">
      <copy file="${dir.project.repository.dist}/${file.name.war.jcr.tck}" 
            todir="${dir.deploy.jcr.tck}/bin/tck-webapp/webapps" />
   </target>

   <target name="start-tck" 
           depends="init">
      <exec dir="${dir.deploy.jcr.tck}/bin/tck-webapp" 
            executable="cmd.exe" 
            spawn="true">
         <arg line="/k start server.bat -debug socket" />
      </exec>
   </target>

   <!-- ************************ -->
   <!-- ** Remote API Project ** -->
   <!-- ************************ -->

   <target name="incremental-remoteapi" 
           description="Performs an incremental build of the remote API project" 
           depends="package-remoteapi" />
      
   <target name="build-remoteapi" 
           description="Performs a clean build of the remote API project" 
           depends="clean-remoteapi, 
                    incremental-remoteapi" />
   
   <target name="clean-remoteapi" 
           description="Cleans the remote API project" 
           depends="init">
      <clean projectdir="${dir.project.remoteapi}" />
   </target>

   <target name="clean-remoteapi-services" 
           depends="init">
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice" />
      </delete>
   </target>

   <target name="compile-remoteapi" 
           description="Compiles the remote API project" 
           depends="init">
      <compile-java-inc-generated projectdir="${dir.project.remoteapi}" />
   </target>
   
   <target name="package-remoteapi" 
           description="Packages the remote API project" 
           depends="compile-remoteapi">
      <mkdir dir="${dir.project.remoteapi.dist}" />
      <jar jarfile="${dir.project.remoteapi.dist}/${file.name.jar.remoteapi}" 
           basedir="${dir.project.remoteapi.classes}">
         <metainf dir="${dir.project.remoteapi.src.metainf}" />
      </jar>
   </target>
   
   <target name="test-remoteapi" 
           description="Runs the tests for the remote API project" 
           depends="compile-remoteapi">
      <run-tests projectdir="${dir.project.remoteapi}" />
   </target>
   
   <target name="generate-javadocs-remoteapi" 
           description="Generates the JavaDocs for the remote API project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Remote Services API Specification" 
                         windowtitle="Alfresco Remote Services API" 
                         projectdir="${dir.project.remoteapi}" />
   </target>
   
   <target name="gen-all-service-servers"
           depends="gen-auth-service-server, 
                    gen-repo-service-server, 
                    gen-content-service-server, 
                    gen-authoring-service-server, 
                    gen-classification-service-server, 
                    gen-action-service-server, 
                    gen-access-control-service-server, 
                    gen-administration-service-server, 
                    gen-dictionary-service-server" />

   <target name="init-service-gen" 
           depends="init">
      <!-- load the WSDL 2 Java task definition -->
      <taskdef name="wsdl2java" 
               classname="org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask">
         <classpath refid="classpath.compile" />
      </taskdef>
   </target>

   <target name="gen-auth-service-server" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/authentication" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/authentication-service.wsdl" 
                 output="${dir.project.remoteapi.src.generated}" 
                 serverSide="true" 
                 skeletondeploy="false" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/authentication/1.0"
                  package="org.alfresco.repo.webservice.authentication" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.repo.webservice.types" />
      </wsdl2java>
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/authentication" 
                  includes="${includes.delete.remoteapi.gensrc}" />
      </delete>
   </target>

   <target name="gen-repo-service-server" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/repository" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/repository-service.wsdl" 
                 output="${dir.project.remoteapi.src.generated}" 
                 serverSide="true" 
                 skeletondeploy="false" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/repository/1.0" 
                  package="org.alfresco.repo.webservice.repository" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.repo.webservice.types" />
         <mapping namespace="http://www.alfresco.org/ws/cml/1.0" 
                  package="org.alfresco.repo.webservice.types" />
         <mapping namespace="http://www.alfresco.org/ws/headers/1.0" 
                  package="org.alfresco.repo.webservice.types" />
      </wsdl2java>
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/repository" 
                  includes="${includes.delete.remoteapi.gensrc}" />
      </delete>
   </target>

   <target name="gen-content-service-server" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/content" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/content-service.wsdl" 
                 output="${dir.project.remoteapi.src.generated}" 
                 serverSide="true" 
                 skeletondeploy="false" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/content/1.0" 
                  package="org.alfresco.repo.webservice.content" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.repo.webservice.types" />
      </wsdl2java>
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/content" 
                  includes="${includes.delete.remoteapi.gensrc}" />
      </delete>
   </target>

   <target name="gen-dictionary-service-server" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/dictionary" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/dictionary-service.wsdl" 
                 output="${dir.project.remoteapi.src.generated}" 
                 serverSide="true" 
                 skeletondeploy="false" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/dictionary/1.0" 
                  package="org.alfresco.repo.webservice.dictionary" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.repo.webservice.types" />
      </wsdl2java>
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/dictionary" 
                  includes="${includes.delete.remoteapi.gensrc}" />
      </delete>
   </target>

   <target name="gen-classification-service-server" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/classification" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/classification-service.wsdl" 
                 output="${dir.project.remoteapi.src.generated}" 
                 serverSide="true" 
                 skeletondeploy="false" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/classification/1.0" 
                  package="org.alfresco.repo.webservice.classification" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.repo.webservice.types" />
      </wsdl2java>
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/classification" 
                  includes="${includes.delete.remoteapi.gensrc}" />
      </delete>
   </target>

   <target name="gen-authoring-service-server" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/authoring" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/authoring-service.wsdl" 
                 output="${dir.project.remoteapi.src.generated}" 
                 serverSide="true" 
                 skeletondeploy="false" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/authoring/1.0" 
                  package="org.alfresco.repo.webservice.authoring" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.repo.webservice.types" />
      </wsdl2java>
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/authoring" 
                  includes="${includes.delete.remoteapi.gensrc}" />
      </delete>
   </target>

   <target name="gen-action-service-server" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/action" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/action-service.wsdl" 
                 output="${dir.project.remoteapi.src.generated}" 
                 serverSide="true" 
                 skeletondeploy="false" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/action/1.0" 
                  package="org.alfresco.repo.webservice.action" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.repo.webservice.types" />
      </wsdl2java>
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/action" 
                  includes="${includes.delete.remoteapi.gensrc}" />
      </delete>
   </target>

   <target name="gen-access-control-service-server" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/accesscontrol" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/access-control-service.wsdl" 
                 output="${dir.project.remoteapi.src.generated}" 
                 serverSide="true" 
                 skeletondeploy="false" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/accesscontrol/1.0" 
                  package="org.alfresco.repo.webservice.accesscontrol" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.repo.webservice.types" />
      </wsdl2java>
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/accesscontrol" 
                  includes="${includes.delete.remoteapi.gensrc}" />
      </delete>
   </target>

   <target name="gen-administration-service-server" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/administration" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/administration-service.wsdl" 
                 output="${dir.project.remoteapi.src.generated}" 
                 serverSide="true" 
                 skeletondeploy="false" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/administration/1.0" 
                  package="org.alfresco.repo.webservice.administration" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.repo.webservice.types" />
      </wsdl2java>
      <delete>
         <fileset dir="${dir.project.remoteapi.src.generated}/org/alfresco/repo/webservice/administration" 
                  includes="${includes.delete.remoteapi.gensrc}" />
     </delete>
   </target>


   <!-- ****************** -->
   <!-- ** JNDI Project ** -->
   <!-- ****************** -->

   <target name="incremental-jndi"
           description="Performs an incremental build of the JNDI project" 
           depends="package-jndi" />
      
   <target name="build-jndi" 
           description="Performs a clean build of the JNDI project" 
           depends="clean-jndi, 
                    incremental-jndi" />
   
   <target name="clean-jndi" 
           description="Cleans the JNDI project" 
           depends="init">
      <clean projectdir="${dir.project.jndi}" />
   </target>
   
   <target name="compile-jndi" 
           description="Compiles the JNDI project" 
           depends="init">
      <compile-java projectdir="${dir.project.jndi}" />
   </target>
   
   <target name="package-jndi" 
           description="Packages the JNDI project" 
           depends="compile-jndi">
      <mkdir dir="${dir.project.jndi.dist}" />
      <jar jarfile="${dir.project.jndi.dist}/${file.name.jar.jndi}" 
           basedir="${dir.project.jndi.classes}" />
   </target>
   
   <target name="generate-javadocs-jndi" 
           description="Generates the JavaDocs for the JNDI project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco JNDI (Java Naming and Directory Interface)" 
                         windowtitle="Alfresco JNDI" 
                         projectdir="${dir.project.jndi}"/>
   </target>


   <!-- ******************************************************************** -->
   <!-- ** Tomcat-virtserver Project                                         -->
   <!-- **                                                                   -->
   <!-- **   Normally, you just want to build the various .jar files used    -->
   <!-- **   by the virtualization server, not the virtualization server     -->
   <!-- **   itself.   This target builds the virtualization server itself.  -->
   <!-- **                                                                   -->
   <!-- **   This target is only run by hand on an as-needed basis           -->
   <!-- **   because the Tomcat build requires network access.  The build    -->
   <!-- **   artifact created by running this project is automatically put   -->
   <!-- **   in 3rd-party/distro/apache-tomcat-[vers]-virtserver-[vers].zip  -->
   <!-- **   This arragement preserves the desriable quality of allowing     -->
   <!-- **   builds to run disconnected from any network.                    -->
   <!-- **                                                                   -->
   <!-- **   There are only 3 things that force you to re-run this project:  -->
   <!-- **                                                                   -->
   <!-- **   [1]  Changing file(s) in dir.project.tomcatvirt.src.java        -->
   <!-- **   [2]  Changing the Tomcat version used by the virt server.       -->
   <!-- **   [3]  Changing the Tomcat build config (see replaceregexp below) -->
   <!-- **                                                                   -->
   <!-- **  If you do run this target, be sure to checkin its build artifact -->
   <!-- **  (3rd-party/distro/apache-tomcat-[vers]-virtserver-[vers].zip)    -->
   <!-- **                                                                   -->
   <!-- **                                                                   -->
   <!-- **   Devloper note:                                                  -->
   <!-- **                                                                   -->
   <!-- **       To assemble a virt server with all the libs it needs:       -->
   <!-- **              ant -f continuous.xml  assemble-virtual              -->
   <!-- **       Then on UNIX chmod +x all the .sh files in                  -->
   <!-- **               build/assemble/virtual-tomcat/bin                   -->
   <!-- **       (the real installer takes care of the chmod step).          -->
   <!-- ******************************************************************** -->
   <target name="tomcat-virtserver"
           description="Builds the version of Tomcat used by the virt server"
           depends="init, incremental-catalinavirtual">

      <property name  ="dir.name.src.tomcatvirt.custom"
                value="${dir.project.tomcatvirt.custom.src}/${file.name.base.src.zip.tomcatvirt.apache}" />

      <!-- Expand pristine tomcat source code that will be modified for virt server -->
      <unzip src="${dir.project.tomcatvirt.apache.src}/${file.name.src.zip.tomcatvirt.apache}"
             dest="${dir.project.tomcatvirt.custom.src}" />
       


      <!-- Include extras: tomcat5.exe  (which is just prunsrv.exe)           -->
      <!--            and: tomcat5w.exe (which is just prunmgr.exe)           -->
      <!--                                                                    -->
      <!-- This makes it easy to configure the virt server as a daemon        --> 
      <!-- For more details, see:  http://jakarta.apache.org/commons/daemon   -->
      <!-- and:  "What's the proper way to start the virtualization server?"  -->
      <!-- in:   http://wiki.alfresco.com/wiki/Virtualization_Server_FAQ      -->

      <copy        todir = "${dir.name.src.tomcatvirt.custom}/build/build/bin">
            <fileset dir = "${dir.name.src.tomcatvirt.custom}/connectors/procrun/bin"/>
      </copy>
 
      <!-- Add/override any files in Tomcat's source code with customized files -->
      <copy        todir = "${dir.name.src.tomcatvirt.custom}">
            <fileset dir = "${dir.project.tomcatvirt.src.java}" />
      </copy>

      <!-- Make a custom configuration file -->
      <!-- 
        Note:  An alternative to the following copy an 3 replaceregexp tasks 
               would have been to just include the build.properties file in
               the customized file tree (see: dir.name.src.tomcatvirt.custom).
               However, as the tomcat prop file has a lot of obscure stuff
               in it, in-place surgery was deemed preferable.   This could
               change if the "surgery approach" gets significantly more 
               complex over time.
      -->

      <copy   file="${dir.name.src.tomcatvirt.custom}/build/build.properties.default"
            tofile="${dir.name.src.tomcatvirt.custom}/build/build.properties"/>

      <!-- Set base.path so tomcat's build can download/cache its required libs  -->
      <replaceregexp
            file="${dir.name.src.tomcatvirt.custom}/build/build.properties"  
            match="^base\.path=.*"
            replace="base.path=${dir.project.tomcatvirt.lib}"
            byline="true"/>

      <!-- Build everything (note: adds 10k to zip file) -->
      <replaceregexp
            file="${dir.name.src.tomcatvirt.custom}/build/build.properties"  
            match="^#full\.dist=.*"
            replace="full\.dist=on"
            byline="true"/>

      <!-- Oddly, we need to tell the build where mail.jar is, but no other libs.  -->
      <replaceregexp
            file="${dir.name.src.tomcatvirt.custom}/build/build.properties"  
            match="^mail\.lib=.*"
            replace="mail.lib=${dir.project.3rdparty.lib}"
            byline="true"/>

      <!-- 
           Augment the classpath of the catatalina project within 
           the tomcat virtserver's build so it can reference the
           path umangling logic within AVMUrlValve. 

           XML-escaped regexes are pretty darned ugly!
           Oh well.
       -->
      <replaceregexp
            file="${dir.name.src.tomcatvirt.custom}/container/catalina/build.xml"  
            match="^\s*&lt;path\s+id\s*=\s*&quot;catalina\.classpath&quot;&gt;"
            replace="  &lt;path id=&quot;catalina.classpath&quot;&gt;&#xD;&#xA;    &lt;pathelement location=&quot;${dir.project.catalinavirtual.dist}/${file.name.jar.catalinavirtual}&quot;/&gt;"
            byline="true"/>
         

      <!-- Comple the modified version of tomcat used as the virt server -->
      <ant dir="${dir.name.src.tomcatvirt.custom}"
           inheritAll="false"/>

      <!-- Set +rx permissions on all the .sh files for UNIX (for testing only) -->
      <chmod dir="${dir.name.src.tomcatvirt.custom}/build/build"
             perm="ugo+rx"
             includes="**/*.sh"/>


      <!-- Get rid of stuff that the virt server does not actually need -->
      <delete dir="${dir.name.src.tomcatvirt.custom}/build/build/webapps/balancer"/>
      <delete dir="${dir.name.src.tomcatvirt.custom}/build/build/webapps/jsp-examples"/>
      <delete dir="${dir.name.src.tomcatvirt.custom}/build/build/webapps/servlet-examples"/>
      <delete dir="${dir.name.src.tomcatvirt.custom}/build/build/webapps/tomcat-docs"/>
      <delete dir="${dir.name.src.tomcatvirt.custom}/build/build/webapps/webdav"/>
      <delete dir="${dir.name.src.tomcatvirt.custom}/build/build/server/webapps/admin"/>
      <delete file="${dir.name.src.tomcatvirt.custom}/build/build/conf/Catalina/localhost/admin.xml"/>


      <!-- Refresh cached base virtserver tomcat distro in 3rd party 
           Note:  During the install process, other files are added/removed 
                  from this zip file (e.g.: jndi-related stuff).  
                  See continuous.xml for the gory details.
      -->
      <zip destfile="${dir.project.3rdparty}/distro/${file.name.zip.tomcatvirt.custom}">
           <zipfileset dir="${dir.name.src.tomcatvirt.custom}/build/build"
                       prefix="${file.name.base.zip.tomcatvirt.custom}"/>
      </zip>
   </target>


   <!-- **************************** -->
   <!-- ** Virtual Tomcat Project ** -->
   <!-- **************************** -->

   <target name="incremental-catalinavirtual" 
           description="Performs an incremental build of the virtual tomcat project" 
           depends="package-catalinavirtual" />

   <target name="build-catalinavirtual" 
           description="Performs a clean build of the virtual tomcat project" 
           depends="clean-catalinavirtual, 
                    incremental-catalinavirtual" />

   <target name="clean-catalinavirtual" 
           description="Cleans the virtual tomcat project" 
           depends="init">
      <clean projectdir="${dir.project.catalinavirtual}" />
   </target>

   <target name="compile-catalinavirtual" 
           description="Compiles the virtual tomcat project" 
           depends="init">
      <compile-java projectdir="${dir.project.catalinavirtual}" />
   </target>

   <target name="package-catalinavirtual" 
           description="Packages the virtual tomcat project" 
           depends="compile-catalinavirtual">
      <mkdir dir="${dir.project.catalinavirtual.dist}" />
      <jar jarfile="${dir.project.catalinavirtual.dist}/${file.name.jar.catalinavirtual}" 
           basedir="${dir.project.catalinavirtual.classes}" />
   </target>

   <target name="test-catalinavirtual" 
           description="Runs the tests for the virtual tomcat project" 
           depends="compile-catalinavirtual">
      <run-tests projectdir="${dir.project.catalinavirtual}" />
   </target>

   <target name="generate-javadocs-catalinavirtual" 
           description="Generates the JavaDocs for the virtual tomcat project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Catalina Valve" 
                         windowtitle="Alfresco Catalina Valve" 
                         projectdir="${dir.project.catalinavirtual}"/>
   </target>

   <!-- *************************** -->
   <!-- ** Web-Framework Project ** -->
   <!-- *************************** -->
   
   <target name="incremental-webframework" 
           description="Performs an incremental build of the web framework project"
           depends="package-webframework" />
      
   <target name="build-webframework" 
           description="Performs a clean build of the web framework project"
           depends="clean-webframework, 
                    incremental-webframework" />
   
   <target name="clean-webframework" 
           description="Cleans the web framework project" 
           depends="init">
      <clean projectdir="${dir.project.webframework}" />
   </target>
   
   <target name="compile-webframework" 
           description="Compiles the web framework project" 
           depends="init">
      <compile-java projectdir="${dir.project.webframework}" />
   </target>
   
   <target name="package-webframework"
           description="Packages the web framework project"
           depends="compile-webframework">
      <mkdir dir="${dir.project.webframework.dist}" />
      <jar jarfile="${dir.project.webframework.dist}/${file.name.jar.webframework}" 
           basedir="${dir.project.webframework.classes}" />
   </target>
   
   <target name="test-webframework" 
           description="Runs the tests for the web framework project" 
           depends="compile-webframework">
      <run-tests projectdir="${dir.project.webframework}" />
   </target>
   
   <target name="generate-javadocs-webframework" 
           description="Generates the JavaDocs for the web framework project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Web Framework" 
                         windowtitle="Alfresco Web Framework" 
                         projectdir="${dir.project.webframework}"/>
   </target>

   <!-- ************************ -->
   <!-- ** Web Client Project ** -->
   <!-- ************************ -->

   <target name="incremental-webclient" 
           description="Performs an incremental build of the webclient project" 
           depends="package-webclient" />
      
   <target name="build-webclient" 
           description="Performs a clean build of the webclient project" 
           depends="clean-webclient, 
           incremental-webclient" />
   
   <target name="clean-webclient" 
           description="Cleans the webclient project" 
           depends="init">
      <clean projectdir="${dir.project.webclient}" />
      <delete includeEmptyDirs="true" 
              quiet="yes" 
              dir="${dir.project.webclient.samplewebsite}" />
   </target>
   
   <target name="compile-webclient" 
           description="Compiles the webclient project" 
           depends="init">
      <compile-java projectdir="${dir.project.webclient}" />
   </target>
   
   
   <target name="package-webclient" 
           description="Packages the webclient project" 
           depends="package-webclient-war, 
                    package-sample-website" />

   <target name="package-webclient-jar" 
           description="Packages the JAR file for the webclient project" 
           depends="compile-webclient">
      <mkdir dir="${dir.project.webclient.dist}" />
      <jar jarfile="${dir.project.webclient.dist}/${file.name.jar.webclient}" 
           basedir="${dir.project.webclient.classes}" />
   </target>

   <target name="package-webclient-war" 
           description="Packages the WAR file for the webclient project" 
           depends="assemble-webclient-war">
      <mkdir dir="${dir.project.webclient.dist}" />
      <war warfile="${dir.project.webclient.dist}/${file.name.war.webclient}" 
           webxml="${dir.project.webclient.src.webinf}/web.xml">
         <fileset dir="${dir.project.webclient.assemble}" />
      </war>
   </target>

   <target name="assemble-webclient-war" 
           depends="package-webclient-jar">
      <mkdir dir="${dir.project.webclient.assemble}" />

      <copy todir="${dir.project.webclient.assemble}">
         <fileset dir="${dir.project.webclient.src.web}" 
                  excludes="WEB-INF/**" />
      </copy>

      <java classname="CommentStripper" 
            dir="${dir.project.webclient.assemble}" 
            fork="yes">
         <arg line="-l -t -r .jsp" />
         <classpath refid="classpath.compile" />
      </java>

      <copy todir="${dir.project.webclient.assemble}/wsdl">
         <fileset dir="${dir.project.remoteapi.src.wsdl}" />
      </copy>

      <copy todir="${dir.project.webclient.assemble}/WEB-INF">
         <fileset dir="${dir.project.webclient.src.webinf}" 
                  excludes="web.xml,jboss*.xml,portlet*.xml,alfresco-object.xml" />
         <fileset dir="${dir.project.installer}" 
                  includes="licenses/**" />
         <fileset dir="${dir.project.remoteapi.src.webinf}"/>
      </copy>

      <!-- add config files to WEB-INF/classes -->
      <copy todir="${dir.project.webclient.assemble}/WEB-INF/classes">
         <fileset dir="${dir.project.core.src.java}" 
                  includes="log4j.properties" />
         <fileset dir="${dir.project.repository.config}" 
                  excludes="**/extension/**" />
         <fileset dir="${dir.project.webclient.config}" 
                  excludes="**/extension/**" />
         <!-- 
         Add dev-context.xml (if present) to WEB-INF/classes.
         This allows developers doing private builds to override
         default values in a repeatable way.  An individual's
         dev-context.xml does not become part of the normal source
         code tree (it's excluded from check-in automatically).
         -->
         <fileset dir="${dir.project.repository.config}"
                  includes="**/extension/dev-context.xml"/>
      </copy>
      <!-- 
           Temporary measure to help Eclipse users deal with 
           link validation dependencies.  This should be cleaned
           up when the build is transformed into a single project.
      -->
      <copy file="${dir.project.linkvalidation.config}/alfresco/alfresco-link-validation-bootstrap-context.xml"
            todir="${dir.project.webclient.assemble}/WEB-INF/classes/alfresco/extension"/>


      <!-- Fixes to lucene FSDirectory -->
      <copy todir="${dir.project.webclient.assemble}/WEB-INF/classes/org/apache/lucene/store">
         <fileset dir="${dir.project.repository.classes}/org/apache/lucene/store" 
                  includes="*.class" />
      </copy>

      <copy todir="${dir.project.webclient.assemble}/WEB-INF/lib">
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="*.jar" 
                  excludes="${dir.name.devenv}/**" />
         <fileset dir="${dir.project.webclient.dist}" 
                  includes="${file.name.jar.webclient}" />
         <fileset dir="${dir.project.3rdparty.lib}/jibx" 
                  includes="*.jar" />
         <fileset dir="${dir.project.3rdparty.lib}/openoffice" 
                  includes="*.jar" />
         <fileset dir="${dir.project.3rdparty.lib}/jmagick" 
                  includes="*.jar" />
         <fileset dir="${dir.project.3rdparty.lib}/commons" 
                  includes="*.jar" />
         <fileset dir="${dir.project.3rdparty.lib}/jgroups" 
                  includes="*.jar" />
         <fileset dir="${dir.project.3rdparty.lib}/jbpm" 
                  includes="*.jar" />
         <fileset dir="${dir.project.3rdparty.lib}/fop" 
                  includes="*.jar"/>
         <fileset dir="${dir.project.core.dist}" 
                  includes="${file.name.jar.core}" />
         <fileset dir="${dir.project.repository.dist}" 
                  includes="${file.name.jar.repository}" />
         <fileset dir="${dir.project.webframework.dist}" 
                  includes="${file.name.jar.webframework}" />
         <fileset dir="${dir.project.linkvalidation.dist}" 
                  includes="${file.name.jar.linkvalidation}" />
         <fileset dir="${dir.project.mbeans.dist}" 
                  includes="${file.name.jar.mbeans}" />
         <fileset dir="${dir.project.deployment.dist}"
                  includes="${file.name.jar.deployment}"/>
         <fileset dir="${dir.project.remoteapi.dist}" 
                  includes="${file.name.jar.remoteapi}" />
      </copy>

      <!-- clean up previously generated properties files -->
      <delete>
         <fileset dir="${dir.project.webclient.assemble}/WEB-INF/classes/alfresco/messages">
            <include name="*_en_US.properties" />
         </fileset>
      </delete>

      <copy todir="${dir.project.webclient.assemble}/WEB-INF/classes/alfresco/messages">
         <fileset dir="${dir.project.webclient.assemble}/WEB-INF/classes/alfresco/messages"/>
         <mapper type="glob" 
                 from="*.properties" 
                 to="*_en_US.properties"/>
      </copy>
   </target>

   <target name="package-webclient-war-jboss" 
           depends="-tomcat">
      <copy todir="${dir.project.webclient.assemble}/WEB-INF" 
            verbose="true">
         <fileset dir="${dir.project.webclient.src.webinf}" 
                  includes="jboss*.xml,portlet*.xml,alfresco-object.xml" />
      </copy>
      <delete verbose="true">
         <fileset dir="${dir.project.webclient.assemble}/WEB-INF/classes" 
                  includes="log4j.properties" />
      </delete>
      <delete verbose="true">
         <fileset dir="${dir.project.webclient.assemble}/WEB-INF/lib" 
                  includes="log4j-1.2.8.jar,portlet-api-lib.jar,myfaces-api.jar,myfaces-impl.jar" />
      </delete>

      <delete file="${dir.project.webclient.dist}/${file.name.war.webclient}" />
      <war warfile="${dir.project.webclient.dist}/${file.name.war.webclient}" 
           webxml="${dir.project.webclient.src.webinf}/web.xml">
         <fileset dir="${dir.project.webclient.assemble}" />
      </war>
   </target>

   <target name="package-sample-website" 
           description="Packages the sample website" 
           depends="compile-webclient" 
           if="enable.webclient.samplewebsite">
      <delete includeEmptyDirs="true" 
              quiet="yes" 
              dir="${dir.project.webclient.samplewebsite}" />
      <mkdir dir="${dir.project.webclient.samplewebsite}/alfresco/classes"/>

      <javac srcdir="${dir.project.webclient.test.resources}/websites/alfresco/ROOT/WEB-INF/classes"
             destdir="${dir.project.webclient.samplewebsite}/alfresco/classes" 
             fork="true"
             memoryMaximumSize="${mem.size.max}" 
             deprecation="${javac.deprecation}" 
             debug="${javac.debug}"  
             target="${javac.target}" 
             source="${javac.source}"
             encoding="${javac.encoding}"
             classpathref="classpath.compile" />

      <jar basedir="${dir.project.webclient.classes}"
           destfile="${dir.project.webclient.samplewebsite}/alfresco/alfresco-form-data-functions.jar"
           includes="org/alfresco/web/forms/*.class"/>

      <jar basedir="${dir.project.webclient.samplewebsite}/alfresco/classes"
           destfile="${dir.project.webclient.samplewebsite}/alfresco/alfresco-sample-website.jar"
           includes="**/*.class"/>

      <mkdir dir="${dir.project.webclient.dist}"/>
      <war destfile="${dir.project.webclient.dist}/${file.name.war.webclient.website}"
           webxml="${dir.project.webclient.test.resources}/websites/alfresco/ROOT/WEB-INF/web.xml">
         <lib dir="${dir.project.3rdparty.lib}">
            <include name="standard.jar"/>
            <include name="jstl-1.1.0.jar"/>
         </lib>
         <lib dir="${dir.project.webclient.samplewebsite}/alfresco" />
         <fileset dir="${dir.project.webclient.test.resources}/websites/alfresco/ROOT">
            <exclude name="WEB-INF/**"/>
            <exclude name="**/.svn"/>
         </fileset>
         <webinf file="${dir.project.webclient.test.resources}/websites/alfresco/ROOT/WEB-INF/pr.tld"/>
      </war>
   </target>

   <target name="test-webclient" 
           description="Runs the tests for the webclient project" 
           depends="compile-webclient">
      <run-tests projectdir="${dir.project.webclient}" />
   </target>

   <target name="generate-javadocs-webclient" 
           description="Generates the JavaDocs for the webclient project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Web Client API Specification" 
                         windowtitle="Alfresco Web Client API" 
                         projectdir="${dir.project.webclient}"/>
   </target>

   <target name="generate-taglibdocs-webclient" 
           description="Creates the tag library docs for the webclient project"
           depends="init">

      <mkdir dir="${dir.project.webclient.docs.taglib}" />

      <java jar="${dir.project.3rdparty.lib}/${dir.name.devenv}/tlddoc.jar" 
            fork="true" 
            failonerror="true">
         <arg line="-d ${dir.project.webclient.docs.taglib}" />
         <arg line="-doctitle 'Alfresco Tag Library Documentation'" />
         <arg line="-windowtitle 'Alfresco Tag Library'" />
         <arg value="${dir.project.webclient.src.webinf}/alfresco.tld" />
         <arg value="${dir.project.webclient.src.webinf}/repo.tld" />
         <arg value="${dir.project.webclient.src.webinf}/wcm.tld" />
      </java>
   </target>

   <!-- ******************************** -->
   <!-- ** Records Management Project ** -->
   <!-- ******************************** -->

   <target name="incremental-rm" 
           description="Performs an incremental build of the records management project."
           depends="package-rm" />

   <target name="build-rm" 
           description="Performs a clean build of the records management project."
           depends="clean-rm, incremental-rm" />

   <target name="clean-rm" 
           description="Cleans the records management project" 
           depends="init">
      <clean projectdir="${dir.module.rm}" />
   </target>

   <target name="compile-rm" 
           description="Compiles the records management project."
           depends="init">
      <compile-java projectdir="${dir.module.rm}" />
   </target>

   <target name="package-rm"
           description="Packages the records management project."
           depends="package-rm-war, deploy-tomcat" />

   <target name="package-rm-jar"
           description="Packages the JAR file for the records management project."
           depends="compile-rm">
      <mkdir dir="${dir.module.rm.dist}" />
      <jar jarfile="${dir.module.rm.dist}/${file.name.jar.rm}" 
           basedir="${dir.module.rm.classes}" />
   </target>

   <target name="package-rm-war"
           description="Packages the WAR file for the records management project."
           depends="package-rm-extension">
      <echo>Installing records management into WAR...</echo>
      <install-amp ampfile="${dir.module.rm.dist}/${file.name.amp.rm}" 
                   warfile="${dir.project.webclient.dist}/${file.name.war.webclient}" />
   </target>

   <target name="package-rm-extension"
           description="Packages the records management extension."
           depends="package-rm-jar">
      <zip destfile="${dir.module.rm.dist}/${file.name.amp.rm}" 
           update="true">
         <zipfileset file="${dir.module.rm.property}/module.properties"/>
         <zipfileset file="${dir.module.rm.dist}/${file.name.jar.rm}" 
                     prefix="lib"/>
         <zipfileset dir="${dir.module.rm.config}" 
                     prefix="config">
            <exclude name="**/module.properties"/>
         </zipfileset>
      </zip>
   </target>

   <target name="test-rm" 
           description="Runs the tests for the records management project."
           depends="compile-rm">
      <run-tests projectdir="${dir.module.rm}" />
   </target>

   <target name="generate-javadocs-rm"
           description="Generates the JavaDocs for the records management project."
           depends="init">
      <generate-javadocs documenttitle="Alfresco Records Management Extension"
                         windowtitle="Records Management"
                         projectdir="${dir.module.rm}"/>
   </target>

   <!-- ******************************** -->
   <!-- ** Blog Integration Project ** -->
   <!-- ******************************** -->

   <target name="incremental-blog"
           description="Performs an incremental build of the blog integration project."
           depends="package-blog" />

   <target name="build-blog"
           description="Performs a clean build of the blog integration project."
           depends="clean-blog, incremental-blog" />

   <target name="clean-blog"
           description="Cleans the blog integration project"
           depends="init">
      <clean projectdir="${dir.module.blog}" />
   </target>

   <target name="compile-blog"
           description="Compiles the blog integration project."
           depends="init">
      <compile-java projectdir="${dir.module.blog}" />
   </target>

   <target name="package-blog"
           description="Packages the blog integration project."
           depends="package-blog-war, deploy-tomcat" />

   <target name="package-blog-jar"
           description="Packages the JAR file for the blog integration project."
           depends="compile-blog">
      <mkdir dir="${dir.module.blog.dist}" />
      <jar jarfile="${dir.module.blog.dist}/${file.name.jar.blog}"
           basedir="${dir.module.blog.classes}">
         <fileset dir="${dir.module.blog}/source">
            <include name="META-INF/*" />
         </fileset>
      </jar>
   </target>

   <target name="package-blog-war"
           description="Packages the WAR file for the blog integration project."
           depends="package-blog-extension">
      <echo>Installing blog integration into WAR...</echo>
      <install-amp ampfile="${dir.module.blog.dist}/${file.name.amp.blog}"
                   warfile="${dir.project.webclient.dist}/${file.name.war.webclient}" />
   </target>

   <target name="package-blog-extension"
           description="Packages the blog integration extension."
           depends="package-blog-jar">
      <zip destfile="${dir.module.blog.dist}/${file.name.amp.blog}"
           update="true">
         <zipfileset file="${dir.module.blog.property}/module.properties"/>
         <zipfileset file="${dir.module.blog.dist}/${file.name.jar.blog}"
                     prefix="lib"/>
         <zipfileset dir="${dir.module.blog}/${dir.name.lib}"
                     prefix="lib"/>
         <zipfileset dir="${dir.module.blog.config}"
                     prefix="config">
            <exclude name="**/module.properties"/>
         </zipfileset>
      </zip>
   </target>

   <target name="test-blog"
           description="Runs the tests for the blog integration project."
           depends="compile-blog">
      <run-tests projectdir="${dir.module.blog}" />
   </target>

   <target name="generate-javadocs-blog"
           description="Generates the JavaDocs for the blog integration project."
           depends="init">
      <generate-javadocs documenttitle="Alfresco Blog Integration Extension"
                         windowtitle="Blog Integration"
                         projectdir="${dir.module.blog}"/>
   </target>

   <!-- ******************************** -->
   <!-- ** PHP SDK Project ** -->
   <!-- ******************************** -->

   <target name="incremental-php" 
           description="Performs an incremental build of the PHP SDK project"
           depends="package-php" />

   <target name="build-php" 
           description="Performs a clean build of the PHP SDK project"
           depends="clean-php, incremental-php" />

   <target name="clean-php" 
           description="Cleans the PHP SDK project" 
           depends="init">
      <clean projectdir="${dir.module.php}" />
   </target>

   <target name="compile-php" 
           description="Compiles the PHP SDK project" 
           depends="init">
      <compile-java projectdir="${dir.module.php}" />
   </target>

   <target name="package-php" 
           description="Packages the PHP SDK project"
           depends="package-php-war, deploy-tomcat" />
           
   <target name="package-php-lib"
           description="Package the PHP client library"
           depends="init">
      <echo>Packaging Alfresco PHP library</echo>
      <mkdir dir="${dir.module.php.dist}" />
      <zip destfile="${dir.module.php.dist}/alfresco-php-library.zip">
         <zipfileset dir="${dir.module.php}/source/php/remote"
                     prefix="alfresco-php-library"/>
      </zip>
      <tar destfile="${dir.module.php.dist}/alfresco-php-library.tar.gz"
           longfile="gnu"
           compression="gzip">
         <tarfileset dir="${dir.module.php}/source/php/remote"
                     prefix="alfresco-php-library"/>
      </tar>
   </target>

   <target name="package-php-jar" 
           description="Packages the JAR file for the PHP SDK project"
           depends="compile-php">
      <mkdir dir="${dir.module.php.dist}" />
      <jar jarfile="${dir.module.php.dist}/${file.name.jar.php}" 
           basedir="${dir.module.php.classes}" />
   </target>

   <target name="package-php-war" 
           description="Packages the WAR file installing the PHP integration module"
           depends="package-php-module">
      <echo>Installing PHP Integration into WAR...</echo>
      <install-amp ampfile="${dir.module.php.dist}/${file.name.amp.php}" 
                   warfile="${dir.project.webclient.dist}/${file.name.war.webclient}" />
   </target>

   <target name="package-php-module" 
           description="Packages the PHP Integration module into an AMP"
           depends="package-php-jar">
      <zip destfile="${dir.module.php.dist}/${file.name.amp.php}" 
           update="true">
         <zipfileset file="${dir.module.php.property}/module.properties"/>
         <zipfileset file="${dir.module.php.dist}/${file.name.jar.php}" 
                     prefix="lib"/>
         <zipfileset dir="${dir.module.php}/${dir.name.lib}" 
                     prefix="lib">
            <exclude name="**/source/**"/>
         </zipfileset>
	 <zipfileset dir="${dir.module.php.web.php}" 
                     prefix="web/php"/>
         <zipfileset dir="${dir.module.php.config}" 
                     prefix="config">
            <exclude name="**/module.properties"/>
         </zipfileset>
      </zip>
   </target>

   <target name="test-php" 
           description="Runs the tests for the PHP SDK project"
           depends="compile-php">
      <run-tests projectdir="${dir.module.php}" />
   </target>

   <target name="generate-javadocs-php" 
           description="Generates the JavaDocs for the records management project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Records Management Extension" 
                         windowtitle="Records Management" 
                         projectdir="${dir.module.php}"/>
   </target>
   
   <target name="refresh-mediawiki" 
   	     description="Refreshes the media wiki integration files" 
   	     depends="init">
   	<copy todir="${dir.mediawiki}/extensions">
      	<fileset dir="${dir.module.php.source.remote}/Integration/MediaWiki" includes="*.php"/>
      </copy>
   </target>
   
   <!-- ******************************** -->
   <!-- ** Knowledge Base Project ** -->
   <!-- ******************************** -->

   <target name="incremental-kb"
           description="Performs an incremental build of the knowledge base project."
           depends="package-kb" />

   <target name="build-kb"
           description="Performs a clean build of the knowledge base project."
           depends="clean-kb, incremental-kb" />

   <target name="clean-kb"
           description="Cleans the knowledge base project"
           depends="init">
      <clean projectdir="${dir.module.kb}" />
   </target>

   <target name="compile-kb"
           description="Compiles the knowledge base project."
           depends="init">
      <compile-java projectdir="${dir.module.kb}" />
   </target>

   <target name="package-kb"
           description="Packages the knowledge base project."
           depends="package-kb-war, deploy-tomcat" />

   <target name="package-kb-jar"
           description="Packages the JAR file for the knowledge base project."
           depends="compile-kb">
      <mkdir dir="${dir.module.kb.dist}" />
      <jar jarfile="${dir.module.kb.dist}/${file.name.jar.kb}"
           basedir="${dir.module.kb.classes}" />
   </target>

   <target name="package-kb-war"
           description="Packages the WAR file for the knowledge base project."
           depends="package-kb-extension">
      <echo>Installing knowledge base into WAR...</echo>
      <install-amp ampfile="${dir.module.kb.dist}/${file.name.amp.kb}"
                   warfile="${dir.project.webclient.dist}/${file.name.war.webclient}" />
   </target>

   <target name="package-kb-extension"
           description="Packages the knowledge base extension."
           depends="package-kb-jar">
      <zip destfile="${dir.module.kb.dist}/${file.name.amp.kb}"
           update="true">
         <zipfileset file="${dir.module.kb.property}/module.properties"/>
         <zipfileset file="${dir.module.kb.dist}/${file.name.jar.kb}"
                     prefix="lib"/>
         <zipfileset file="${dir.module.kb.web}" prefix="web"/>
         <zipfileset dir="${dir.module.kb.config}"
                     prefix="config">
            <exclude name="**/module.properties"/>
         </zipfileset>
      </zip>
   </target>

   <target name="test-kb"
           description="Runs the tests for the knowledge base project."
           depends="compile-kb">
      <run-tests projectdir="${dir.module.kb}" />
   </target>

   <target name="generate-javadocs-kb"
           description="Generates the JavaDocs for the knowledge base project."
           depends="init">
      <generate-javadocs documenttitle="Alfresco Knowledge Base Extension"
                         windowtitle="Knowledge Base"
                         projectdir="${dir.module.kb}"/>
   </target>

   <!-- ******************************** -->
   <!-- ** ACE Project                ** -->
   <!-- ******************************** -->

   <target name="clean-ace"
           description="Cleans the current ACE application build"
           depends="init">

      <!-- Remove the contents of the bin directory -->
      <delete includeemptydirs="true">
         <fileset dir="${dir.ace.bin}" includes="**/*"/>
      </delete>

   </target>

   <target name="incremental-ace"
           description="Incrementally builds the ACE application"
           depends="init">

      <property name="FLEX_HOME" value="${env.FLEX_HOME}"/>

      <!-- Declare the mxmlc task -->
      <taskdef name="mxmlc"
               classname="flex2.ant.MxmlcTask">
         <classpath refid="classpath.compile"/>
      </taskdef>

      <!-- Build the ACE application -->
      <mxmlc file="${dir.ace.src}/${app.ace.mxml}.mxml"
             output="${dir.ace.bin}/${app.ace.swf}.swf"
             incremental="true">

         <!-- Load standard build config -->
         <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml" />
         
         <!-- Set the source path -->
         <source-path path-element="${FLEX_HOME}/frameworks" />

         <!-- Include required SWC's -->
         <library-path dir="${dir.ace.lib}" append="true">
              <!--<include name="close.swc"/>
              <include name="search_button_render.swc"/>-->
              <include name="*.swc"/>
          </library-path>

         <!-- Include standard Flex SWC's and libraries -->
         <compiler.library-path dir="${FLEX_HOME}/frameworks" append="true">
              <include name="libs" />
              <include name="../bundles/{locale}" />
          </compiler.library-path>

      </mxmlc>
      
      <!-- Copy the config into the bin directory -->
      <copy todir="${dir.ace.bin}">
            <fileset file="${dir.ace.src}/ace-config.xml"/>
      </copy>

      <!-- Copy the static assets into the bin directory -->
      <copy todir="${dir.ace.bin}/assets">
            <fileset dir="${dir.ace.src}/assets"/>
      </copy>

   </target>
   
   <target name="wrapper-ace"
           description="Generates HTML wrapper for ACE application"
           depends="init">

      <property name="FLEX_HOME" value="${env.FLEX_HOME}"/>

      <!-- Declare the html-wrapper task -->
      <taskdef name="html-wrapper"
               classname="flex2.ant.HtmlWrapperTask">
         <classpath refid="classpath.compile"/>
      </taskdef>

      <!-- Generate the html wrapper for the ACE application -->
      <html-wrapper
         title="${app.ace.title}"
         width="100%"
         height="100%"
         output="${dir.ace.bin}"
         swf="${app.ace.swf}"/>

   </target>

   <target name="build-ace"
           description="Builds the ACE application"
           depends="clean-ace, incremental-ace, wrapper-ace"/>

   <!-- ******************************** -->
   <!-- ** Web Service Client Project ** -->
   <!-- ******************************** -->

   <target name="incremental-webserviceclient" 
           description="Performs an incremental build of the web service client project" 
           depends="package-webserviceclient" />

   <target name="build-webserviceclient" 
           description="Performs a clean build of the web service client project" 
           depends="clean-webserviceclient, 
                    incremental-webserviceclient" />
   
   <target name="clean-webserviceclient" 
           description="Cleans the web service client project" 
           depends="init">
      <clean projectdir="${dir.project.webserviceclient}" />
   </target>

   <target name="clean-webserviceclient-services" 
           depends="init">
      <delete>
         <fileset dir="${dir.project.webserviceclient.src.generated}/org/alfresco/webservice" />
      </delete>
   </target>

   <target name="compile-webserviceclient" 
           description="Compiles the web service client project" 
           depends="init">
      <compile-java-inc-generated projectdir="${dir.project.webserviceclient}" />
   </target>
   
   <target name="package-webserviceclient" 
           description="Packages the web service client project"  
           depends="compile-webserviceclient">
      <mkdir dir="${dir.project.webserviceclient.dist}" />
      <copy todir="${dir.project.webserviceclient.classes}" 
            file="${dir.project.webserviceclient.src.java}/log4j.properties" />
      <jar jarfile="${dir.project.webserviceclient.dist}/${file.name.jar.webserviceclient}" 
           basedir="${dir.project.webserviceclient.classes}" />
   </target>
   
   <target name="test-webserviceclient" 
           description="Runs the tests for the web service client project" 
           depends="compile-webserviceclient">
      <run-tests projectdir="${dir.project.webserviceclient}" />
   </target>
   
   <target name="generate-javadocs-webserviceclient" 
           description="Generates the JavaDocs for the web service client project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Web Service Client Specification" 
                         windowtitle="Alfresco Web Service Client" 
                         projectdir="${dir.project.webserviceclient}"/>
   	<generate-generated-javadocs documenttitle="Alfresco Web Service Client Specification" 
   	                             windowtitle="Alfresco Web Service Client" 
   	                             projectdir="${dir.project.webserviceclient}"/>
   </target>

   <target name="gen-all-service-clients" 
           depends="gen-auth-service-client, 
                    gen-repo-service-client, 
                    gen-content-service-client, 
                    gen-authoring-service-client, 
                    gen-classification-service-client, 
                    gen-action-service-client, 
                    gen-access-control-service-client, 
                    gen-administration-service-client, 
                    gen-dictionary-service-client" />

   <target name="gen-auth-service-client" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.webserviceclient.src.generated}/org/alfresco/webservice/authentication" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/authentication-service.wsdl" 
                 output="${dir.project.webserviceclient.src.generated}" 
                 testcase="no" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/authentication/1.0" 
                  package="org.alfresco.webservice.authentication" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.webservice.types" />
      </wsdl2java>
   </target>

   <target name="gen-repo-service-client" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.webserviceclient.src.generated}/org/alfresco/webservice/repository" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/repository-service.wsdl" 
                 output="${dir.project.webserviceclient.src.generated}" 
                 testcase="no" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/repository/1.0" 
                  package="org.alfresco.webservice.repository" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.webservice.types" />
         <mapping namespace="http://www.alfresco.org/ws/cml/1.0" 
                  package="org.alfresco.webservice.types" />
         <mapping namespace="http://www.alfresco.org/ws/headers/1.0" 
                  package="org.alfresco.webservice.types" />
      </wsdl2java>
   </target>

   <target name="gen-dictionary-service-client" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.webserviceclient.src.generated}/org/alfresco/webservice/dictionary" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/dictionary-service.wsdl" 
                 output="${dir.project.webserviceclient.src.generated}" 
                 testcase="no" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/dictionary/1.0" 
                  package="org.alfresco.webservice.dictionary" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.webservice.types" />
      </wsdl2java>
   </target>

   <target name="gen-content-service-client" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.webserviceclient.src.generated}/org/alfresco/webservice/content" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/content-service.wsdl" 
                 output="${dir.project.webserviceclient.src.generated}" 
                 testcase="no" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/content/1.0" 
                  package="org.alfresco.webservice.content" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.webservice.types" />
      </wsdl2java>
   </target>

   <target name="gen-classification-service-client" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.webserviceclient.src.generated}/org/alfresco/webservice/classification" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/classification-service.wsdl" 
                 output="${dir.project.webserviceclient.src.generated}" 
                 testcase="no" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/classification/1.0" 
                  package="org.alfresco.webservice.classification" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.webservice.types" />
      </wsdl2java>
   </target>

   <target name="gen-authoring-service-client" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.webserviceclient.src.generated}/org/alfresco/webservice/authoring" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/authoring-service.wsdl" 
                 output="${dir.project.webserviceclient.src.generated}" 
                 testcase="no" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/authoring/1.0" 
                  package="org.alfresco.webservice.authoring" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.webservice.types" />
      </wsdl2java>
   </target>

   <target name="gen-action-service-client" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.webserviceclient.src.generated}/org/alfresco/webservice/action" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/action-service.wsdl" 
                 output="${dir.project.webserviceclient.src.generated}" 
                 testcase="no" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/action/1.0" 
                  package="org.alfresco.webservice.action" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.webservice.types" />
      </wsdl2java>
   </target>

   <target name="gen-access-control-service-client" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.webserviceclient.src.generated}/org/alfresco/webservice/accesscontrol" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/access-control-service.wsdl" 
                 output="${dir.project.webserviceclient.src.generated}" 
                 testcase="no" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/accesscontrol/1.0" 
                  package="org.alfresco.webservice.accesscontrol" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.webservice.types" />
      </wsdl2java>
   </target>

   <target name="gen-administration-service-client" 
           depends="init-service-gen">
      <delete>
         <fileset dir="${dir.project.webserviceclient.src.generated}/org/alfresco/webservice/administration" />
      </delete>
      <wsdl2java url="${dir.project.remoteapi.src.wsdl}/administration-service.wsdl" 
                 output="${dir.project.webserviceclient.src.generated}" 
                 testcase="no" 
                 all="true">
         <mapping namespace="http://www.alfresco.org/ws/service/administration/1.0" 
                  package="org.alfresco.webservice.administration" />
         <mapping namespace="http://www.alfresco.org/ws/model/content/1.0" 
                  package="org.alfresco.webservice.types" />
      </wsdl2java>
   </target>

   <!-- ********************************* -->
   <!-- ** Benchmark Framework Project ** -->
   <!-- ********************************* -->

   <target name="incremental-benchmarkframework" 
           description="Performs an incremental build of the benchmark framework project" 
           depends="package-benchmarkframework"/>

   <target name="build-benchmarkframework" 
           description="Performs a clean build of the benchmark framework project" 
           depends="clean-benchmarkframework, 
                    incremental-benchmarkframework" />

   <target name="clean-benchmarkframework" 
           description="Cleans the benchmark framework project" 
           depends="init">
      <clean projectdir="${dir.project.benchmarkframework}" />
   </target>

   <target name="compile-benchmarkframework" 
           description="Compiles the benchmark framework project" 
           depends="init">
      <mkdir dir="${dir.project.benchmarkframework.classes}" />
      <javac destdir="${dir.project.benchmarkframework.classes}" 
             fork="true"
             memoryMaximumSize="${mem.size.max}" 
             deprecation="${javac.deprecation}" 
             debug="${javac.debug}"  
             target="${javac.target}" 
             source="${javac.source}" 
             encoding="${javac.encoding}">
         <src path="${dir.project.benchmarkframework.src.java}" />
         <classpath>
            <fileset dir="${dir.project.benchmarkframework.lib}/japex">
               <include name="*.jar"/>
            </fileset>
            <fileset dir="${dir.project.benchmarkframework.lib}">
               <include name="*.jar"/>
            </fileset>
            <fileset dir="${dir.project.3rdparty.lib}/commons">
               <filename name="commons-logging-*.jar" />
            </fileset>
         </classpath>
      </javac>
   </target>

   <target name="package-benchmarkframework" 
           description="Packages the benchmark framework project" 
           depends="compile-benchmarkframework">
      <mkdir dir="${dir.project.benchmarkframework.dist}" />
      <jar jarfile="${dir.project.benchmarkframework.dist}/${file.name.jar.benchmarkframework}" 
           basedir="${dir.project.benchmarkframework.classes}" />
   </target>

   <target name="generate-javadocs-benchmarkframework" 
           description="Generates the JavaDocs for the benchmark framework project"
           depends="init">
      <generate-javadocs documenttitle="Benchmark Framework" 
                         windowtitle="Benchmark Framework" 
                         projectdir="${dir.project.benchmarkframework}"/>
   </target>

   <!-- ***************************** -->
   <!-- ** Benchmark Tests Project ** -->
   <!-- ***************************** -->

   <target name="incremental-benchmarktests" 
           description="Performs an incremental build of the benchmark tests project" 
           depends="package-benchmarktests" />

   <target name="build-benchmarktests" 
           description="Performs a clean build of the benchmark tests project" 
           depends="clean-benchmarktests, 
                    incremental-benchmarktests" />

   <target name="clean-benchmarktests" 
           description="Cleans the benchmark tests project" 
           depends="init">
      <clean projectdir="${dir.project.benchmarktests}" />
   </target>

   <target name="compile-benchmarktests" 
           description="Compiles the benchmark tests project" 
           depends="init">
      <mkdir dir="${dir.project.benchmarktests.classes}" />
      <javac destdir="${dir.project.benchmarktests.classes}" 
             fork="true"
             memoryMaximumSize="${mem.size.max}" 
             deprecation="${javac.deprecation}" 
             debug="${javac.debug}"  
             target="${javac.target}" 
             source="${javac.source}">
         <src path="${dir.project.benchmarktests.src.java}" />
         <classpath refid="classpath.compile" />
         <classpath>
            <fileset dir="${dir.project.benchmarkframework.lib}/japex">
               <include name="*.jar"/>
            </fileset>
            <fileset dir="${dir.project.benchmarkframework.lib}">
               <include name="*.jar"/>
            </fileset>
         </classpath>
      </javac>
   </target>

   <target name="package-benchmarktests" 
           description="Packages the benchmark tests project" 
           depends="compile-benchmarktests">
      <mkdir dir="${dir.project.benchmarktests.dist}" />
      <jar jarfile="${dir.project.benchmarktests.dist}/${file.name.jar.benchmarktests}" 
           basedir="${dir.project.benchmarktests.classes}" />
   </target>

   <target name="generate-javadocs-benchmarktests" 
           description="Generates the JavaDocs for the benchmark tests project"
           depends="init">
      <generate-javadocs documenttitle="Alfresco Benchmark Tests" 
                         windowtitle="Alfresco Benchmark Tests" 
                         projectdir="${dir.project.benchmarktests}"/>
   </target>

   <!-- ************************** -->
   <!-- ** Devenv Tools Project ** -->
   <!-- ************************** -->

   <target name="incremental-devenv" 
           description="Performs an incremental build of the devenv tools project" 
           depends="package-devenv" />

   <target name="build-devenv" 
           description="Performs a clean build of the devenv tools project" 
           depends="clean-devenv, 
                    incremental-devenv" />

   <target name="clean-devenv" 
           description="Cleans the devenv tools project" 
           depends="init">
      <clean projectdir="${dir.project.devenv}" />
   </target>

   <target name="compile-devenv" 
           description="Compiles the devenv tools project" 
           depends="init">
      <compile-java projectdir="${dir.project.devenv}" />
   </target>

   <target name="package-devenv" 
           description="Packages the devenv tools project" 
           depends="compile-devenv">
      <mkdir dir="${dir.project.devenv.dist}" />
      <jar jarfile="${dir.project.devenv.dist}/${file.name.jar.devenv}"
           basedir="${dir.project.devenv.classes}" />
      <copy todir="${dir.project.3rdparty.lib}/devenv" 
            file="${dir.project.devenv.dist}/${file.name.jar.devenv}" />
   </target>

</project>



